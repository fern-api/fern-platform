[
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
    ],
    "description": "Why do you need Airtop and how does it work?",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop",
    "title": "What is Airtop?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
    ],
    "content": "Overview
Airtop is a cloud browser platform that allows you, your AI Agent, or your automation tools to control a web browser in the cloud.
Any application that wants to automate actions on behalf of users has 2 options:

Use a service's APIs
Use a browser automation tool and interact with a web application directly.

Quite often, the first option is not possible because the service's API is unavailable or does not provide the necessary functionality, so developers must go with option #2.
However, browser automation is very challenging to do well at scale for the following reasons:

Infrastructure Complexity: Properly managing a browser infrastructure is a complex task. You need to manage a cluster of virtual machines, maintain pre-warmed pools of browsers, ensure high availability, manage security of browser sessions, keep browser versions updated to prevent security vulnerabilities, and more.
High Cost: Managing a fleet of browsers is expensive, both in terms of money and infrastructure. In particular, keeping a warm pool of browsers to guarantee high availability is very resource-intensive and not where you want to spend your money.
Fragile Scripts: Writing Puppeteer/Playwright/Selenium scripts is fragile. CSS selectors often break when the page is updated, and the scripts are hard to maintain and scale.
Anti-bot Detection: Most web applications have anti-bot detection mechanisms that make it difficult to automate actions at scale. You need to deal with CAPTCHAs, residential proxies, fingerprinting, and more.
Authentication: Many web applications have authentication mechanisms that make it difficult to automate actions on behalf of users. You need to handle OAuth, SSO, 2FA, and other methods, all with exceptional security requirements.

Airtop solves all of these problems by offering you a simple, scalable, and cost-effective service to run large numbers of browser sessions in the cloud and automate actions via natural language, all through a powerful, yet simple API.
How it works
Creating a browser session
The first step to using Airtop is to create a browser session, which is as simple as a single line of code.
const session = await client.sessions.create();
session = client.sessions.create()

This will instantiate a cloud browser that you can use to navigate the web, either directly as an end-user, or via an API as an AI Agent.
AI APIs
Airtop offers a powerful AI API that allows your agent to control the browser through natural language. For example, suppose that you wanted to extract all the search results in a product search page, including across all pages of results. You could simply call this API with your prompt:
const prompt = `Get me up to 1000 results in this search page 
                and extract the title, price, and link for each result. 
                Format the results as a JSON array.`;
const results = await client.windows.promptContent(session.data.id, window.id, {
  prompt,
  followPaginationLinks: true,
});
prompt = """
Get me up to 1000 results in this search page and extract the title, price, and link for each result. 
Format the results as a JSON array.
"""
prompt_result = client.windows.prompt_content(session.data.id, window_response.data.window_id, prompt=prompt)

These APIs are powered by a state-of-the-art LLM that understands the structure of the web, and can navigate complex pages. We use a multi-modal approach that incorporates visual information, text, and DOM structure to understand and navigate pages.
This is an excellent option if you want to automate the browser without having to go deep into the DOM structure and craft site specific scripts.
Playwright/Puppeteer/Selenium scripts
There are times when you do want lower level control of your automation. We fully support Playwright, Puppeteer, and Selenium scripts, and can easily integrate with them.
Here is a brief example of how to use Puppeteer/Playwright with Airtop:
const session = await client.sessions.create();
const browser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer API_KEY`,
  },
});
const page = await browser.newPage();

// Navigate to a page
await page.goto('https://www.airtop.ai');

// Extract all the href links from the page
const links = await page.evaluate(() => {
  return Array.from(document.querySelectorAll('a')).map((link) => link.href);
});
browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
    'authorization': 'Bearer API_KEY'
})

default_context = browser.contexts[0]
page = default_context.new_page()

# Navigate to a page
page.goto("https://www.airtop.ai")

# Extract all the href links from the page
links = page.eval_on_selector_all('a', 'elements => elements.map(el => el.href)')

Authentication
Often times, you will need to automate a web application that requires authentication. Airtop offers a powerful authentication system that allows you to ask your users to login and, and subsequently allow your agents to continue browsing the web on their behalf.
First, you create a a browser session as shown above. Then, you can create a live browser view, which you can embed in your own web app and allow your users to interact and log in to the target site.
Once the user logs in, you can save the session profile, which includes all cookies and other artifacts of the browser session. You can subsequently instantiate new browser sessions with that profile, which will include the authenticated state. We never store any actual credentials, including passwords and store the entire profile fully encrypted.

This powerful feature allows you to build applications that can interact with authenticated web services on behalf of your users, while maintaining the highest level of security and privacy.
Residential proxies
There are times when a site blocks requests from a single or a non-residential IP address. In these cases, you can use Airtop's residential proxy feature to proxy traffic to residential IPs and ensure your traffic is not blocked. We include an integrated residential proxy network with over 100 million residential IPs from 100+ countries. Or if you already have your own proxy vendor or infrastructure, you can use your own.
Where to go from here?
Now that you have a basic understanding of what Airtop is and how it works, you can start building your own applications. We recommend the following resources:

Check out our Quickstart Guide to get started.
For more detailed guides on how to use each of our features, check out our How-To Guides section.
If you need to reference our API, check out our API Reference.
We have prepared a set of Recipes, fully functioning, open-sourced examples, that you can download and modify to get started quickly.
Finally, if you get stuck, you can always reach out to us for support.
",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop",
    "title": "What is Airtop?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
    ],
    "description": "Airtop is a cloud browser platform that allows you, your AI Agent, or your automation tools to control a web browser in the cloud.
Any application that wants to automate actions on behalf of users has 2 options:

Use a service's APIs
Use a browser automation tool and interact with a web application directly.

Quite often, the first option is not possible because the service's API is unavailable or does not provide the necessary functionality, so developers must go with option #2.
However, browser automation is very challenging to do well at scale for the following reasons:

Infrastructure Complexity: Properly managing a browser infrastructure is a complex task. You need to manage a cluster of virtual machines, maintain pre-warmed pools of browsers, ensure high availability, manage security of browser sessions, keep browser versions updated to prevent security vulnerabilities, and more.
High Cost: Managing a fleet of browsers is expensive, both in terms of money and infrastructure. In particular, keeping a warm pool of browsers to guarantee high availability is very resource-intensive and not where you want to spend your money.
Fragile Scripts: Writing Puppeteer/Playwright/Selenium scripts is fragile. CSS selectors often break when the page is updated, and the scripts are hard to maintain and scale.
Anti-bot Detection: Most web applications have anti-bot detection mechanisms that make it difficult to automate actions at scale. You need to deal with CAPTCHAs, residential proxies, fingerprinting, and more.
Authentication: Many web applications have authentication mechanisms that make it difficult to automate actions on behalf of users. You need to handle OAuth, SSO, 2FA, and other methods, all with exceptional security requirements.

Airtop solves all of these problems by offering you a simple, scalable, and cost-effective service to run large numbers of browser sessions in the cloud and automate actions via natural language, all through a powerful, yet simple API.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#overview",
    "title": "Overview",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
    ],
    "content": "Airtop is a cloud browser platform that allows you, your AI Agent, or your automation tools to control a web browser in the cloud.
Any application that wants to automate actions on behalf of users has 2 options:

Use a service's APIs
Use a browser automation tool and interact with a web application directly.

Quite often, the first option is not possible because the service's API is unavailable or does not provide the necessary functionality, so developers must go with option #2.
However, browser automation is very challenging to do well at scale for the following reasons:

Infrastructure Complexity: Properly managing a browser infrastructure is a complex task. You need to manage a cluster of virtual machines, maintain pre-warmed pools of browsers, ensure high availability, manage security of browser sessions, keep browser versions updated to prevent security vulnerabilities, and more.
High Cost: Managing a fleet of browsers is expensive, both in terms of money and infrastructure. In particular, keeping a warm pool of browsers to guarantee high availability is very resource-intensive and not where you want to spend your money.
Fragile Scripts: Writing Puppeteer/Playwright/Selenium scripts is fragile. CSS selectors often break when the page is updated, and the scripts are hard to maintain and scale.
Anti-bot Detection: Most web applications have anti-bot detection mechanisms that make it difficult to automate actions at scale. You need to deal with CAPTCHAs, residential proxies, fingerprinting, and more.
Authentication: Many web applications have authentication mechanisms that make it difficult to automate actions on behalf of users. You need to handle OAuth, SSO, 2FA, and other methods, all with exceptional security requirements.

Airtop solves all of these problems by offering you a simple, scalable, and cost-effective service to run large numbers of browser sessions in the cloud and automate actions via natural language, all through a powerful, yet simple API.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#overview",
    "title": "Overview",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
      {
        "slug": "guides/getting-started/what-is-airtop#how-it-works",
        "title": "How it works",
      },
    ],
    "description": "The first step to using Airtop is to create a browser session, which is as simple as a single line of code.
const session = await client.sessions.create();
session = client.sessions.create()

This will instantiate a cloud browser that you can use to navigate the web, either directly as an end-user, or via an API as an AI Agent.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#creating-a-browser-session",
    "title": "Creating a browser session",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How it works",
    ],
    "content": "The first step to using Airtop is to create a browser session, which is as simple as a single line of code.
const session = await client.sessions.create();
session = client.sessions.create()

This will instantiate a cloud browser that you can use to navigate the web, either directly as an end-user, or via an API as an AI Agent.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#creating-a-browser-session",
    "title": "Creating a browser session",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
      {
        "slug": "guides/getting-started/what-is-airtop#how-it-works",
        "title": "How it works",
      },
    ],
    "description": "Airtop offers a powerful AI API that allows your agent to control the browser through natural language. For example, suppose that you wanted to extract all the search results in a product search page, including across all pages of results. You could simply call this API with your prompt:
const prompt = `Get me up to 1000 results in this search page 
                and extract the title, price, and link for each result. 
                Format the results as a JSON array.`;
const results = await client.windows.promptContent(session.data.id, window.id, {
  prompt,
  followPaginationLinks: true,
});
prompt = """
Get me up to 1000 results in this search page and extract the title, price, and link for each result. 
Format the results as a JSON array.
"""
prompt_result = client.windows.prompt_content(session.data.id, window_response.data.window_id, prompt=prompt)

These APIs are powered by a state-of-the-art LLM that understands the structure of the web, and can navigate complex pages. We use a multi-modal approach that incorporates visual information, text, and DOM structure to understand and navigate pages.
This is an excellent option if you want to automate the browser without having to go deep into the DOM structure and craft site specific scripts.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#ai-apis",
    "title": "AI APIs",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How it works",
    ],
    "content": "Airtop offers a powerful AI API that allows your agent to control the browser through natural language. For example, suppose that you wanted to extract all the search results in a product search page, including across all pages of results. You could simply call this API with your prompt:
const prompt = `Get me up to 1000 results in this search page 
                and extract the title, price, and link for each result. 
                Format the results as a JSON array.`;
const results = await client.windows.promptContent(session.data.id, window.id, {
  prompt,
  followPaginationLinks: true,
});
prompt = """
Get me up to 1000 results in this search page and extract the title, price, and link for each result. 
Format the results as a JSON array.
"""
prompt_result = client.windows.prompt_content(session.data.id, window_response.data.window_id, prompt=prompt)

These APIs are powered by a state-of-the-art LLM that understands the structure of the web, and can navigate complex pages. We use a multi-modal approach that incorporates visual information, text, and DOM structure to understand and navigate pages.
This is an excellent option if you want to automate the browser without having to go deep into the DOM structure and craft site specific scripts.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#ai-apis",
    "title": "AI APIs",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
      {
        "slug": "guides/getting-started/what-is-airtop#how-it-works",
        "title": "How it works",
      },
    ],
    "description": "There are times when you do want lower level control of your automation. We fully support Playwright, Puppeteer, and Selenium scripts, and can easily integrate with them.
Here is a brief example of how to use Puppeteer/Playwright with Airtop:
const session = await client.sessions.create();
const browser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer API_KEY`,
  },
});
const page = await browser.newPage();

// Navigate to a page
await page.goto('https://www.airtop.ai');

// Extract all the href links from the page
const links = await page.evaluate(() => {
  return Array.from(document.querySelectorAll('a')).map((link) => link.href);
});
browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
    'authorization': 'Bearer API_KEY'
})

default_context = browser.contexts[0]
page = default_context.new_page()

# Navigate to a page
page.goto("https://www.airtop.ai")

# Extract all the href links from the page
links = page.eval_on_selector_all('a', 'elements => elements.map(el => el.href)')
",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#playwrightpuppeteerselenium-scripts",
    "title": "Playwright/Puppeteer/Selenium scripts",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How it works",
    ],
    "content": "There are times when you do want lower level control of your automation. We fully support Playwright, Puppeteer, and Selenium scripts, and can easily integrate with them.
Here is a brief example of how to use Puppeteer/Playwright with Airtop:
const session = await client.sessions.create();
const browser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer API_KEY`,
  },
});
const page = await browser.newPage();

// Navigate to a page
await page.goto('https://www.airtop.ai');

// Extract all the href links from the page
const links = await page.evaluate(() => {
  return Array.from(document.querySelectorAll('a')).map((link) => link.href);
});
browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
    'authorization': 'Bearer API_KEY'
})

default_context = browser.contexts[0]
page = default_context.new_page()

# Navigate to a page
page.goto("https://www.airtop.ai")

# Extract all the href links from the page
links = page.eval_on_selector_all('a', 'elements => elements.map(el => el.href)')
",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#playwrightpuppeteerselenium-scripts",
    "title": "Playwright/Puppeteer/Selenium scripts",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
      {
        "slug": "guides/getting-started/what-is-airtop#how-it-works",
        "title": "How it works",
      },
    ],
    "description": "Often times, you will need to automate a web application that requires authentication. Airtop offers a powerful authentication system that allows you to ask your users to login and, and subsequently allow your agents to continue browsing the web on their behalf.
First, you create a a browser session as shown above. Then, you can create a live browser view, which you can embed in your own web app and allow your users to interact and log in to the target site.
Once the user logs in, you can save the session profile, which includes all cookies and other artifacts of the browser session. You can subsequently instantiate new browser sessions with that profile, which will include the authenticated state. We never store any actual credentials, including passwords and store the entire profile fully encrypted.

This powerful feature allows you to build applications that can interact with authenticated web services on behalf of your users, while maintaining the highest level of security and privacy.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#authentication",
    "title": "Authentication",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How it works",
    ],
    "content": "Often times, you will need to automate a web application that requires authentication. Airtop offers a powerful authentication system that allows you to ask your users to login and, and subsequently allow your agents to continue browsing the web on their behalf.
First, you create a a browser session as shown above. Then, you can create a live browser view, which you can embed in your own web app and allow your users to interact and log in to the target site.
Once the user logs in, you can save the session profile, which includes all cookies and other artifacts of the browser session. You can subsequently instantiate new browser sessions with that profile, which will include the authenticated state. We never store any actual credentials, including passwords and store the entire profile fully encrypted.

This powerful feature allows you to build applications that can interact with authenticated web services on behalf of your users, while maintaining the highest level of security and privacy.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#authentication",
    "title": "Authentication",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
      {
        "slug": "guides/getting-started/what-is-airtop#how-it-works",
        "title": "How it works",
      },
    ],
    "description": "There are times when a site blocks requests from a single or a non-residential IP address. In these cases, you can use Airtop's residential proxy feature to proxy traffic to residential IPs and ensure your traffic is not blocked. We include an integrated residential proxy network with over 100 million residential IPs from 100+ countries. Or if you already have your own proxy vendor or infrastructure, you can use your own.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#residential-proxies",
    "title": "Residential proxies",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
      "How it works",
    ],
    "content": "There are times when a site blocks requests from a single or a non-residential IP address. In these cases, you can use Airtop's residential proxy feature to proxy traffic to residential IPs and ensure your traffic is not blocked. We include an integrated residential proxy network with over 100 million residential IPs from 100+ countries. Or if you already have your own proxy vendor or infrastructure, you can use your own.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#residential-proxies",
    "title": "Residential proxies",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
    ],
    "description": "Now that you have a basic understanding of what Airtop is and how it works, you can start building your own applications. We recommend the following resources:

Check out our Quickstart Guide to get started.
For more detailed guides on how to use each of our features, check out our How-To Guides section.
If you need to reference our API, check out our API Reference.
We have prepared a set of Recipes, fully functioning, open-sourced examples, that you can download and modify to get started quickly.
Finally, if you get stuck, you can always reach out to us for support.
",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#where-to-go-from-here",
    "title": "Where to go from here?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
    ],
    "content": "Now that you have a basic understanding of what Airtop is and how it works, you can start building your own applications. We recommend the following resources:

Check out our Quickstart Guide to get started.
For more detailed guides on how to use each of our features, check out our How-To Guides section.
If you need to reference our API, check out our API Reference.
We have prepared a set of Recipes, fully functioning, open-sourced examples, that you can download and modify to get started quickly.
Finally, if you get stuck, you can always reach out to us for support.
",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/what-is-airtop#where-to-go-from-here",
    "title": "Where to go from here?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/getting-started/what-is-airtop",
        "title": "Getting Started",
      },
    ],
    "description": "Connect your AI Agent to the web in just 2 minutes

Welcome to Airtop! We're thrilled to guide you through connecting your AI Agent to the web using our powerful cloud browsers. In this quick-start guide, we'll walk you through:

- Setting up your project
- Creating a browser session
- Navigating the web
- Summarizing web pages using AI

By the end, you'll have created your browser session and summarized the page contents in just a few minutes. Let's get started!

<Steps toc={true}>
 
### Step 1

Let's begin by installing the necessary packages. You'll need the Airtop SDK to interact with our service.

<CodeGroup>

```bash NodeJS (npm)
npm i -s @airtop/sdk
```

```bash NodeJS (yarn)
yarn add @airtop/sdk
```

```bash NodeJS (pnpm)
pnpm add @airtop/sdk
```

```bash Python
pip install airtop
```

</CodeGroup>

### Step 2

Get an API key from the [Airtop Developer Portal](https://portal.airtop.ai/api-keys).

<Tip>You can create a **free** account if you don't already have one when you first log in.</Tip>

### Step 3

Open up your favorite code editor and create a new file called `quickstart.js`. Create a new Airtop client.

<CodeGroup>

```ts NodeJS
import { AirtopClient } from '@airtop/sdk';

const apiKey = 'YOUR_AIRTOP_API_KEY';
const client = new AirtopClient({ apiKey });
```

```python Python
from airtop import Airtop

client = Airtop(api_key="YOUR_AIRTOP_API_KEY")
```

</CodeGroup>

### Step 4

Create a new browser session.

<CodeGroup>
```ts NodeJS
const session = await client.sessions.create();
```

```python Python
session = client.sessions.create()
```

</CodeGroup>

### Step 5

Create a new window, load a URL and get the window information.

<CodeGroup>
```ts NodeJS
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });
```

```python Python
window = client.windows.create(session.data.id, url="https://www.airtop.ai")
```

</CodeGroup>


### Step 6

Get the page content and summarize using AI.

<CodeGroup>
```ts NodeJS
const contentSummary = await client.windows.promptContent(session.data.id, window.data.windowId, {
  prompt: 'Summarize the contents of the page in 1 short paragraph up to 170 characters.',
});
console.log(contentSummary.data.modelResponse);

// Terminate the session when you're done
await client.sessions.terminate(session.data.id);
```

```python Python
prompt = 'Summarize the contents of the page in 1 short paragraph up to 170 characters.'
content_summary = client.windows.prompt_content(session.data.id, window.data.window_id, prompt=prompt)
print(content_summary.data.model_response)

# Terminate the session when you're done
client.sessions.terminate(session.data.id)
```

</CodeGroup>

### Step 7

In your terminal, run the following command:

<CodeGroup>
```bash NodeJS
node quickstart.js
```

```bash Python
python quickstart.py
```

</CodeGroup>

</Steps>

Congratulations 🎉! You've just created your first browser session, navigated to the Airtop website and summarized the page contents using AI.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/quick-start",
    "title": "Quick Start",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Getting Started",
    ],
    "content": "Welcome to Airtop! We're thrilled to guide you through connecting your AI Agent to the web using our powerful cloud browsers. In this quick-start guide, we'll walk you through:

Setting up your project
Creating a browser session
Navigating the web
Summarizing web pages using AI

By the end, you'll have created your browser session and summarized the page contents in just a few minutes. Let's get started!
Step 1Let's begin by installing the necessary packages. You'll need the Airtop SDK to interact with our service.npm i -s @airtop/sdk
yarn add @airtop/sdk
pnpm add @airtop/sdk
pip install airtop
Step 2Get an API key from the Airtop Developer Portal.You can create a free account if you don't already have one when you first log in.Step 3Open up your favorite code editor and create a new file called quickstart.js. Create a new Airtop client.import { AirtopClient } from '@airtop/sdk';

const apiKey = 'YOUR_AIRTOP_API_KEY';
const client = new AirtopClient({ apiKey });
from airtop import Airtop

client = Airtop(api_key="YOUR_AIRTOP_API_KEY")
Step 4Create a new browser session.const session = await client.sessions.create();
session = client.sessions.create()
Step 5Create a new window, load a URL and get the window information.const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai")
Step 6Get the page content and summarize using AI.const contentSummary = await client.windows.promptContent(session.data.id, window.data.windowId, {
  prompt: 'Summarize the contents of the page in 1 short paragraph up to 170 characters.',
});
console.log(contentSummary.data.modelResponse);

// Terminate the session when you're done
await client.sessions.terminate(session.data.id);
prompt = 'Summarize the contents of the page in 1 short paragraph up to 170 characters.'
content_summary = client.windows.prompt_content(session.data.id, window.data.window_id, prompt=prompt)
print(content_summary.data.model_response)

# Terminate the session when you're done
client.sessions.terminate(session.data.id)
Step 7In your terminal, run the following command:node quickstart.js
python quickstart.py

Congratulations 🎉! You've just created your first browser session, navigated to the Airtop website and summarized the page contents using AI.",
    "indexSegmentId": "0",
    "slug": "guides/getting-started/quick-start",
    "title": "Quick Start",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "How to create a session with Airtop",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session",
    "title": "Creating a Session",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "What is a session?
A session represents an instance of a browser. Each session is identified by a unique UUID and can contain multiple windows that each can load a page.
How to create a session
You can create a session by simply calling the create function on the API as follows:
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create();
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create()

When you create a session, it may take a small amount of time to initialize. Usually it's a matter of seconds, but in rare cases when hardware isn't immediately available, it may take around 1 minute. The create function will wait until the session is fully initialized and ready to be used. However, if you would like to create a session and not wait for initialization, you can pass the skipWaitSessionReady parameter as true.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({
  configuration: {
    skipWaitSessionReady: true,
  }
});
# Also import SessionConfig to pass the configuration parameter
from airtop import Airtop, SessionConfig

client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))

If you choose to not wait for the session to initialize, you can use the waitForSessionReady function to wait until the session is ready.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({
  configuration: {
    skipWaitSessionReady: true,
  }
});

// Session will be returned immediately but may not be ready for use
await client.sessions.waitForSessionReady(session.data.id);

// Session is now ready for use
client = Airtop(api_key="YOUR_API_KEY")
session = await client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))

# Session will be returned immediately but may not be ready for use
client.sessions.wait_for_session_ready(session.data.id)

# Session is now ready for use

By default, session have a TTL (Time To Live) of 10 mins. Once the TTL expires, the session will be automatically terminated. You can also specify a custom timeout when creating a session by passing the timeoutMinutes parameter.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({configuration: {
  timeoutMinutes: 15,
}});
# Also import SessionConfigV1 to pass the configuration parameter
from airtop import Airtop, SessionConfig

client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create(configuration=SessionConfig(timeout_minutes=15))

You can also terminate a session at any point by calling the terminate function.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create();
await client.sessions.terminate(session.data.id);
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create()
client.sessions.terminate(session.data.id)

Remember that sessions are billed per 30s increments, so it's important to terminate sessions when you're done with them to avoid unnecessary charges.
Session States
Sessions can be in one of the following states:

initializing: The session is pending initialization.
awaiting_capacity: The session is waiting for capacity.
running: The session is running and ready for use.
ended: The session has been ended by the user or due to inactivity.

In general, if you are creating a session via the SDK without the skipWaitSessionReady: true parameter, you do not need to worry about initializing and awaiting_capacity states. These states are only relevant if you are creating a session with the skipWaitSessionReady: true parameter or directly through the REST API. A session might be ended if it terminated due to TTL timeout, if you explicitly terminate it, or if it was terminated due to an error.
You can check the state of a session by calling the getInfo function.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.getInfo(session.data.id);
console.log(session.data.status);
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.getinfo(session.data.id)
print(session.data.status)

Profiles
When creating a session, you can choose to save the profile of the browser for future use, or load a saved profile. This will allow you to reuse cookies and local storage between sessions. For more detailed information on how to use profiles, see Profiles.
Windows
After you create a session, you can create one or more windows to load pages within the session. You can create a window by calling the create function on the windows API.
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai")

Wait Until Options
Before you can interact or prompt the page, the page must be fully loaded. You can provide a waitUntil parameter to the create function to customize exactly what you are waiting for. There are 2 options for the waitUntil parameter: load and domcontentloaded.

load: Wait until the page and all resources are fully loaded (default).
domcontentloaded: Wait until the DOM is fully loaded.

const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" waitUntil: "domcontentloaded"});
window = client.windows.create(session.data.id, url="https://www.airtop.ai", wait_until="domcontentloaded")

Screen Resolution
You can also specify the screen resolution of the window by passing the screenResolution parameter to the create function. This is useful if you want to ensure that the browser is loaded at a specific resolution. The screen resolution should be passed as a string in the format of widthxheight.
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", screenResolution: "1920x1080" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai", screen_resolution="1920x1080")

Loading URLs
If you've already created a window and want to load a URL in it, you can use the loadUrl function using the window ID.
// Create a window and load URL 1
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });

// Load URL 2
await client.windows.loadUrl(session.data.id, windowResponse.data.windowId, { url: "https://www.google.com" });
# Create a window and load URL 1
window = client.windows.create(session.data.id, url="https://www.airtop.ai")

# Load URL 2
client.windows.load_url(session.data.id, window.data.window_id, url="https://www.google.com")

Closing Windows
If you terminate a browser session (see Timeouts and Termination above), all windows associated with that session will be closed automatically.
If you have a window ID, you can close that specific window by calling the close function.
await client.windows.close(sessionId, windowId);
client.windows.close(session_id, window_id)

This can be useful if you have a long running session with multiple windows and want to close windows you aren't using anymore to free up resources.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session",
    "title": "Creating a Session",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "A session represents an instance of a browser. Each session is identified by a unique UUID and can contain multiple windows that each can load a page.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#what-is-a-session",
    "title": "What is a session?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "A session represents an instance of a browser. Each session is identified by a unique UUID and can contain multiple windows that each can load a page.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#what-is-a-session",
    "title": "What is a session?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "You can create a session by simply calling the create function on the API as follows:
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create();
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create()

When you create a session, it may take a small amount of time to initialize. Usually it's a matter of seconds, but in rare cases when hardware isn't immediately available, it may take around 1 minute. The create function will wait until the session is fully initialized and ready to be used. However, if you would like to create a session and not wait for initialization, you can pass the skipWaitSessionReady parameter as true.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({
  configuration: {
    skipWaitSessionReady: true,
  }
});
# Also import SessionConfig to pass the configuration parameter
from airtop import Airtop, SessionConfig

client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))

If you choose to not wait for the session to initialize, you can use the waitForSessionReady function to wait until the session is ready.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({
  configuration: {
    skipWaitSessionReady: true,
  }
});

// Session will be returned immediately but may not be ready for use
await client.sessions.waitForSessionReady(session.data.id);

// Session is now ready for use
client = Airtop(api_key="YOUR_API_KEY")
session = await client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))

# Session will be returned immediately but may not be ready for use
client.sessions.wait_for_session_ready(session.data.id)

# Session is now ready for use

By default, session have a TTL (Time To Live) of 10 mins. Once the TTL expires, the session will be automatically terminated. You can also specify a custom timeout when creating a session by passing the timeoutMinutes parameter.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({configuration: {
  timeoutMinutes: 15,
}});
# Also import SessionConfigV1 to pass the configuration parameter
from airtop import Airtop, SessionConfig

client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create(configuration=SessionConfig(timeout_minutes=15))

You can also terminate a session at any point by calling the terminate function.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create();
await client.sessions.terminate(session.data.id);
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create()
client.sessions.terminate(session.data.id)

Remember that sessions are billed per 30s increments, so it's important to terminate sessions when you're done with them to avoid unnecessary charges.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#how-to-create-a-session",
    "title": "How to create a session",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "You can create a session by simply calling the create function on the API as follows:
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create();
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create()

When you create a session, it may take a small amount of time to initialize. Usually it's a matter of seconds, but in rare cases when hardware isn't immediately available, it may take around 1 minute. The create function will wait until the session is fully initialized and ready to be used. However, if you would like to create a session and not wait for initialization, you can pass the skipWaitSessionReady parameter as true.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({
  configuration: {
    skipWaitSessionReady: true,
  }
});
# Also import SessionConfig to pass the configuration parameter
from airtop import Airtop, SessionConfig

client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))

If you choose to not wait for the session to initialize, you can use the waitForSessionReady function to wait until the session is ready.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({
  configuration: {
    skipWaitSessionReady: true,
  }
});

// Session will be returned immediately but may not be ready for use
await client.sessions.waitForSessionReady(session.data.id);

// Session is now ready for use
client = Airtop(api_key="YOUR_API_KEY")
session = await client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))

# Session will be returned immediately but may not be ready for use
client.sessions.wait_for_session_ready(session.data.id)

# Session is now ready for use

By default, session have a TTL (Time To Live) of 10 mins. Once the TTL expires, the session will be automatically terminated. You can also specify a custom timeout when creating a session by passing the timeoutMinutes parameter.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create({configuration: {
  timeoutMinutes: 15,
}});
# Also import SessionConfigV1 to pass the configuration parameter
from airtop import Airtop, SessionConfig

client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create(configuration=SessionConfig(timeout_minutes=15))

You can also terminate a session at any point by calling the terminate function.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.create();
await client.sessions.terminate(session.data.id);
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.create()
client.sessions.terminate(session.data.id)

Remember that sessions are billed per 30s increments, so it's important to terminate sessions when you're done with them to avoid unnecessary charges.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#how-to-create-a-session",
    "title": "How to create a session",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Sessions can be in one of the following states:

initializing: The session is pending initialization.
awaiting_capacity: The session is waiting for capacity.
running: The session is running and ready for use.
ended: The session has been ended by the user or due to inactivity.

In general, if you are creating a session via the SDK without the skipWaitSessionReady: true parameter, you do not need to worry about initializing and awaiting_capacity states. These states are only relevant if you are creating a session with the skipWaitSessionReady: true parameter or directly through the REST API. A session might be ended if it terminated due to TTL timeout, if you explicitly terminate it, or if it was terminated due to an error.
You can check the state of a session by calling the getInfo function.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.getInfo(session.data.id);
console.log(session.data.status);
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.getinfo(session.data.id)
print(session.data.status)
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#session-states",
    "title": "Session States",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "Sessions can be in one of the following states:

initializing: The session is pending initialization.
awaiting_capacity: The session is waiting for capacity.
running: The session is running and ready for use.
ended: The session has been ended by the user or due to inactivity.

In general, if you are creating a session via the SDK without the skipWaitSessionReady: true parameter, you do not need to worry about initializing and awaiting_capacity states. These states are only relevant if you are creating a session with the skipWaitSessionReady: true parameter or directly through the REST API. A session might be ended if it terminated due to TTL timeout, if you explicitly terminate it, or if it was terminated due to an error.
You can check the state of a session by calling the getInfo function.
const client = new AirtopClient({apiKey: "YOUR_API_KEY"});
const session = await client.sessions.getInfo(session.data.id);
console.log(session.data.status);
client = Airtop(api_key="YOUR_API_KEY")
session = client.sessions.getinfo(session.data.id)
print(session.data.status)
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#session-states",
    "title": "Session States",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "When creating a session, you can choose to save the profile of the browser for future use, or load a saved profile. This will allow you to reuse cookies and local storage between sessions. For more detailed information on how to use profiles, see Profiles.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#profiles",
    "title": "Profiles",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "When creating a session, you can choose to save the profile of the browser for future use, or load a saved profile. This will allow you to reuse cookies and local storage between sessions. For more detailed information on how to use profiles, see Profiles.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#profiles",
    "title": "Profiles",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "After you create a session, you can create one or more windows to load pages within the session. You can create a window by calling the create function on the windows API.
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#windows",
    "title": "Windows",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "After you create a session, you can create one or more windows to load pages within the session. You can create a window by calling the create function on the windows API.
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#windows",
    "title": "Windows",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/creating-a-session#windows",
        "title": "Windows",
      },
    ],
    "description": "Before you can interact or prompt the page, the page must be fully loaded. You can provide a waitUntil parameter to the create function to customize exactly what you are waiting for. There are 2 options for the waitUntil parameter: load and domcontentloaded.

load: Wait until the page and all resources are fully loaded (default).
domcontentloaded: Wait until the DOM is fully loaded.

const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" waitUntil: "domcontentloaded"});
window = client.windows.create(session.data.id, url="https://www.airtop.ai", wait_until="domcontentloaded")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#wait-until-options",
    "title": "Wait Until Options",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Windows",
    ],
    "content": "Before you can interact or prompt the page, the page must be fully loaded. You can provide a waitUntil parameter to the create function to customize exactly what you are waiting for. There are 2 options for the waitUntil parameter: load and domcontentloaded.

load: Wait until the page and all resources are fully loaded (default).
domcontentloaded: Wait until the DOM is fully loaded.

const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" waitUntil: "domcontentloaded"});
window = client.windows.create(session.data.id, url="https://www.airtop.ai", wait_until="domcontentloaded")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#wait-until-options",
    "title": "Wait Until Options",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/creating-a-session#windows",
        "title": "Windows",
      },
    ],
    "description": "You can also specify the screen resolution of the window by passing the screenResolution parameter to the create function. This is useful if you want to ensure that the browser is loaded at a specific resolution. The screen resolution should be passed as a string in the format of widthxheight.
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", screenResolution: "1920x1080" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai", screen_resolution="1920x1080")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#screen-resolution",
    "title": "Screen Resolution",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Windows",
    ],
    "content": "You can also specify the screen resolution of the window by passing the screenResolution parameter to the create function. This is useful if you want to ensure that the browser is loaded at a specific resolution. The screen resolution should be passed as a string in the format of widthxheight.
const window = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", screenResolution: "1920x1080" });
window = client.windows.create(session.data.id, url="https://www.airtop.ai", screen_resolution="1920x1080")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#screen-resolution",
    "title": "Screen Resolution",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/creating-a-session#windows",
        "title": "Windows",
      },
    ],
    "description": "If you've already created a window and want to load a URL in it, you can use the loadUrl function using the window ID.
// Create a window and load URL 1
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });

// Load URL 2
await client.windows.loadUrl(session.data.id, windowResponse.data.windowId, { url: "https://www.google.com" });
# Create a window and load URL 1
window = client.windows.create(session.data.id, url="https://www.airtop.ai")

# Load URL 2
client.windows.load_url(session.data.id, window.data.window_id, url="https://www.google.com")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#loading-urls",
    "title": "Loading URLs",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Windows",
    ],
    "content": "If you've already created a window and want to load a URL in it, you can use the loadUrl function using the window ID.
// Create a window and load URL 1
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai" });

// Load URL 2
await client.windows.loadUrl(session.data.id, windowResponse.data.windowId, { url: "https://www.google.com" });
# Create a window and load URL 1
window = client.windows.create(session.data.id, url="https://www.airtop.ai")

# Load URL 2
client.windows.load_url(session.data.id, window.data.window_id, url="https://www.google.com")
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#loading-urls",
    "title": "Loading URLs",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/creating-a-session#windows",
        "title": "Windows",
      },
    ],
    "description": "If you terminate a browser session (see Timeouts and Termination above), all windows associated with that session will be closed automatically.
If you have a window ID, you can close that specific window by calling the close function.
await client.windows.close(sessionId, windowId);
client.windows.close(session_id, window_id)

This can be useful if you have a long running session with multiple windows and want to close windows you aren't using anymore to free up resources.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#closing-windows",
    "title": "Closing Windows",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Windows",
    ],
    "content": "If you terminate a browser session (see Timeouts and Termination above), all windows associated with that session will be closed automatically.
If you have a window ID, you can close that specific window by calling the close function.
await client.windows.close(sessionId, windowId);
client.windows.close(session_id, window_id)

This can be useful if you have a long running session with multiple windows and want to close windows you aren't using anymore to free up resources.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-session#closing-windows",
    "title": "Closing Windows",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "How to save and restore profiles with Airtop",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile",
    "title": "Profiles",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "What are profiles?
Profiles are saved archives of the artifacts produced by a browsing session. Most importantly, they contain the cookies and local storage of a session, which can be used to hydrate future sessions and keep the same authenticated state. You will want to use profiles when your users need to authenticate to a site via a Live View, and you want to save the authenticated state for your agents to use.
Creating a new profile
When you create a new session, you can request that the profile generated by that session be persisted by passing the persistProfile parameter as true.
const session = await client.sessions.create({configuration: {persistProfile: true}});
const profileId = session.data.profileId;
session = client.sessions.create(configuration=SessionConfig(persist_profile=True))
profile_id = session.data.profileId

When the session returns, you will have a new profile ID that you can use to restore the profile later. Note that the profile will not be persisted until the session has been terminated.
Restoring an existing profile
If you have an existing profile ID, you can restore the profile by passing it to the sessions.create method.
const session = await client.sessions.create({configuration: {baseProfileId: "YOUR_PROFILE_ID"}});
session = client.sessions.create(configuration=SessionConfig(base_profile_id="YOUR_PROFILE_ID"))

This session will be restored from the existing profile.
Profiles are immutable and cannot be changed once created. When you restore a profile, you are duplicating a base profile and making modifications to it. If you want to save a modified version of a profile, you will need start with a base profile and also request that your session's profile be persisted, thereby creating a new profile.const session = await client.sessions.create({configuration: {persistProfile: true, baseProfileId: "ORIGINAL_PROFILE_ID"}});
const profileId = session.data.profileId;
session = client.sessions.create(configuration=SessionConfig(persist_profile=True, base_profile_id="ORIGINAL_PROFILE_ID"))
profile_id = session.data.profile_Id
In this example, ORIGINAL_PROFILE_ID will be used to restore the profile, but the modified version of the profile will be saved with a new ID returned in profileId.
Fetching and deleting profiles
You can fetch a list of all profiles for your account using the profiles.get method.
const profiles = await client.profiles.get();
profiles = client.profiles.get()

You can also fetch a single profile by ID or a list of IDs, which is useful if you want to check the status of a profile.
const profile = await client.profiles.get({profileIds: "PROFILE_ID"});
const profiles = await client.profiles.get({profileIds: ["PROFILE_ID", "ANOTHER_PROFILE_ID"]});
profile = client.profiles.get(profile_ids=["PROFILE_ID"])
profiles = client.profiles.get(profile_ids=["PROFILE_ID", "ANOTHER_PROFILE_ID"])

Finally, you can delete profiles by ID, if you no longer want to retain them.
await client.profiles.delete({profileIds: "PROFILE_ID"});
await client.profiles.delete({profileIds: ["PROFILE_ID", "ANOTHER_PROFILE_ID"]});
client.profiles.delete(profile_ids="PROFILE_ID")
client.profiles.delete(profile_ids=["PROFILE_ID", "ANOTHER_PROFILE_ID"])

Security & Privacy
Airtop takes the security and privacy of your data seriously. We never share any customer data, including profile data, with any third parties, nor do we use that data for any purpose other than to provide the service to you. All profiles are encrypted at rest using AES-256 encryption. If you have any questions or concerns about data privacy and security, please reach out to us at support@airtop.ai.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile",
    "title": "Profiles",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Profiles are saved archives of the artifacts produced by a browsing session. Most importantly, they contain the cookies and local storage of a session, which can be used to hydrate future sessions and keep the same authenticated state. You will want to use profiles when your users need to authenticate to a site via a Live View, and you want to save the authenticated state for your agents to use.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#what-are-profiles",
    "title": "What are profiles?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "Profiles are saved archives of the artifacts produced by a browsing session. Most importantly, they contain the cookies and local storage of a session, which can be used to hydrate future sessions and keep the same authenticated state. You will want to use profiles when your users need to authenticate to a site via a Live View, and you want to save the authenticated state for your agents to use.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#what-are-profiles",
    "title": "What are profiles?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "When you create a new session, you can request that the profile generated by that session be persisted by passing the persistProfile parameter as true.
const session = await client.sessions.create({configuration: {persistProfile: true}});
const profileId = session.data.profileId;
session = client.sessions.create(configuration=SessionConfig(persist_profile=True))
profile_id = session.data.profileId

When the session returns, you will have a new profile ID that you can use to restore the profile later. Note that the profile will not be persisted until the session has been terminated.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#creating-a-new-profile",
    "title": "Creating a new profile",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "When you create a new session, you can request that the profile generated by that session be persisted by passing the persistProfile parameter as true.
const session = await client.sessions.create({configuration: {persistProfile: true}});
const profileId = session.data.profileId;
session = client.sessions.create(configuration=SessionConfig(persist_profile=True))
profile_id = session.data.profileId

When the session returns, you will have a new profile ID that you can use to restore the profile later. Note that the profile will not be persisted until the session has been terminated.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#creating-a-new-profile",
    "title": "Creating a new profile",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "If you have an existing profile ID, you can restore the profile by passing it to the sessions.create method.
const session = await client.sessions.create({configuration: {baseProfileId: "YOUR_PROFILE_ID"}});
session = client.sessions.create(configuration=SessionConfig(base_profile_id="YOUR_PROFILE_ID"))

This session will be restored from the existing profile.
Profiles are immutable and cannot be changed once created. When you restore a profile, you are duplicating a base profile and making modifications to it. If you want to save a modified version of a profile, you will need start with a base profile and also request that your session's profile be persisted, thereby creating a new profile.const session = await client.sessions.create({configuration: {persistProfile: true, baseProfileId: "ORIGINAL_PROFILE_ID"}});
const profileId = session.data.profileId;
session = client.sessions.create(configuration=SessionConfig(persist_profile=True, base_profile_id="ORIGINAL_PROFILE_ID"))
profile_id = session.data.profile_Id
In this example, ORIGINAL_PROFILE_ID will be used to restore the profile, but the modified version of the profile will be saved with a new ID returned in profileId.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#restoring-an-existing-profile",
    "title": "Restoring an existing profile",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "If you have an existing profile ID, you can restore the profile by passing it to the sessions.create method.
const session = await client.sessions.create({configuration: {baseProfileId: "YOUR_PROFILE_ID"}});
session = client.sessions.create(configuration=SessionConfig(base_profile_id="YOUR_PROFILE_ID"))

This session will be restored from the existing profile.
Profiles are immutable and cannot be changed once created. When you restore a profile, you are duplicating a base profile and making modifications to it. If you want to save a modified version of a profile, you will need start with a base profile and also request that your session's profile be persisted, thereby creating a new profile.const session = await client.sessions.create({configuration: {persistProfile: true, baseProfileId: "ORIGINAL_PROFILE_ID"}});
const profileId = session.data.profileId;
session = client.sessions.create(configuration=SessionConfig(persist_profile=True, base_profile_id="ORIGINAL_PROFILE_ID"))
profile_id = session.data.profile_Id
In this example, ORIGINAL_PROFILE_ID will be used to restore the profile, but the modified version of the profile will be saved with a new ID returned in profileId.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#restoring-an-existing-profile",
    "title": "Restoring an existing profile",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "You can fetch a list of all profiles for your account using the profiles.get method.
const profiles = await client.profiles.get();
profiles = client.profiles.get()

You can also fetch a single profile by ID or a list of IDs, which is useful if you want to check the status of a profile.
const profile = await client.profiles.get({profileIds: "PROFILE_ID"});
const profiles = await client.profiles.get({profileIds: ["PROFILE_ID", "ANOTHER_PROFILE_ID"]});
profile = client.profiles.get(profile_ids=["PROFILE_ID"])
profiles = client.profiles.get(profile_ids=["PROFILE_ID", "ANOTHER_PROFILE_ID"])

Finally, you can delete profiles by ID, if you no longer want to retain them.
await client.profiles.delete({profileIds: "PROFILE_ID"});
await client.profiles.delete({profileIds: ["PROFILE_ID", "ANOTHER_PROFILE_ID"]});
client.profiles.delete(profile_ids="PROFILE_ID")
client.profiles.delete(profile_ids=["PROFILE_ID", "ANOTHER_PROFILE_ID"])
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#fetching-and-deleting-profiles",
    "title": "Fetching and deleting profiles",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "You can fetch a list of all profiles for your account using the profiles.get method.
const profiles = await client.profiles.get();
profiles = client.profiles.get()

You can also fetch a single profile by ID or a list of IDs, which is useful if you want to check the status of a profile.
const profile = await client.profiles.get({profileIds: "PROFILE_ID"});
const profiles = await client.profiles.get({profileIds: ["PROFILE_ID", "ANOTHER_PROFILE_ID"]});
profile = client.profiles.get(profile_ids=["PROFILE_ID"])
profiles = client.profiles.get(profile_ids=["PROFILE_ID", "ANOTHER_PROFILE_ID"])

Finally, you can delete profiles by ID, if you no longer want to retain them.
await client.profiles.delete({profileIds: "PROFILE_ID"});
await client.profiles.delete({profileIds: ["PROFILE_ID", "ANOTHER_PROFILE_ID"]});
client.profiles.delete(profile_ids="PROFILE_ID")
client.profiles.delete(profile_ids=["PROFILE_ID", "ANOTHER_PROFILE_ID"])
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#fetching-and-deleting-profiles",
    "title": "Fetching and deleting profiles",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Airtop takes the security and privacy of your data seriously. We never share any customer data, including profile data, with any third parties, nor do we use that data for any purpose other than to provide the service to you. All profiles are encrypted at rest using AES-256 encryption. If you have any questions or concerns about data privacy and security, please reach out to us at support@airtop.ai.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#security--privacy",
    "title": "Security & Privacy",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "Airtop takes the security and privacy of your data seriously. We never share any customer data, including profile data, with any third parties, nor do we use that data for any purpose other than to provide the service to you. All profiles are encrypted at rest using AES-256 encryption. If you have any questions or concerns about data privacy and security, please reach out to us at support@airtop.ai.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/saving-a-profile#security--privacy",
    "title": "Security & Privacy",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "How to provide interactive access of your browser to your users",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view",
    "title": "Creating a Live View",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "What is a Live View?
A live view is a way to provide real-time interactive access of your browser to your users. You can use a live view to support a range of use cases, including:

Authentication workflows
Human / AI training use cases
Human in the loop workflows

How to use a Live View
Step 1Once you have a session and have loaded a url in a window, you can request a live view URL from the API.const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId);
const liveViewUrl = windowInfo.data.liveViewUrl;
window_info = client.windows.get_window_info(session.data.id, window_id)
live_view_url = window_info.data.live_view_url
If you're using Puppeteer, Playwright, or Selenium, you can use framework specific getWindowInfo variants.const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page); // page is a puppeteer.Page object
const windowInfo = await client.windows.getWindowInfoForPlaywrightPage(session, page); // page is a playwright.Page object
const windowInfo = await client.windows.getWindowInfoForSeleniumDriver(session, driver); // driver is a seleniumWebdriver.WebDriver object
window_info = client.windows.get_window_info_for_playwright_page(session.data, page) # page is a playwright.Page object
window_info = client.windows.get_window_info_for_selenium_driver(session.data, browser) # browser is a webdriver.Remote object
Step 2You may load the live view URL in your browser, or more likely, embed it in your application as an iframe.<iframe
  allow="clipboard-read;clipboard-write"
  title="<YOUR_BROWSER_ID>" // iframe elements require a unique title property
  id="<YOUR_BROWSER_ID>" // used to identify the iframe in live view message events
  src="<YOUR_LIVE_VIEW_URL>"
/>
Here's an example of what an embeded live view might look like in an application:Step 3You can optionally set up the live view to include a navigation bar, which will provide a URL bar and other controls to the user.const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {
  includeNavigationBar: true,
});
const liveViewUrl = windowInfo.data.liveViewUrl;
window_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True)
live_view_url = window_info.data.live_view_url
Step 4If you would like to receive messages from the Live View, you can set up a message listener in your application to let you know when certain events occur, such as when the page url changes. Check out the section below on Messages for more information.
Controlling the Live View's dimensions
By default, the live view will resize to fit the wrapping iframe or window. You can control the Live View's size by simply adjusting the iframe's dimensions and the browser contents will resize to fit. However, you may also choose to set the screen resolution and disable resizing as shown below.
const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {
  includeNavigationBar: true,
  screenResolution: "1920x1080", // Width x Height
  disableResize: true,
});
window_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True, screen_resolution="1920x1080", disable_resize=True)

Messages
The Live View iframe and parent window can communicate with each other via the window.postMessage API.
Each message has an eventName field that indicates the type of event, and some messages have a payload field containing relevant data.
To send and receive live view messages, you will first need to install the Airtop SDK for your frontend JS/TS app.
npm install @airtop/sdk

Message handling in the parent window
You can set up a message listener in your application to handle messages from the Live View as shown below.
import { LiveViewEventName, LiveViewMessage } from "@airtop/sdk";

window.addEventListener('message', function (event) {
  const iframe = document.getElementById('airtopLiveView');
  if (!iframe || event.source !== iframe.contentWindow) {
    // Message did not originate from the live view iframe
    return;
  }

  const message: LiveViewMessage = event.data;

  switch (message.eventName) {
    case LiveViewEventName.UrlChange: {
      handleUrlChange(message.payload); // Message payload is the new url
      break;
    }
    default: {
      return;
    }
  }
});

Whenever a relevant event occurs in the live view, the live view iframe will send a message to the parent window, which you can handle as appropriate for your use case.
Sending messages to the live view
If you need your frontend application to send messages to the live view, you can use the postMessage API as shown below. Typically, if you use the built in navigation bar, you won't need to send messages to the live view, but if you have a custom navigation bar, you may need to use this mechanism to control the live view. Of course, your backend service can always control the browser and any changes will be reflected in the live view for your end users.
import { LiveViewEventName, LiveViewMessage } from "@airtop/sdk";

const sendMessageToBrowser = (eventName: string, payload?: any) => {
  const message: LiveViewMessage = {
    eventName,
    ...(payload && { payload }),
  };

  const iframe = document.getElementById(browserId) as HTMLIFrameElement;

  if (!iframe) {
    return;
  }

  iframe.contentWindow.postMessage(message, 'https://live.airtop.ai');
};
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view",
    "title": "Creating a Live View",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "A live view is a way to provide real-time interactive access of your browser to your users. You can use a live view to support a range of use cases, including:

Authentication workflows
Human / AI training use cases
Human in the loop workflows
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#what-is-a-live-view",
    "title": "What is a Live View?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "A live view is a way to provide real-time interactive access of your browser to your users. You can use a live view to support a range of use cases, including:

Authentication workflows
Human / AI training use cases
Human in the loop workflows
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#what-is-a-live-view",
    "title": "What is a Live View?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Step 1Once you have a session and have loaded a url in a window, you can request a live view URL from the API.const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId);
const liveViewUrl = windowInfo.data.liveViewUrl;
window_info = client.windows.get_window_info(session.data.id, window_id)
live_view_url = window_info.data.live_view_url
If you're using Puppeteer, Playwright, or Selenium, you can use framework specific getWindowInfo variants.const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page); // page is a puppeteer.Page object
const windowInfo = await client.windows.getWindowInfoForPlaywrightPage(session, page); // page is a playwright.Page object
const windowInfo = await client.windows.getWindowInfoForSeleniumDriver(session, driver); // driver is a seleniumWebdriver.WebDriver object
window_info = client.windows.get_window_info_for_playwright_page(session.data, page) # page is a playwright.Page object
window_info = client.windows.get_window_info_for_selenium_driver(session.data, browser) # browser is a webdriver.Remote object
Step 2You may load the live view URL in your browser, or more likely, embed it in your application as an iframe.<iframe
  allow="clipboard-read;clipboard-write"
  title="<YOUR_BROWSER_ID>" // iframe elements require a unique title property
  id="<YOUR_BROWSER_ID>" // used to identify the iframe in live view message events
  src="<YOUR_LIVE_VIEW_URL>"
/>
Here's an example of what an embeded live view might look like in an application:Step 3You can optionally set up the live view to include a navigation bar, which will provide a URL bar and other controls to the user.const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {
  includeNavigationBar: true,
});
const liveViewUrl = windowInfo.data.liveViewUrl;
window_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True)
live_view_url = window_info.data.live_view_url
Step 4If you would like to receive messages from the Live View, you can set up a message listener in your application to let you know when certain events occur, such as when the page url changes. Check out the section below on Messages for more information.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#how-to-use-a-live-view",
    "title": "How to use a Live View",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "Step 1Once you have a session and have loaded a url in a window, you can request a live view URL from the API.const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId);
const liveViewUrl = windowInfo.data.liveViewUrl;
window_info = client.windows.get_window_info(session.data.id, window_id)
live_view_url = window_info.data.live_view_url
If you're using Puppeteer, Playwright, or Selenium, you can use framework specific getWindowInfo variants.const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page); // page is a puppeteer.Page object
const windowInfo = await client.windows.getWindowInfoForPlaywrightPage(session, page); // page is a playwright.Page object
const windowInfo = await client.windows.getWindowInfoForSeleniumDriver(session, driver); // driver is a seleniumWebdriver.WebDriver object
window_info = client.windows.get_window_info_for_playwright_page(session.data, page) # page is a playwright.Page object
window_info = client.windows.get_window_info_for_selenium_driver(session.data, browser) # browser is a webdriver.Remote object
Step 2You may load the live view URL in your browser, or more likely, embed it in your application as an iframe.<iframe
  allow="clipboard-read;clipboard-write"
  title="<YOUR_BROWSER_ID>" // iframe elements require a unique title property
  id="<YOUR_BROWSER_ID>" // used to identify the iframe in live view message events
  src="<YOUR_LIVE_VIEW_URL>"
/>
Here's an example of what an embeded live view might look like in an application:Step 3You can optionally set up the live view to include a navigation bar, which will provide a URL bar and other controls to the user.const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {
  includeNavigationBar: true,
});
const liveViewUrl = windowInfo.data.liveViewUrl;
window_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True)
live_view_url = window_info.data.live_view_url
Step 4If you would like to receive messages from the Live View, you can set up a message listener in your application to let you know when certain events occur, such as when the page url changes. Check out the section below on Messages for more information.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#how-to-use-a-live-view",
    "title": "How to use a Live View",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "By default, the live view will resize to fit the wrapping iframe or window. You can control the Live View's size by simply adjusting the iframe's dimensions and the browser contents will resize to fit. However, you may also choose to set the screen resolution and disable resizing as shown below.
const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {
  includeNavigationBar: true,
  screenResolution: "1920x1080", // Width x Height
  disableResize: true,
});
window_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True, screen_resolution="1920x1080", disable_resize=True)
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#controlling-the-live-views-dimensions",
    "title": "Controlling the Live View's dimensions",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "By default, the live view will resize to fit the wrapping iframe or window. You can control the Live View's size by simply adjusting the iframe's dimensions and the browser contents will resize to fit. However, you may also choose to set the screen resolution and disable resizing as shown below.
const windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {
  includeNavigationBar: true,
  screenResolution: "1920x1080", // Width x Height
  disableResize: true,
});
window_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True, screen_resolution="1920x1080", disable_resize=True)
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#controlling-the-live-views-dimensions",
    "title": "Controlling the Live View's dimensions",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "The Live View iframe and parent window can communicate with each other via the window.postMessage API.
Each message has an eventName field that indicates the type of event, and some messages have a payload field containing relevant data.
To send and receive live view messages, you will first need to install the Airtop SDK for your frontend JS/TS app.
npm install @airtop/sdk
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#messages",
    "title": "Messages",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "The Live View iframe and parent window can communicate with each other via the window.postMessage API.
Each message has an eventName field that indicates the type of event, and some messages have a payload field containing relevant data.
To send and receive live view messages, you will first need to install the Airtop SDK for your frontend JS/TS app.
npm install @airtop/sdk
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#messages",
    "title": "Messages",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/creating-a-live-view#messages",
        "title": "Messages",
      },
    ],
    "description": "You can set up a message listener in your application to handle messages from the Live View as shown below.
import { LiveViewEventName, LiveViewMessage } from "@airtop/sdk";

window.addEventListener('message', function (event) {
  const iframe = document.getElementById('airtopLiveView');
  if (!iframe || event.source !== iframe.contentWindow) {
    // Message did not originate from the live view iframe
    return;
  }

  const message: LiveViewMessage = event.data;

  switch (message.eventName) {
    case LiveViewEventName.UrlChange: {
      handleUrlChange(message.payload); // Message payload is the new url
      break;
    }
    default: {
      return;
    }
  }
});

Whenever a relevant event occurs in the live view, the live view iframe will send a message to the parent window, which you can handle as appropriate for your use case.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#message-handling-in-the-parent-window",
    "title": "Message handling in the parent window",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Messages",
    ],
    "content": "You can set up a message listener in your application to handle messages from the Live View as shown below.
import { LiveViewEventName, LiveViewMessage } from "@airtop/sdk";

window.addEventListener('message', function (event) {
  const iframe = document.getElementById('airtopLiveView');
  if (!iframe || event.source !== iframe.contentWindow) {
    // Message did not originate from the live view iframe
    return;
  }

  const message: LiveViewMessage = event.data;

  switch (message.eventName) {
    case LiveViewEventName.UrlChange: {
      handleUrlChange(message.payload); // Message payload is the new url
      break;
    }
    default: {
      return;
    }
  }
});

Whenever a relevant event occurs in the live view, the live view iframe will send a message to the parent window, which you can handle as appropriate for your use case.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#message-handling-in-the-parent-window",
    "title": "Message handling in the parent window",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/creating-a-live-view#messages",
        "title": "Messages",
      },
    ],
    "description": "If you need your frontend application to send messages to the live view, you can use the postMessage API as shown below. Typically, if you use the built in navigation bar, you won't need to send messages to the live view, but if you have a custom navigation bar, you may need to use this mechanism to control the live view. Of course, your backend service can always control the browser and any changes will be reflected in the live view for your end users.
import { LiveViewEventName, LiveViewMessage } from "@airtop/sdk";

const sendMessageToBrowser = (eventName: string, payload?: any) => {
  const message: LiveViewMessage = {
    eventName,
    ...(payload && { payload }),
  };

  const iframe = document.getElementById(browserId) as HTMLIFrameElement;

  if (!iframe) {
    return;
  }

  iframe.contentWindow.postMessage(message, 'https://live.airtop.ai');
};
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#sending-messages-to-the-live-view",
    "title": "Sending messages to the live view",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Messages",
    ],
    "content": "If you need your frontend application to send messages to the live view, you can use the postMessage API as shown below. Typically, if you use the built in navigation bar, you won't need to send messages to the live view, but if you have a custom navigation bar, you may need to use this mechanism to control the live view. Of course, your backend service can always control the browser and any changes will be reflected in the live view for your end users.
import { LiveViewEventName, LiveViewMessage } from "@airtop/sdk";

const sendMessageToBrowser = (eventName: string, payload?: any) => {
  const message: LiveViewMessage = {
    eventName,
    ...(payload && { payload }),
  };

  const iframe = document.getElementById(browserId) as HTMLIFrameElement;

  if (!iframe) {
    return;
  }

  iframe.contentWindow.postMessage(message, 'https://live.airtop.ai');
};
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/creating-a-live-view#sending-messages-to-the-live-view",
    "title": "Sending messages to the live view",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Avoid bot detection with a residential proxy",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy",
    "title": "Using a Residential Proxy",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "What is a residential proxy?
Some websites have mechanisms to detect and block bot traffic coming from datacenter IPs. Residential proxies are networks of residential IP addresses that proxy requests, making them look like regular human traffic. Airtop has support for using residential proxies to avoid detection.
Proxy Options
You can use a proxy in 2 different ways:

Specifying that you want to use Airtop's integrated proxy service when creating a session. With this option, you don't have to do anything else and you'll be charged for the bandwidth that your session uses.

Our integrated proxy service is in alpha mode and not generally available. We plan on rolling it out to all users in Nov 2024.

You can also bring your own proxy. If you'd like to use your own proxy, Airtop doesn't charge for the data that your session uses, and you handle the billing for the proxy yourself with your provider of choice. We have a list of recommended proxy providers below.

How to configure a custom proxy
You can specify a custom proxy in the sessions.create function. proxy can either take a string or an object with url, username, and password properties.
await client.sessions.create({ 
  configuration: {
    proxy: 'https://username:password@my-proxy-provider.com',
  },
});

await client.sessions.create({
  configuration: {
    proxy: {
      url: 'https://my-proxy-provider.com',
      username: 'my-proxy-username',
      password: 'my-proxy-password',
    },
  },
});
from airtop import SessionConfig, Proxy

client.sessions.create(configuration=SessionConfig(proxy='https://username:password@my-proxy-provider.com'))

client.sessions.create(configuration=SessionConfig(
    proxy=Proxy(
        url='https://my-proxy-provider.com', 
        username='my-proxy-username', 
        password='my-proxy-password'
    )
))


Limiting Proxy Usage to Specific Domains
You can limit proxy usage to specific domains by passing an array of { domainPattern, relay } objects to the proxy parameter. This gives you the flexibility to only use the proxy for certain domains, or to use a different proxy for each domain.
In this example, the first object in the array will apply to all requests to all subdomains of wikipedia.org, while the second object will apply to all other domains.
await client.sessions.create({
  configuration: {
    proxy: [
      { domainPattern: '*\.wikipedia\.org', relay: 'https://username:password@my-proxy-provider.com' },
      { domainPattern: '*', relay: 'https://username:password@my-other-proxy-provider.com' },
    ],
  },
});
client.sessions.create(configuration=SessionConfig(
    proxy=[
        SessionConfigV1ProxyItem(domain_pattern='*\.wikipedia\.org', relay='https://username:password@my-proxy-provider.com'),
        SessionConfigV1ProxyItem(domain_pattern='*', relay='https://username:password@my-other-proxy-provider.com')
    ]
))

In this example, only requests to subdomains of wikipedia.org will use the proxy, while all other requests will not use any proxy.
await client.sessions.create({
  configuration: {
    proxy: [
      { domainPattern: '*\.wikipedia\.org', relay: 'https://username:password@my-proxy-provider.com' },
    ],
  },
});
client.sessions.create(configuration=SessionConfig(
    proxy=[
        SessionConfigV1ProxyItem(domain_pattern='*\.wikipedia\.org', relay='https://username:password@my-proxy-provider.com'),
    ]
))

domainPattern is a string where * is a wildcard that matches any string. You can also use the ? character to match a single character.
Recommended Proxy Providers
Different proxy providers have different pros and cons. These are 3 that we've tested and have had good results with, but you should do your own due diligence to see which one will work best for your use case.

Oxylabs
Smartproxy
IPRoyal
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy",
    "title": "Using a Residential Proxy",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Some websites have mechanisms to detect and block bot traffic coming from datacenter IPs. Residential proxies are networks of residential IP addresses that proxy requests, making them look like regular human traffic. Airtop has support for using residential proxies to avoid detection.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#what-is-a-residential-proxy",
    "title": "What is a residential proxy?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "Some websites have mechanisms to detect and block bot traffic coming from datacenter IPs. Residential proxies are networks of residential IP addresses that proxy requests, making them look like regular human traffic. Airtop has support for using residential proxies to avoid detection.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#what-is-a-residential-proxy",
    "title": "What is a residential proxy?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "You can use a proxy in 2 different ways:

Specifying that you want to use Airtop's integrated proxy service when creating a session. With this option, you don't have to do anything else and you'll be charged for the bandwidth that your session uses.

Our integrated proxy service is in alpha mode and not generally available. We plan on rolling it out to all users in Nov 2024.

You can also bring your own proxy. If you'd like to use your own proxy, Airtop doesn't charge for the data that your session uses, and you handle the billing for the proxy yourself with your provider of choice. We have a list of recommended proxy providers below.
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#proxy-options",
    "title": "Proxy Options",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "You can use a proxy in 2 different ways:

Specifying that you want to use Airtop's integrated proxy service when creating a session. With this option, you don't have to do anything else and you'll be charged for the bandwidth that your session uses.

Our integrated proxy service is in alpha mode and not generally available. We plan on rolling it out to all users in Nov 2024.

You can also bring your own proxy. If you'd like to use your own proxy, Airtop doesn't charge for the data that your session uses, and you handle the billing for the proxy yourself with your provider of choice. We have a list of recommended proxy providers below.
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#proxy-options",
    "title": "Proxy Options",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "You can specify a custom proxy in the sessions.create function. proxy can either take a string or an object with url, username, and password properties.
await client.sessions.create({ 
  configuration: {
    proxy: 'https://username:password@my-proxy-provider.com',
  },
});

await client.sessions.create({
  configuration: {
    proxy: {
      url: 'https://my-proxy-provider.com',
      username: 'my-proxy-username',
      password: 'my-proxy-password',
    },
  },
});
from airtop import SessionConfig, Proxy

client.sessions.create(configuration=SessionConfig(proxy='https://username:password@my-proxy-provider.com'))

client.sessions.create(configuration=SessionConfig(
    proxy=Proxy(
        url='https://my-proxy-provider.com', 
        username='my-proxy-username', 
        password='my-proxy-password'
    )
))

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#how-to-configure-a-custom-proxy",
    "title": "How to configure a custom proxy",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "You can specify a custom proxy in the sessions.create function. proxy can either take a string or an object with url, username, and password properties.
await client.sessions.create({ 
  configuration: {
    proxy: 'https://username:password@my-proxy-provider.com',
  },
});

await client.sessions.create({
  configuration: {
    proxy: {
      url: 'https://my-proxy-provider.com',
      username: 'my-proxy-username',
      password: 'my-proxy-password',
    },
  },
});
from airtop import SessionConfig, Proxy

client.sessions.create(configuration=SessionConfig(proxy='https://username:password@my-proxy-provider.com'))

client.sessions.create(configuration=SessionConfig(
    proxy=Proxy(
        url='https://my-proxy-provider.com', 
        username='my-proxy-username', 
        password='my-proxy-password'
    )
))

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#how-to-configure-a-custom-proxy",
    "title": "How to configure a custom proxy",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/using-a-proxy#how-to-configure-a-custom-proxy",
        "title": "How to configure a custom proxy",
      },
    ],
    "description": "You can limit proxy usage to specific domains by passing an array of { domainPattern, relay } objects to the proxy parameter. This gives you the flexibility to only use the proxy for certain domains, or to use a different proxy for each domain.
In this example, the first object in the array will apply to all requests to all subdomains of wikipedia.org, while the second object will apply to all other domains.
await client.sessions.create({
  configuration: {
    proxy: [
      { domainPattern: '*\.wikipedia\.org', relay: 'https://username:password@my-proxy-provider.com' },
      { domainPattern: '*', relay: 'https://username:password@my-other-proxy-provider.com' },
    ],
  },
});
client.sessions.create(configuration=SessionConfig(
    proxy=[
        SessionConfigV1ProxyItem(domain_pattern='*\.wikipedia\.org', relay='https://username:password@my-proxy-provider.com'),
        SessionConfigV1ProxyItem(domain_pattern='*', relay='https://username:password@my-other-proxy-provider.com')
    ]
))

In this example, only requests to subdomains of wikipedia.org will use the proxy, while all other requests will not use any proxy.
await client.sessions.create({
  configuration: {
    proxy: [
      { domainPattern: '*\.wikipedia\.org', relay: 'https://username:password@my-proxy-provider.com' },
    ],
  },
});
client.sessions.create(configuration=SessionConfig(
    proxy=[
        SessionConfigV1ProxyItem(domain_pattern='*\.wikipedia\.org', relay='https://username:password@my-proxy-provider.com'),
    ]
))

domainPattern is a string where * is a wildcard that matches any string. You can also use the ? character to match a single character.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#limiting-proxy-usage-to-specific-domains",
    "title": "Limiting Proxy Usage to Specific Domains",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "How to configure a custom proxy",
    ],
    "content": "You can limit proxy usage to specific domains by passing an array of { domainPattern, relay } objects to the proxy parameter. This gives you the flexibility to only use the proxy for certain domains, or to use a different proxy for each domain.
In this example, the first object in the array will apply to all requests to all subdomains of wikipedia.org, while the second object will apply to all other domains.
await client.sessions.create({
  configuration: {
    proxy: [
      { domainPattern: '*\.wikipedia\.org', relay: 'https://username:password@my-proxy-provider.com' },
      { domainPattern: '*', relay: 'https://username:password@my-other-proxy-provider.com' },
    ],
  },
});
client.sessions.create(configuration=SessionConfig(
    proxy=[
        SessionConfigV1ProxyItem(domain_pattern='*\.wikipedia\.org', relay='https://username:password@my-proxy-provider.com'),
        SessionConfigV1ProxyItem(domain_pattern='*', relay='https://username:password@my-other-proxy-provider.com')
    ]
))

In this example, only requests to subdomains of wikipedia.org will use the proxy, while all other requests will not use any proxy.
await client.sessions.create({
  configuration: {
    proxy: [
      { domainPattern: '*\.wikipedia\.org', relay: 'https://username:password@my-proxy-provider.com' },
    ],
  },
});
client.sessions.create(configuration=SessionConfig(
    proxy=[
        SessionConfigV1ProxyItem(domain_pattern='*\.wikipedia\.org', relay='https://username:password@my-proxy-provider.com'),
    ]
))

domainPattern is a string where * is a wildcard that matches any string. You can also use the ? character to match a single character.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#limiting-proxy-usage-to-specific-domains",
    "title": "Limiting Proxy Usage to Specific Domains",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "Different proxy providers have different pros and cons. These are 3 that we've tested and have had good results with, but you should do your own due diligence to see which one will work best for your use case.

Oxylabs
Smartproxy
IPRoyal
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#recommended-proxy-providers",
    "title": "Recommended Proxy Providers",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "Different proxy providers have different pros and cons. These are 3 that we've tested and have had good results with, but you should do your own due diligence to see which one will work best for your use case.

Oxylabs
Smartproxy
IPRoyal
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/using-a-proxy#recommended-proxy-providers",
    "title": "Recommended Proxy Providers",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "How to open DevTools for a browser

You can access the remote browser's DevTools via a [Live View](./creating-a-live-view). Here you'll be able to inspect a page, network requests, console logs, cookies, and much more.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/debugging-a-session",
    "title": "Debugging a Session",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "You can access the remote browser's DevTools via a Live View. Here you'll be able to inspect a page, network requests, console logs, cookies, and much more.
Load the debugger
First you'll need to create a session and get a Live View URL with the includeNavigationBar parameter set to true. Load the url in your browser.
In the navigation bar inside the Live View, enter debugger in the url field and press enter.

This will load the DevTools page selector where you can select the window you want to inspect.

Once you select a page, the DevTools will connect to the browser and you'll be able to inspect the page.
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/debugging-a-session",
    "title": "Debugging a Session",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
    ],
    "description": "First you'll need to create a session and get a Live View URL with the includeNavigationBar parameter set to true. Load the url in your browser.
In the navigation bar inside the Live View, enter debugger in the url field and press enter.

This will load the DevTools page selector where you can select the window you want to inspect.

Once you select a page, the DevTools will connect to the browser and you'll be able to inspect the page.
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/debugging-a-session#load-the-debugger",
    "title": "Load the debugger",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
    ],
    "content": "First you'll need to create a session and get a Live View URL with the includeNavigationBar parameter set to true. Load the url in your browser.
In the navigation bar inside the Live View, enter debugger in the url field and press enter.

This will load the DevTools page selector where you can select the window you want to inspect.

Once you select a page, the DevTools will connect to the browser and you'll be able to inspect the page.
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/debugging-a-session#load-the-debugger",
    "title": "Load the debugger",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "How to use Puppeteer with Airtop

[Puppeteer](https://pptr.dev) is a popular automation library for Node.js that allows you to control headless browsers. Airtop provides a Puppeteer connector that allows you to use Puppeteer to automate your browser.

<Note>
Puppeteer is not supported in Python. We recommend using Playwright or Selenium instead.
</Note>",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer",
    "title": "Integrating with Puppeteer",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Puppeteer is a popular automation library for Node.js that allows you to control headless browsers. Airtop provides a Puppeteer connector that allows you to use Puppeteer to automate your browser.
Puppeteer is not supported in Python. We recommend using Playwright or Selenium instead.
Installation
You will need to install the puppeteer-core package to use Puppeteer with Airtop.
npm i puppeteer-core
yarn add puppeteer-core
pnpm add puppeteer-core

Usage
Once you have created a session with Airtop, you can use the puppeteer-core package to control the browser by connecting Puppeteer to the CDP endpoint provided by Airtop.
import puppeteer from "puppeteer-core";

const session = await client.sessions.create();
const puppeteerBrowser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});

// Navigate to a page
const page = await browser.newPage();
await page.goto('https://airtop.ai');

// Get the page content
const content = await page.content();
console.log(content);

If you're not already familiar with Puppeteer, you might want to check out their documentation to learn more about the library and its capabilities.
Combining Puppeteer and Airtop Window Management
You can use Airtop's window management functions in combination with Puppeteer to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Puppeteer to push a few buttons on the page.
Once you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a targetId, which you'll use to connect Puppeteer to the window.
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", waitUntil: "load" });

// Get the target ID from the window response
const { targetId } = windowResponse.data;

// Connect to the session using Puppeteer
const puppeteerBrowser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});


// Iterate through the pages to find the one that matches the target ID
const pages = await puppeteerBrowser.pages();
let matchingPage;
for (const page of pages) {
  const pageTargetId = await (page.mainFrame() as any)._id;
  if (pageTargetId === targetId) {
    matchingPage = page;
    break;
  }
}

// Once the page is found you can use Puppeteer to interact with it
if (matchingPage) {
  await matchingPage.click("button");
}

Common Errors
Here are some common errors you might encounter when using Puppeteer with Airtop when you initially connect to the CDP endpoint:
| Error Code | Common Cause |
|-------|----------|
| 400 | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |
| 401 | Unauthorized. Check that you are using a valid API key. |
| 404 | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct |
| 422 | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID? |
| 503 | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it. |",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer",
    "title": "Integrating with Puppeteer",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "You will need to install the puppeteer-core package to use Puppeteer with Airtop.
npm i puppeteer-core
yarn add puppeteer-core
pnpm add puppeteer-core
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#installation",
    "title": "Installation",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "You will need to install the puppeteer-core package to use Puppeteer with Airtop.
npm i puppeteer-core
yarn add puppeteer-core
pnpm add puppeteer-core
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#installation",
    "title": "Installation",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "Once you have created a session with Airtop, you can use the puppeteer-core package to control the browser by connecting Puppeteer to the CDP endpoint provided by Airtop.
import puppeteer from "puppeteer-core";

const session = await client.sessions.create();
const puppeteerBrowser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});

// Navigate to a page
const page = await browser.newPage();
await page.goto('https://airtop.ai');

// Get the page content
const content = await page.content();
console.log(content);

If you're not already familiar with Puppeteer, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#usage",
    "title": "Usage",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Once you have created a session with Airtop, you can use the puppeteer-core package to control the browser by connecting Puppeteer to the CDP endpoint provided by Airtop.
import puppeteer from "puppeteer-core";

const session = await client.sessions.create();
const puppeteerBrowser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});

// Navigate to a page
const page = await browser.newPage();
await page.goto('https://airtop.ai');

// Get the page content
const content = await page.content();
console.log(content);

If you're not already familiar with Puppeteer, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#usage",
    "title": "Usage",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "You can use Airtop's window management functions in combination with Puppeteer to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Puppeteer to push a few buttons on the page.
Once you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a targetId, which you'll use to connect Puppeteer to the window.
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", waitUntil: "load" });

// Get the target ID from the window response
const { targetId } = windowResponse.data;

// Connect to the session using Puppeteer
const puppeteerBrowser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});


// Iterate through the pages to find the one that matches the target ID
const pages = await puppeteerBrowser.pages();
let matchingPage;
for (const page of pages) {
  const pageTargetId = await (page.mainFrame() as any)._id;
  if (pageTargetId === targetId) {
    matchingPage = page;
    break;
  }
}

// Once the page is found you can use Puppeteer to interact with it
if (matchingPage) {
  await matchingPage.click("button");
}
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#combining-puppeteer-and-airtop-window-management",
    "title": "Combining Puppeteer and Airtop Window Management",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "You can use Airtop's window management functions in combination with Puppeteer to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Puppeteer to push a few buttons on the page.
Once you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a targetId, which you'll use to connect Puppeteer to the window.
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", waitUntil: "load" });

// Get the target ID from the window response
const { targetId } = windowResponse.data;

// Connect to the session using Puppeteer
const puppeteerBrowser = await puppeteer.connect({
  browserWSEndpoint: session.data?.cdpWsUrl,
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});


// Iterate through the pages to find the one that matches the target ID
const pages = await puppeteerBrowser.pages();
let matchingPage;
for (const page of pages) {
  const pageTargetId = await (page.mainFrame() as any)._id;
  if (pageTargetId === targetId) {
    matchingPage = page;
    break;
  }
}

// Once the page is found you can use Puppeteer to interact with it
if (matchingPage) {
  await matchingPage.click("button");
}
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#combining-puppeteer-and-airtop-window-management",
    "title": "Combining Puppeteer and Airtop Window Management",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "Here are some common errors you might encounter when using Puppeteer with Airtop when you initially connect to the CDP endpoint:
| Error Code | Common Cause |
|-------|----------|
| 400 | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |
| 401 | Unauthorized. Check that you are using a valid API key. |
| 404 | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct |
| 422 | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID? |
| 503 | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it. |",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#common-errors",
    "title": "Common Errors",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Here are some common errors you might encounter when using Puppeteer with Airtop when you initially connect to the CDP endpoint:
| Error Code | Common Cause |
|-------|----------|
| 400 | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |
| 401 | Unauthorized. Check that you are using a valid API key. |
| 404 | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct |
| 422 | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID? |
| 503 | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it. |",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/puppeteer#common-errors",
    "title": "Common Errors",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "How to use Playwright with Airtop

[Playwright](https://playwright.dev) is a powerful automation library that allows you to control headless browsers. Airtop provides a Playwright connector that allows you to use Playwright to automate your browser.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright",
    "title": "Integrating with Playwright",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Playwright is a powerful automation library that allows you to control headless browsers. Airtop provides a Playwright connector that allows you to use Playwright to automate your browser.
Installation
You will need to install the playwright-core package to use Playwright with Airtop.
npm i playwright-core
yarn add playwright-core
pnpm add playwright-core
pip install playwright

Usage
Once you have created a session with Airtop, you can use the Playwright library to control the browser by connecting Playwright to the CDP endpoint provided by Airtop. Please note that currently, Airtop only supports using the default browser context.
import { chromium } from 'playwright-core';

const session = await client.sessions.create();
const playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});

// Airtop does not currently support multiple contexts.
// Please be sure to use the default context.
const defaultContext = playwrightBrowser.contexts()[0];

// Navigate to a new page
const page = await defaultContext.newPage();
await page.goto('https://www.airtop.ai');

// Get the page content
const content = await page.content();
console.log(content);
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Connect to the cloud browser.
    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
        'authorization': f'Bearer YOUR_API_KEY'
    })

    # Airtop does not currently support multiple contexts.
    # Please be sure to use the default context.
    default_context = browser.contexts[0]
    page = default_context.new_page()
    page.goto("https://www.airtop.ai")

    # Get the page content
    content = page.content()
    print(content)

If you're not already familiar with Playwright, you might want to check out their documentation to learn more about the library and its capabilities.
Combining Playwright and Airtop Window Management
You can use Airtop's window management functions in combination with Playwright to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Playwright to push a few buttons on the page.
Once you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a targetId, which you'll use to connect Playwright to the window.
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", waitUntil: "load" });

// Get the target ID from the window response
const { targetId } = windowResponse.data;

// Connect to the session using Playwright
const playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  }
});

// Iterate through the pages to find the one that matches the target ID
const pages = playwrightBrowser.contexts()[0].pages();
let matchingPage;
for (const page of pages) {
  const cdpSession = await page.context().newCDPSession(page);
  const { targetInfo } = await cdpSession.send('Target.getTargetInfo');
  const pageTargetId = targetInfo.targetId;
  if (pageTargetId === targetId) {
    matchingPage = page;
    break;
  }
}

// Once the page is found you can use Playwright to interact with it
if (matchingPage) {
  await matchingPage.getByRole('button').click();
}
window_response = client.windows.create(session.data.id, url="https://www.airtop.ai", wait_until="load")

# Get the target ID from the window response
window_target_id = window_response.data.target_id

with sync_playwright() as p:
    # Connect to the session using Playwright.
    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
        'authorization': 'Bearer YOUR_API_KEY'
    })

    pages = browser.contexts[0].pages
    for page in pages:
        cdp_session = page.context.new_cdp_session(page)
        result = cdp_session.send('Target.getTargetInfo')
        if result['targetInfo']['targetId'] == window_target_id:
            matching_page = page
            break

    # Once the page is found you can use Playwright to interact with it
    if matching_page:
        matching_page.get_by_role('button').click()

Common Errors
Here are some common errors you might encounter when using Playwright with Airtop when you initially connect to the CDP endpoint:
| Error Code | Common Cause                                                                                                                                                        |
| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 400    | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |
| 401    | Unauthorized. Check that you are using a valid API key.                                                                                                             |
| 404    | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct                                                     |
| 422    | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID?                                                        |
| 503    | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it.        |",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright",
    "title": "Integrating with Playwright",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "You will need to install the playwright-core package to use Playwright with Airtop.
npm i playwright-core
yarn add playwright-core
pnpm add playwright-core
pip install playwright
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#installation",
    "title": "Installation",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "You will need to install the playwright-core package to use Playwright with Airtop.
npm i playwright-core
yarn add playwright-core
pnpm add playwright-core
pip install playwright
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#installation",
    "title": "Installation",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "Once you have created a session with Airtop, you can use the Playwright library to control the browser by connecting Playwright to the CDP endpoint provided by Airtop. Please note that currently, Airtop only supports using the default browser context.
import { chromium } from 'playwright-core';

const session = await client.sessions.create();
const playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});

// Airtop does not currently support multiple contexts.
// Please be sure to use the default context.
const defaultContext = playwrightBrowser.contexts()[0];

// Navigate to a new page
const page = await defaultContext.newPage();
await page.goto('https://www.airtop.ai');

// Get the page content
const content = await page.content();
console.log(content);
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Connect to the cloud browser.
    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
        'authorization': f'Bearer YOUR_API_KEY'
    })

    # Airtop does not currently support multiple contexts.
    # Please be sure to use the default context.
    default_context = browser.contexts[0]
    page = default_context.new_page()
    page.goto("https://www.airtop.ai")

    # Get the page content
    content = page.content()
    print(content)

If you're not already familiar with Playwright, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#usage",
    "title": "Usage",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Once you have created a session with Airtop, you can use the Playwright library to control the browser by connecting Playwright to the CDP endpoint provided by Airtop. Please note that currently, Airtop only supports using the default browser context.
import { chromium } from 'playwright-core';

const session = await client.sessions.create();
const playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  },
});

// Airtop does not currently support multiple contexts.
// Please be sure to use the default context.
const defaultContext = playwrightBrowser.contexts()[0];

// Navigate to a new page
const page = await defaultContext.newPage();
await page.goto('https://www.airtop.ai');

// Get the page content
const content = await page.content();
console.log(content);
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Connect to the cloud browser.
    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
        'authorization': f'Bearer YOUR_API_KEY'
    })

    # Airtop does not currently support multiple contexts.
    # Please be sure to use the default context.
    default_context = browser.contexts[0]
    page = default_context.new_page()
    page.goto("https://www.airtop.ai")

    # Get the page content
    content = page.content()
    print(content)

If you're not already familiar with Playwright, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#usage",
    "title": "Usage",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "You can use Airtop's window management functions in combination with Playwright to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Playwright to push a few buttons on the page.
Once you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a targetId, which you'll use to connect Playwright to the window.
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", waitUntil: "load" });

// Get the target ID from the window response
const { targetId } = windowResponse.data;

// Connect to the session using Playwright
const playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  }
});

// Iterate through the pages to find the one that matches the target ID
const pages = playwrightBrowser.contexts()[0].pages();
let matchingPage;
for (const page of pages) {
  const cdpSession = await page.context().newCDPSession(page);
  const { targetInfo } = await cdpSession.send('Target.getTargetInfo');
  const pageTargetId = targetInfo.targetId;
  if (pageTargetId === targetId) {
    matchingPage = page;
    break;
  }
}

// Once the page is found you can use Playwright to interact with it
if (matchingPage) {
  await matchingPage.getByRole('button').click();
}
window_response = client.windows.create(session.data.id, url="https://www.airtop.ai", wait_until="load")

# Get the target ID from the window response
window_target_id = window_response.data.target_id

with sync_playwright() as p:
    # Connect to the session using Playwright.
    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
        'authorization': 'Bearer YOUR_API_KEY'
    })

    pages = browser.contexts[0].pages
    for page in pages:
        cdp_session = page.context.new_cdp_session(page)
        result = cdp_session.send('Target.getTargetInfo')
        if result['targetInfo']['targetId'] == window_target_id:
            matching_page = page
            break

    # Once the page is found you can use Playwright to interact with it
    if matching_page:
        matching_page.get_by_role('button').click()
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#combining-playwright-and-airtop-window-management",
    "title": "Combining Playwright and Airtop Window Management",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "You can use Airtop's window management functions in combination with Playwright to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Playwright to push a few buttons on the page.
Once you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a targetId, which you'll use to connect Playwright to the window.
const windowResponse = await client.windows.create(session.data.id, { url: "https://www.airtop.ai", waitUntil: "load" });

// Get the target ID from the window response
const { targetId } = windowResponse.data;

// Connect to the session using Playwright
const playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {
  headers: {
    authorization: `Bearer YOUR_API_KEY`,
  }
});

// Iterate through the pages to find the one that matches the target ID
const pages = playwrightBrowser.contexts()[0].pages();
let matchingPage;
for (const page of pages) {
  const cdpSession = await page.context().newCDPSession(page);
  const { targetInfo } = await cdpSession.send('Target.getTargetInfo');
  const pageTargetId = targetInfo.targetId;
  if (pageTargetId === targetId) {
    matchingPage = page;
    break;
  }
}

// Once the page is found you can use Playwright to interact with it
if (matchingPage) {
  await matchingPage.getByRole('button').click();
}
window_response = client.windows.create(session.data.id, url="https://www.airtop.ai", wait_until="load")

# Get the target ID from the window response
window_target_id = window_response.data.target_id

with sync_playwright() as p:
    # Connect to the session using Playwright.
    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={
        'authorization': 'Bearer YOUR_API_KEY'
    })

    pages = browser.contexts[0].pages
    for page in pages:
        cdp_session = page.context.new_cdp_session(page)
        result = cdp_session.send('Target.getTargetInfo')
        if result['targetInfo']['targetId'] == window_target_id:
            matching_page = page
            break

    # Once the page is found you can use Playwright to interact with it
    if matching_page:
        matching_page.get_by_role('button').click()
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#combining-playwright-and-airtop-window-management",
    "title": "Combining Playwright and Airtop Window Management",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "Here are some common errors you might encounter when using Playwright with Airtop when you initially connect to the CDP endpoint:
| Error Code | Common Cause                                                                                                                                                        |
| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 400    | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |
| 401    | Unauthorized. Check that you are using a valid API key.                                                                                                             |
| 404    | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct                                                     |
| 422    | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID?                                                        |
| 503    | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it.        |",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#common-errors",
    "title": "Common Errors",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Here are some common errors you might encounter when using Playwright with Airtop when you initially connect to the CDP endpoint:
| Error Code | Common Cause                                                                                                                                                        |
| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 400    | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |
| 401    | Unauthorized. Check that you are using a valid API key.                                                                                                             |
| 404    | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct                                                     |
| 422    | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID?                                                        |
| 503    | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it.        |",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/playwright#common-errors",
    "title": "Common Errors",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "How to use Selenium with Airtop

[Selenium](https://www.selenium.dev/) is a powerful automation framework for web browsers. Airtop provides a Selenium connector that allows you to use Selenium to automate your browser.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/selenium",
    "title": "Integrating with Selenium",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Selenium is a powerful automation framework for web browsers. Airtop provides a Selenium connector that allows you to use Selenium to automate your browser.
Installation
You will need to install the selenium-webdriver package to use Selenium with Airtop.
npm i selenium-webdriver
yarn add selenium-webdriver
pnpm add selenium-webdriver
pip install selenium

Usage
Once you have created a session with Airtop, you can use the Selenium library to control the browser by connecting Selenium to the ChromeDriver endpoint provided by Airtop.
import { Builder, until } from 'selenium-webdriver';
import * as https from 'https';
import chrome from 'selenium-webdriver/chrome';
import { AirtopClient } from "@airtop/sdk";

const client = new AirtopClient({ apiKey: "YOUR_API_KEY" });
const session = await client.sessions.create();

// Generate a custom HTTP agent to handle the authorization header
const customHttpAgent = new https.Agent({});
(customHttpAgent as any).addRequest = (req: any, options: any) => {
  req.setHeader('Authorization', 'Bearer YOUR_API_KEY');
  (https.Agent.prototype as any).addRequest.call(customHttpAgent, req, options);
};

// Create a new Chrome driver instance
const driver = await new Builder()
  .forBrowser('chrome')
  .usingHttpAgent(customHttpAgent)
  .usingServer(session.data.chromedriverUrl)
  .build();

// Open a new tab and navigate to the target URL
await driver.switchTo().newWindow('tab');
await driver.get("https://www.airtop.ai");
await driver.wait(until.titleContains('Airtop'), 10000);

// Get the page content
const content = await driver.getPageSource();
console.log(content);
from airtop import Airtop
from selenium import webdriver
from selenium.webdriver.chrome.remote_connection import ChromeRemoteConnection

def create_airtop_selenium_connection(airtop_api_key, airtop_session_data, *args, **kwargs):
    class AirtopRemoteConnection(ChromeRemoteConnection):
        @classmethod
        def get_remote_connection_headers(cls, *args, **kwargs):
            headers = super().get_remote_connection_headers(*args, **kwargs)
            headers['Authorization'] = f'Bearer {airtop_api_key}'
            return headers

    return AirtopRemoteConnection(remote_server_addr=airtop_session_data.chromedriver_url, *args, **kwargs)

# Initialize Airtop client
client = Airtop(api_key=api_key)
session = client.sessions.create()

# Connect to the Airtop cloud browser with Selenium and navigate to a page.
try:
  browser = webdriver.Remote(
    command_executor=create_airtop_selenium_connection(api_key, session.data),
    options=webdriver.ChromeOptions(),
  )
  browser.get("https://en.wikipedia.org/wiki/Rocket")

  # Get the window info and scrape the page content
  window_info = client.windows.get_window_info_for_selenium_driver(
    session.data,
    browser,
  )
  print(f"Live view url: {window_info.data.live_view_url}")
  scrape = client.windows.scrape_content(session_id=session.data.id, window_id=window_info.data.window_id, time_threshold_seconds=60)
  print(scrape.data.model_response.scraped_content)

  browser.quit()
finally:
  # Terminate the Airtop session.
  client.sessions.terminate(session.data.id)

If you're not already familiar with Selenium, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/selenium",
    "title": "Integrating with Selenium",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "You will need to install the selenium-webdriver package to use Selenium with Airtop.
npm i selenium-webdriver
yarn add selenium-webdriver
pnpm add selenium-webdriver
pip install selenium
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/selenium#installation",
    "title": "Installation",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "You will need to install the selenium-webdriver package to use Selenium with Airtop.
npm i selenium-webdriver
yarn add selenium-webdriver
pnpm add selenium-webdriver
pip install selenium
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/selenium#installation",
    "title": "Installation",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/automation-frameworks/puppeteer",
        "title": "Automation Frameworks",
      },
    ],
    "description": "Once you have created a session with Airtop, you can use the Selenium library to control the browser by connecting Selenium to the ChromeDriver endpoint provided by Airtop.
import { Builder, until } from 'selenium-webdriver';
import * as https from 'https';
import chrome from 'selenium-webdriver/chrome';
import { AirtopClient } from "@airtop/sdk";

const client = new AirtopClient({ apiKey: "YOUR_API_KEY" });
const session = await client.sessions.create();

// Generate a custom HTTP agent to handle the authorization header
const customHttpAgent = new https.Agent({});
(customHttpAgent as any).addRequest = (req: any, options: any) => {
  req.setHeader('Authorization', 'Bearer YOUR_API_KEY');
  (https.Agent.prototype as any).addRequest.call(customHttpAgent, req, options);
};

// Create a new Chrome driver instance
const driver = await new Builder()
  .forBrowser('chrome')
  .usingHttpAgent(customHttpAgent)
  .usingServer(session.data.chromedriverUrl)
  .build();

// Open a new tab and navigate to the target URL
await driver.switchTo().newWindow('tab');
await driver.get("https://www.airtop.ai");
await driver.wait(until.titleContains('Airtop'), 10000);

// Get the page content
const content = await driver.getPageSource();
console.log(content);
from airtop import Airtop
from selenium import webdriver
from selenium.webdriver.chrome.remote_connection import ChromeRemoteConnection

def create_airtop_selenium_connection(airtop_api_key, airtop_session_data, *args, **kwargs):
    class AirtopRemoteConnection(ChromeRemoteConnection):
        @classmethod
        def get_remote_connection_headers(cls, *args, **kwargs):
            headers = super().get_remote_connection_headers(*args, **kwargs)
            headers['Authorization'] = f'Bearer {airtop_api_key}'
            return headers

    return AirtopRemoteConnection(remote_server_addr=airtop_session_data.chromedriver_url, *args, **kwargs)

# Initialize Airtop client
client = Airtop(api_key=api_key)
session = client.sessions.create()

# Connect to the Airtop cloud browser with Selenium and navigate to a page.
try:
  browser = webdriver.Remote(
    command_executor=create_airtop_selenium_connection(api_key, session.data),
    options=webdriver.ChromeOptions(),
  )
  browser.get("https://en.wikipedia.org/wiki/Rocket")

  # Get the window info and scrape the page content
  window_info = client.windows.get_window_info_for_selenium_driver(
    session.data,
    browser,
  )
  print(f"Live view url: {window_info.data.live_view_url}")
  scrape = client.windows.scrape_content(session_id=session.data.id, window_id=window_info.data.window_id, time_threshold_seconds=60)
  print(scrape.data.model_response.scraped_content)

  browser.quit()
finally:
  # Terminate the Airtop session.
  client.sessions.terminate(session.data.id)

If you're not already familiar with Selenium, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/selenium#usage",
    "title": "Usage",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "Automation Frameworks",
    ],
    "content": "Once you have created a session with Airtop, you can use the Selenium library to control the browser by connecting Selenium to the ChromeDriver endpoint provided by Airtop.
import { Builder, until } from 'selenium-webdriver';
import * as https from 'https';
import chrome from 'selenium-webdriver/chrome';
import { AirtopClient } from "@airtop/sdk";

const client = new AirtopClient({ apiKey: "YOUR_API_KEY" });
const session = await client.sessions.create();

// Generate a custom HTTP agent to handle the authorization header
const customHttpAgent = new https.Agent({});
(customHttpAgent as any).addRequest = (req: any, options: any) => {
  req.setHeader('Authorization', 'Bearer YOUR_API_KEY');
  (https.Agent.prototype as any).addRequest.call(customHttpAgent, req, options);
};

// Create a new Chrome driver instance
const driver = await new Builder()
  .forBrowser('chrome')
  .usingHttpAgent(customHttpAgent)
  .usingServer(session.data.chromedriverUrl)
  .build();

// Open a new tab and navigate to the target URL
await driver.switchTo().newWindow('tab');
await driver.get("https://www.airtop.ai");
await driver.wait(until.titleContains('Airtop'), 10000);

// Get the page content
const content = await driver.getPageSource();
console.log(content);
from airtop import Airtop
from selenium import webdriver
from selenium.webdriver.chrome.remote_connection import ChromeRemoteConnection

def create_airtop_selenium_connection(airtop_api_key, airtop_session_data, *args, **kwargs):
    class AirtopRemoteConnection(ChromeRemoteConnection):
        @classmethod
        def get_remote_connection_headers(cls, *args, **kwargs):
            headers = super().get_remote_connection_headers(*args, **kwargs)
            headers['Authorization'] = f'Bearer {airtop_api_key}'
            return headers

    return AirtopRemoteConnection(remote_server_addr=airtop_session_data.chromedriver_url, *args, **kwargs)

# Initialize Airtop client
client = Airtop(api_key=api_key)
session = client.sessions.create()

# Connect to the Airtop cloud browser with Selenium and navigate to a page.
try:
  browser = webdriver.Remote(
    command_executor=create_airtop_selenium_connection(api_key, session.data),
    options=webdriver.ChromeOptions(),
  )
  browser.get("https://en.wikipedia.org/wiki/Rocket")

  # Get the window info and scrape the page content
  window_info = client.windows.get_window_info_for_selenium_driver(
    session.data,
    browser,
  )
  print(f"Live view url: {window_info.data.live_view_url}")
  scrape = client.windows.scrape_content(session_id=session.data.id, window_id=window_info.data.window_id, time_threshold_seconds=60)
  print(scrape.data.model_response.scraped_content)

  browser.quit()
finally:
  # Terminate the Airtop session.
  client.sessions.terminate(session.data.id)

If you're not already familiar with Selenium, you might want to check out their documentation to learn more about the library and its capabilities.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/automation-frameworks/selenium#usage",
    "title": "Usage",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "Enhance your scraping with AI

You can use the `scrapeContent` method to intelligently scrape the content of a page. This method extracts the content of the page and formats it as markdown, which is easy to read and ingest into your application. It will extract headers, formatting, tables, and more and present them in a structured manner.

Additionally, this method will correctly scrape content from Office365 and Google Workspace documents. These applications are notoriously difficult to scrape due to their use virtualized DOMs and require more sophisticated methods. Not only will Airtop correctly parse text content, but also table content from Microsoft Excel and Google Sheets and present it in CSV format.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/smart-scraping",
    "title": "Smart Scraping",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "You can use the scrapeContent method to intelligently scrape the content of a page. This method extracts the content of the page and formats it as markdown, which is easy to read and ingest into your application. It will extract headers, formatting, tables, and more and present them in a structured manner.
Additionally, this method will correctly scrape content from Office365 and Google Workspace documents. These applications are notoriously difficult to scrape due to their use virtualized DOMs and require more sophisticated methods. Not only will Airtop correctly parse text content, but also table content from Microsoft Excel and Google Sheets and present it in CSV format.
Usage example
First, you'll need to create a session.
const session = await client.sessions.create();
session = client.sessions.create()

Next, you'll need to create a window and load a URL.
const window = await client.windows.create(session.data.id, { url: "https://en.wikipedia.org/wiki/Margrit_Waltz" });
window = client.windows.create(session.data.id, url="https://en.wikipedia.org/wiki/Margrit_Waltz")

Finally, you can request a scrape of the page.
const content = await client.windows.scrapeContent(session.data.id, window.data.windowId);
content = client.windows.scrape_content(session_id=session.data.id, window_id=window.data.window_id, time_threshold_seconds=60)

If you inspect content.data.modelResponse.scrapedContent.text, you'll see the result of the scrape. Additionally, content.data.modelResponse.scrapedContent.contentType will be the MIME type of the content, which you can use to determine how to parse the content. It is typically text/plain, but could also be text/csv if the page is a Google Sheet document.
Result Comparison
Here is a a quick snippet comparison first ~20 lines of a raw text scrape vs a smart scrape for this wikipedia page.
Jump to content

Main menu

    Main menu
    move to sidebar
    hide





            Navigation





                    Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us









            Contribute





                    HelpLearn to editCommunity portalRecent changesUpload file

Search

                            Search
























                    Donate

Appearance

    Appearance
    move to sidebar
    hide

TextSmallStandardLargeThis page always uses small font sizeWidthStandardWideThe content is as wide as possible for your browser window.Color (beta)AutomaticLightDarkThis page is always in light mode.

# Margrit Waltz

From Wikipedia, the free encyclopedia

| Margrit Waltz       |                             |
| ------------------- | --------------------------- |
| **Aviation career** |                             |
| Full name           | Margrit Budert Waltz        |
| First flight        | Cessna-150                  |
| Famous flights      | Transatlantic ferry flights |
| Flight license      | 1975                        |

[![](https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Daher_TBM_960_%2810-20-2022%29.jpg/220px-Daher_TBM_960_%2810-20-2022%29.jpg)](https://en.wikipedia.org/wiki/File:Daher_TBM_960_%2810-20-2022%29.jpg)

A TBM 960 aircraft, similar to the one flown by Waltz on her 960th ferry flight

**Margrit Waltz** ([née](https://en.wikipedia.org/wiki/Birth_name#Maiden_and_married_names 'Birth name') **Budert**; born February 10, 1957)<sup>[\[1\]](#cite_note-1)</sup> is a [ferry pilot](https://en.wikipedia.org/wiki/Ferry_pilot 'Ferry pilot'). As of April 2024, she had completed 960 ferry flights. The 960th flight was performed in a [Daher TBM 960](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') single-engine [turboprop](https://en.wikipedia.org/wiki/Turboprop 'Turboprop'), taking 15 hours and 38 minutes of flight time to deliver the plane from [Tarbes, France](https://en.wikipedia.org/wiki/Tarbes 'Tarbes') to [Pompano Beach, Florida](https://en.wikipedia.org/wiki/Pompano_Beach,_Florida 'Pompano Beach, Florida'). Stops were made in [Wick](https://en.wikipedia.org/wiki/Wick,_Caithness 'Wick, Caithness'), Scotland; [Keflavík](https://en.wikipedia.org/wiki/Keflav%C3%ADk 'Keflavík'), Iceland; and [Goose Bay](https://en.wikipedia.org/wiki/Happy_Valley-Goose_Bay 'Happy Valley-Goose Bay'), Canada.<sup>[\[2\]](#cite_note-2)</sup>

According to a [Daher-Socata](https://en.wikipedia.org/wiki/SOCATA 'SOCATA') press release, Waltz is "one of the world's most experienced ferry pilots".<sup>[\[3\]](#cite_note-:0-3)</sup> She has been delivering planes for Daher for 33 years, and has delivered over 300 Daher [TBM](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') aircraft from their manufacturing plant in [Tarbes](https://en.wikipedia.org/wiki/Tarbes 'Tarbes'), France, to customers in North America.<sup>[\[3\]](#cite_note-:0-3)</sup> She has also made deliveries to Africa, Asia, and Australia.<sup>[\[3\]](#cite_note-:0-3)</sup>


Here's another example of a smart scrape for a google doc.
<div class="docs-butterbar-container"><div class="docs-butterbar-wrap"><div class="jfk-butterBar jfk-butterBar-shown jfk-butterBar-warning">JavaScript isn't enabled in your browser, so this file can't be opened. Enable and reload.</div></div><br /></div>(function() {function setIframeSrcdoc(iframe) {var coreJsIframePolicy; var contentsString = "\x3clink rel\x3d\x22stylesheet\x22 href\x3d\x22https://fonts.googleapis.com/css?family\x3dGoogle+Sans:bold,normal\x26lang\x3den\x22 nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e\x3clink rel\x3d\x22stylesheet\x22 href\x3d\x22https://fonts.googleapis.com/css?family\x3dRoboto:normal\x26lang\x3den\x22 nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e\x3cstyle nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e:root \x7b--brand-color: #1a73e8\x7dli:nth-child(1) h4:before \x7bcontent: \x22Step 1\x22;\x7dli:nth-child(2) h4:before \x7bcontent: \x22Step 2\x22;\x7d\x3c/style\x3e\x3cstyle\x3ebutton.text-button.brand-color\x7bbackground-color:var(--brand-color);color:#fff;border:none\x7dbody\x7bfont-family:Roboto;font-size:14px;font-weight:400;margin:0;padding:24px;overflow-x:hidden\x7dh3,h4,li,ol,p\x7bmargin:0;padding:0\x7dh3\x7bfont-family:Google Sans;font-size:22px;font-weight:400;margin:0;padding:0\x7dli\x7bmargin-top:16px\x7dp\x7bmargin-top:5px\x7dli h4:before\x7bfont-weight:700\x7dp#chrome-url-box\x7bborder:1px solid #bdc1c6;-moz-box-sizing:border-box;box-sizing:border-box;border-radius:4px;padding:6px;height:36px\x7dbutton#chrome-settings-url-copy\x7bcolor:var(--brand-color);text-decoration:none;display:inline-block;border:none;padding:0;float:right;background:none;height:24px\x7dp#chrome-url-box code\x7bfont-family:inherit;display:block;float:left;height:24px;vertical-align:middle\x7dp#buttons-row\x7btext-align:right\x7dp#buttons-row button\x7bmargin-left:16px\x7dbutton.text-button\x7bfont-family:Google Sans;font-size:14px;text-decoration:none;display:inline-block;border-radius:4px;border:1px solid transparent;height:36px;padding-left:24px;padding-right:24px;cursor:pointer\x7dbutton.text-button:disabled\x7bborder-width:1px;border-color:#bdc1c6;border-style:solid;background-color:#fff;color:gray\x7d.sr-only\x7bposition:absolute;width:1px;height:1px;margin:-1px;clip:rect(0,0,0,0)\x7dbutton#chrome-settings-url-copy svg path\x7bfill:var(--brand-color)\x7dol\x7blist-style:none;padding-left:0\x7d\n/*# sourceMappingURL\x3dcorejserror_ltr.css.map */\x3c/style\x3e\x3cbody role\x3d\x22dialog\x22 aria-labelledby\x3d\x22heading\x22 aria-describedby\x3d\x22description\x22\x3e\x3ch3 id\x3d\x22heading\x22\x3eLoading issue\x3c/h3\x3e\x3cp id\x3d\x22description\x22\x3eTroubleshoot this issue by clearing application resources\x3c/p\x3e\x3col\x3e\x3cli\x3e\x3ch4 class\x3d\x22step-header\x22\x3e\x3c/h4\x3e\x3cp\x3eFollow \x3ca href\x3d\x22https://support.google.com/accounts/answer/32050\x22 target\x3d\x22_blank\x22\x3ethese instructions\x3c/a\x3e to clear your cache and cookies\x3c/p\x3e\x3c/li\x3e\x3cli\x3e\x3ch4 class\x3d\x22step-header\x22\x3e\x3c/h4\x3e\x3cp\x3eThen, reload this page\x3c/p\x3e\x3c/li\x3e\x3c/ol\x3e\x3cp id\x3d\x22buttons-row\x22\x3e\x3cbutton class\x3d\x22text-button\x22 id\x3d\x22send-feedback\x22 disabled\x3eSend feedback\x3c/button\x3e\x3cbutton class\x3d\x22text-button brand-color\x22 id\x3d\x22reload-now\x22\x3eReload now\x3c/button\x3e\x3c/p\x3e\x3cscript nonce\x3d\x22uBfdd5ElM-eQ4cCUZ50mBw\x22\x3efunction _F_toggles_initialize(a)\x7b(typeof globalThis!\x3d\x3d\x22undefined\x22?globalThis:typeof self!\x3d\x3d\x22undefined\x22?self:this)._F_toggles\x3da||\x5b\x5d\x7d_F_toggles_initialize(\x5b\x5d);\nvar d\x3ddocument.getElementById(\x22chrome-settings-url-copy\x22);function e()\x7bvar a\x3ddocument.getElementById(\x22chrome-settings-url\x22),b\x3dnew Range;b.setStart(a,0);b.setEnd(a,1);a\x3dwindow.getSelection();a.empty();a.addRange(b);document.execCommand(\x22copy\x22);setTimeout(function()\x7bvar c\x3ddocument.createElement(\x22p\x22);c.setAttribute(\x22role\x22,\x22alert\x22);c.style.position\x3d\x22absolute\x22;c.style.top\x3d\x22-10000px\x22;c.appendChild(document.createTextNode(\x22Link copied\x22));document.body.appendChild(c)\x7d,500);d\x26\x26d.focus()\x7dd\x26\x26(d.onclick\x3de);\ndocument.getElementById(\x22reload-now\x22).onclick\x3dfunction()\x7bwindow.parent.location.reload()\x7d;document.addEventListener(\x22keydown\x22,function(a)\x7bvar b\x3ddocument.querySelectorAll(\x22a\x5bhref\x5d:not(\x5bdisabled\x5d), button:not(\x5bdisabled\x5d)\x22),c\x3db\x5b0\x5d;b\x3db\x5bb.length-1\x5d;if(a.key\x3d\x3d\x3d\x22Tab\x22||a.keyCode\x3d\x3d\x3d9)a.shiftKey\x26\x26document.activeElement\x3d\x3dc?(b.focus(),a.preventDefault()):a.shiftKey||document.activeElement!\x3db||(c.focus(),a.preventDefault())\x7d);\nwindow.onload\x3dfunction()\x7bvar a\x3dwindow.parent.document.getElementById(\x22core-js-error-dialog\x22);if(a)\x7bvar b\x3ddocument.body.scrollHeight;a.style.height\x3db+\x22px\x22;a.style\x5b\x22margin-top\x22\x5d\x3d-Math.round(b/2)+\x22px\x22\x7d\x7d;\n// Google Inc.\n\n//# sourceMappingURL\x3dcorejserror_corejserror_chunk.sourcemap\n\x3c/script\x3e\x3cscript src\x3d\x22/static/document/client/js/898020166-corejserrorfeedback_corejserrorfeedback_chunk.js\x22 nonce\x3d\x22uBfdd5ElM-eQ4cCUZ50mBw\x22\x3e\x3c/script\x3e\x3c/body\x3e"; if (self.trustedTypes && self.trustedTypes.createPolicy) {coreJsIframePolicy = trustedTypes.createPolicy( 'docsCoreJsIframePolicy',{createHTML: function(ignored) {return contentsString;}});}var contentsTt = coreJsIframePolicy ? coreJsIframePolicy.createHTML('ignored') : contentsString; if ('srcdoc' in iframe) {iframe.srcdoc = contentsTt; return;}iframe.contentWindow.document.open(); iframe.contentWindow.document.write(contentsTt); iframe.contentWindow.document.close(); if ( true  && window.navigator && window.navigator.sendBeacon) {window.navigator.sendBeacon( '/document/jserror?jobset\x3dprod\x26error\x3dJS+binary+load+failure&context.coreJsNoSrcdoc=true&context.serviceWorkerControlled=' + !!(navigator.serviceWorker && navigator.serviceWorker.controller) + '\x26context.actionName\x3dEdit');}}function enterCoreJsErrorDialog() {if (!setIframeSrcdoc) {return;}var overlay = document.getElementById('core-js-error-dialog-overlay');var overlayPolicy; if (self.trustedTypes && self.trustedTypes.createPolicy) {overlayPolicy = trustedTypes.createPolicy( 'docsCoreJsOverlayPolicy',{createHTML: function(ignored) {return "\x3cdiv style\x3d\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\x22\x3e\x3c/div\x3e\x3ciframe id\x3d\x22core-js-error-dialog\x22 style\x3d\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\x22\x3e\x3c/iframe\x3e";}});}var overlayTt = overlayPolicy ? overlayPolicy.createHTML('ignored') : "\x3cdiv style\x3d\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\x22\x3e\x3c/div\x3e\x3ciframe id\x3d\x22core-js-error-dialog\x22 style\x3d\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\x22\x3e\x3c/iframe\x3e"; overlay.innerHTML = overlayTt; var iframe = document.getElementById('core-js-error-dialog'); overlay.onmousedown = function(e) {iframe.focus(); e.preventDefault();}; setIframeSrcdoc(iframe); setIframeSrcdoc = null; overlay.style.display = 'block'; iframe.focus();}window.enterCoreJsErrorDialog = enterCoreJsErrorDialog;})();Explore the Random Cats        Request edit access Sign inDOCS_timing['sdb']=new Date().getTime();FileEditViewToolsHelpAccessibilityDebugDOCS_timing['edb']=new Date().getTime();DOCS_timing['che'] = new Date().getTime();DOCS_timing['chv'] = new Date().getTime();KX_resize = function() {if (KX_kixApp) {KX_kixApp.resize();}}; Gemini created these notes. They can contain errors so should be double-checked. How Gemini takes notes  OutlineOutlineDocument tabs    Headings you add to the document will appear here. Changes bythis.gbar_=this.gbar_||{};(function(_){var window=this;
try{
_.Pd=function(a,b,c){if(!a.j)if(c instanceof Array)for(var d of c)_.Pd(a,b,d);else{d=(0,_.z)(a.C,a,b);const e=a.v+c;a.v++;b.dataset.eqid=e;a.B[e]=d;b&&b.addEventListener?b.addEventListener(c,d,!1):b&&b.attachEvent?b.attachEvent("on"+c,d):a.o.log(Error("B`"+b))}};
}catch(e){_._DumpException(e)}
try{
var Qd=document.querySelector(".gb_I .gb_A"),Rd=document.querySelector("#gb.gb_Sc");Qd&&!Rd&&_.Pd(_.zd,Qd,"click");
}catch(e){_._DumpException(e)}
try{
The entire document is too large to fit in the snippet, but you get the point. You'll actually not find any of the content in the raw scrape since the content is never present in the DOM.Challenge: Explore the Random Growth Mindset Cats

I started making growth mindset cats a couple of years ago, and now there are hundreds of them. For this assignment, you will browse the cats at random and pick out two or three favorites, writing up a blog post about them.

Random Cats:

- You can see cats at random at the Growth Mindset blog; each time you reload the page, there will be a random cat.
- When you see a cat that you like, click on the "more info" link to go to the blog post with more information.
- To grab a copy of the image to use in your blog post, right-mouse click on the image and save it to your computer (or drag-and-drop), and make sure you link to that blog post in the Image Information.
- Hint: As you find a cat you want to use, you might leave that open in its own tab, and then open another tab to look for the next cat; that way, you will have the cats you need each in their own tab for when you write up your blog post.

Your blog post. Find two or three cats that you like, and include those images in a blog post. For each image, explain why you picked this cat in particular. Don't forget to link to the specific blog post for that cat as part of the Image Information.

will.jpg

(Source: Curiosity: The will to explore.)
With Smart Scraping, you actually get the content from the page, without any of the noise.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/smart-scraping",
    "title": "Smart Scraping",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "First, you'll need to create a session.
const session = await client.sessions.create();
session = client.sessions.create()

Next, you'll need to create a window and load a URL.
const window = await client.windows.create(session.data.id, { url: "https://en.wikipedia.org/wiki/Margrit_Waltz" });
window = client.windows.create(session.data.id, url="https://en.wikipedia.org/wiki/Margrit_Waltz")

Finally, you can request a scrape of the page.
const content = await client.windows.scrapeContent(session.data.id, window.data.windowId);
content = client.windows.scrape_content(session_id=session.data.id, window_id=window.data.window_id, time_threshold_seconds=60)

If you inspect content.data.modelResponse.scrapedContent.text, you'll see the result of the scrape. Additionally, content.data.modelResponse.scrapedContent.contentType will be the MIME type of the content, which you can use to determine how to parse the content. It is typically text/plain, but could also be text/csv if the page is a Google Sheet document.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/smart-scraping#usage-example",
    "title": "Usage example",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "First, you'll need to create a session.
const session = await client.sessions.create();
session = client.sessions.create()

Next, you'll need to create a window and load a URL.
const window = await client.windows.create(session.data.id, { url: "https://en.wikipedia.org/wiki/Margrit_Waltz" });
window = client.windows.create(session.data.id, url="https://en.wikipedia.org/wiki/Margrit_Waltz")

Finally, you can request a scrape of the page.
const content = await client.windows.scrapeContent(session.data.id, window.data.windowId);
content = client.windows.scrape_content(session_id=session.data.id, window_id=window.data.window_id, time_threshold_seconds=60)

If you inspect content.data.modelResponse.scrapedContent.text, you'll see the result of the scrape. Additionally, content.data.modelResponse.scrapedContent.contentType will be the MIME type of the content, which you can use to determine how to parse the content. It is typically text/plain, but could also be text/csv if the page is a Google Sheet document.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/smart-scraping#usage-example",
    "title": "Usage example",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "Here is a a quick snippet comparison first ~20 lines of a raw text scrape vs a smart scrape for this wikipedia page.
Jump to content

Main menu

    Main menu
    move to sidebar
    hide





            Navigation





                    Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us









            Contribute





                    HelpLearn to editCommunity portalRecent changesUpload file

Search

                            Search
























                    Donate

Appearance

    Appearance
    move to sidebar
    hide

TextSmallStandardLargeThis page always uses small font sizeWidthStandardWideThe content is as wide as possible for your browser window.Color (beta)AutomaticLightDarkThis page is always in light mode.

# Margrit Waltz

From Wikipedia, the free encyclopedia

| Margrit Waltz       |                             |
| ------------------- | --------------------------- |
| **Aviation career** |                             |
| Full name           | Margrit Budert Waltz        |
| First flight        | Cessna-150                  |
| Famous flights      | Transatlantic ferry flights |
| Flight license      | 1975                        |

[![](https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Daher_TBM_960_%2810-20-2022%29.jpg/220px-Daher_TBM_960_%2810-20-2022%29.jpg)](https://en.wikipedia.org/wiki/File:Daher_TBM_960_%2810-20-2022%29.jpg)

A TBM 960 aircraft, similar to the one flown by Waltz on her 960th ferry flight

**Margrit Waltz** ([née](https://en.wikipedia.org/wiki/Birth_name#Maiden_and_married_names 'Birth name') **Budert**; born February 10, 1957)<sup>[\[1\]](#cite_note-1)</sup> is a [ferry pilot](https://en.wikipedia.org/wiki/Ferry_pilot 'Ferry pilot'). As of April 2024, she had completed 960 ferry flights. The 960th flight was performed in a [Daher TBM 960](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') single-engine [turboprop](https://en.wikipedia.org/wiki/Turboprop 'Turboprop'), taking 15 hours and 38 minutes of flight time to deliver the plane from [Tarbes, France](https://en.wikipedia.org/wiki/Tarbes 'Tarbes') to [Pompano Beach, Florida](https://en.wikipedia.org/wiki/Pompano_Beach,_Florida 'Pompano Beach, Florida'). Stops were made in [Wick](https://en.wikipedia.org/wiki/Wick,_Caithness 'Wick, Caithness'), Scotland; [Keflavík](https://en.wikipedia.org/wiki/Keflav%C3%ADk 'Keflavík'), Iceland; and [Goose Bay](https://en.wikipedia.org/wiki/Happy_Valley-Goose_Bay 'Happy Valley-Goose Bay'), Canada.<sup>[\[2\]](#cite_note-2)</sup>

According to a [Daher-Socata](https://en.wikipedia.org/wiki/SOCATA 'SOCATA') press release, Waltz is "one of the world's most experienced ferry pilots".<sup>[\[3\]](#cite_note-:0-3)</sup> She has been delivering planes for Daher for 33 years, and has delivered over 300 Daher [TBM](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') aircraft from their manufacturing plant in [Tarbes](https://en.wikipedia.org/wiki/Tarbes 'Tarbes'), France, to customers in North America.<sup>[\[3\]](#cite_note-:0-3)</sup> She has also made deliveries to Africa, Asia, and Australia.<sup>[\[3\]](#cite_note-:0-3)</sup>


Here's another example of a smart scrape for a google doc.
<div class="docs-butterbar-container"><div class="docs-butterbar-wrap"><div class="jfk-butterBar jfk-butterBar-shown jfk-butterBar-warning">JavaScript isn't enabled in your browser, so this file can't be opened. Enable and reload.</div></div><br /></div>(function() {function setIframeSrcdoc(iframe) {var coreJsIframePolicy; var contentsString = "\x3clink rel\x3d\x22stylesheet\x22 href\x3d\x22https://fonts.googleapis.com/css?family\x3dGoogle+Sans:bold,normal\x26lang\x3den\x22 nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e\x3clink rel\x3d\x22stylesheet\x22 href\x3d\x22https://fonts.googleapis.com/css?family\x3dRoboto:normal\x26lang\x3den\x22 nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e\x3cstyle nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e:root \x7b--brand-color: #1a73e8\x7dli:nth-child(1) h4:before \x7bcontent: \x22Step 1\x22;\x7dli:nth-child(2) h4:before \x7bcontent: \x22Step 2\x22;\x7d\x3c/style\x3e\x3cstyle\x3ebutton.text-button.brand-color\x7bbackground-color:var(--brand-color);color:#fff;border:none\x7dbody\x7bfont-family:Roboto;font-size:14px;font-weight:400;margin:0;padding:24px;overflow-x:hidden\x7dh3,h4,li,ol,p\x7bmargin:0;padding:0\x7dh3\x7bfont-family:Google Sans;font-size:22px;font-weight:400;margin:0;padding:0\x7dli\x7bmargin-top:16px\x7dp\x7bmargin-top:5px\x7dli h4:before\x7bfont-weight:700\x7dp#chrome-url-box\x7bborder:1px solid #bdc1c6;-moz-box-sizing:border-box;box-sizing:border-box;border-radius:4px;padding:6px;height:36px\x7dbutton#chrome-settings-url-copy\x7bcolor:var(--brand-color);text-decoration:none;display:inline-block;border:none;padding:0;float:right;background:none;height:24px\x7dp#chrome-url-box code\x7bfont-family:inherit;display:block;float:left;height:24px;vertical-align:middle\x7dp#buttons-row\x7btext-align:right\x7dp#buttons-row button\x7bmargin-left:16px\x7dbutton.text-button\x7bfont-family:Google Sans;font-size:14px;text-decoration:none;display:inline-block;border-radius:4px;border:1px solid transparent;height:36px;padding-left:24px;padding-right:24px;cursor:pointer\x7dbutton.text-button:disabled\x7bborder-width:1px;border-color:#bdc1c6;border-style:solid;background-color:#fff;color:gray\x7d.sr-only\x7bposition:absolute;width:1px;height:1px;margin:-1px;clip:rect(0,0,0,0)\x7dbutton#chrome-settings-url-copy svg path\x7bfill:var(--brand-color)\x7dol\x7blist-style:none;padding-left:0\x7d\n/*# sourceMappingURL\x3dcorejserror_ltr.css.map */\x3c/style\x3e\x3cbody role\x3d\x22dialog\x22 aria-labelledby\x3d\x22heading\x22 aria-describedby\x3d\x22description\x22\x3e\x3ch3 id\x3d\x22heading\x22\x3eLoading issue\x3c/h3\x3e\x3cp id\x3d\x22description\x22\x3eTroubleshoot this issue by clearing application resources\x3c/p\x3e\x3col\x3e\x3cli\x3e\x3ch4 class\x3d\x22step-header\x22\x3e\x3c/h4\x3e\x3cp\x3eFollow \x3ca href\x3d\x22https://support.google.com/accounts/answer/32050\x22 target\x3d\x22_blank\x22\x3ethese instructions\x3c/a\x3e to clear your cache and cookies\x3c/p\x3e\x3c/li\x3e\x3cli\x3e\x3ch4 class\x3d\x22step-header\x22\x3e\x3c/h4\x3e\x3cp\x3eThen, reload this page\x3c/p\x3e\x3c/li\x3e\x3c/ol\x3e\x3cp id\x3d\x22buttons-row\x22\x3e\x3cbutton class\x3d\x22text-button\x22 id\x3d\x22send-feedback\x22 disabled\x3eSend feedback\x3c/button\x3e\x3cbutton class\x3d\x22text-button brand-color\x22 id\x3d\x22reload-now\x22\x3eReload now\x3c/button\x3e\x3c/p\x3e\x3cscript nonce\x3d\x22uBfdd5ElM-eQ4cCUZ50mBw\x22\x3efunction _F_toggles_initialize(a)\x7b(typeof globalThis!\x3d\x3d\x22undefined\x22?globalThis:typeof self!\x3d\x3d\x22undefined\x22?self:this)._F_toggles\x3da||\x5b\x5d\x7d_F_toggles_initialize(\x5b\x5d);\nvar d\x3ddocument.getElementById(\x22chrome-settings-url-copy\x22);function e()\x7bvar a\x3ddocument.getElementById(\x22chrome-settings-url\x22),b\x3dnew Range;b.setStart(a,0);b.setEnd(a,1);a\x3dwindow.getSelection();a.empty();a.addRange(b);document.execCommand(\x22copy\x22);setTimeout(function()\x7bvar c\x3ddocument.createElement(\x22p\x22);c.setAttribute(\x22role\x22,\x22alert\x22);c.style.position\x3d\x22absolute\x22;c.style.top\x3d\x22-10000px\x22;c.appendChild(document.createTextNode(\x22Link copied\x22));document.body.appendChild(c)\x7d,500);d\x26\x26d.focus()\x7dd\x26\x26(d.onclick\x3de);\ndocument.getElementById(\x22reload-now\x22).onclick\x3dfunction()\x7bwindow.parent.location.reload()\x7d;document.addEventListener(\x22keydown\x22,function(a)\x7bvar b\x3ddocument.querySelectorAll(\x22a\x5bhref\x5d:not(\x5bdisabled\x5d), button:not(\x5bdisabled\x5d)\x22),c\x3db\x5b0\x5d;b\x3db\x5bb.length-1\x5d;if(a.key\x3d\x3d\x3d\x22Tab\x22||a.keyCode\x3d\x3d\x3d9)a.shiftKey\x26\x26document.activeElement\x3d\x3dc?(b.focus(),a.preventDefault()):a.shiftKey||document.activeElement!\x3db||(c.focus(),a.preventDefault())\x7d);\nwindow.onload\x3dfunction()\x7bvar a\x3dwindow.parent.document.getElementById(\x22core-js-error-dialog\x22);if(a)\x7bvar b\x3ddocument.body.scrollHeight;a.style.height\x3db+\x22px\x22;a.style\x5b\x22margin-top\x22\x5d\x3d-Math.round(b/2)+\x22px\x22\x7d\x7d;\n// Google Inc.\n\n//# sourceMappingURL\x3dcorejserror_corejserror_chunk.sourcemap\n\x3c/script\x3e\x3cscript src\x3d\x22/static/document/client/js/898020166-corejserrorfeedback_corejserrorfeedback_chunk.js\x22 nonce\x3d\x22uBfdd5ElM-eQ4cCUZ50mBw\x22\x3e\x3c/script\x3e\x3c/body\x3e"; if (self.trustedTypes && self.trustedTypes.createPolicy) {coreJsIframePolicy = trustedTypes.createPolicy( 'docsCoreJsIframePolicy',{createHTML: function(ignored) {return contentsString;}});}var contentsTt = coreJsIframePolicy ? coreJsIframePolicy.createHTML('ignored') : contentsString; if ('srcdoc' in iframe) {iframe.srcdoc = contentsTt; return;}iframe.contentWindow.document.open(); iframe.contentWindow.document.write(contentsTt); iframe.contentWindow.document.close(); if ( true  && window.navigator && window.navigator.sendBeacon) {window.navigator.sendBeacon( '/document/jserror?jobset\x3dprod\x26error\x3dJS+binary+load+failure&context.coreJsNoSrcdoc=true&context.serviceWorkerControlled=' + !!(navigator.serviceWorker && navigator.serviceWorker.controller) + '\x26context.actionName\x3dEdit');}}function enterCoreJsErrorDialog() {if (!setIframeSrcdoc) {return;}var overlay = document.getElementById('core-js-error-dialog-overlay');var overlayPolicy; if (self.trustedTypes && self.trustedTypes.createPolicy) {overlayPolicy = trustedTypes.createPolicy( 'docsCoreJsOverlayPolicy',{createHTML: function(ignored) {return "\x3cdiv style\x3d\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\x22\x3e\x3c/div\x3e\x3ciframe id\x3d\x22core-js-error-dialog\x22 style\x3d\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\x22\x3e\x3c/iframe\x3e";}});}var overlayTt = overlayPolicy ? overlayPolicy.createHTML('ignored') : "\x3cdiv style\x3d\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\x22\x3e\x3c/div\x3e\x3ciframe id\x3d\x22core-js-error-dialog\x22 style\x3d\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\x22\x3e\x3c/iframe\x3e"; overlay.innerHTML = overlayTt; var iframe = document.getElementById('core-js-error-dialog'); overlay.onmousedown = function(e) {iframe.focus(); e.preventDefault();}; setIframeSrcdoc(iframe); setIframeSrcdoc = null; overlay.style.display = 'block'; iframe.focus();}window.enterCoreJsErrorDialog = enterCoreJsErrorDialog;})();Explore the Random Cats        Request edit access Sign inDOCS_timing['sdb']=new Date().getTime();FileEditViewToolsHelpAccessibilityDebugDOCS_timing['edb']=new Date().getTime();DOCS_timing['che'] = new Date().getTime();DOCS_timing['chv'] = new Date().getTime();KX_resize = function() {if (KX_kixApp) {KX_kixApp.resize();}}; Gemini created these notes. They can contain errors so should be double-checked. How Gemini takes notes  OutlineOutlineDocument tabs    Headings you add to the document will appear here. Changes bythis.gbar_=this.gbar_||{};(function(_){var window=this;
try{
_.Pd=function(a,b,c){if(!a.j)if(c instanceof Array)for(var d of c)_.Pd(a,b,d);else{d=(0,_.z)(a.C,a,b);const e=a.v+c;a.v++;b.dataset.eqid=e;a.B[e]=d;b&&b.addEventListener?b.addEventListener(c,d,!1):b&&b.attachEvent?b.attachEvent("on"+c,d):a.o.log(Error("B`"+b))}};
}catch(e){_._DumpException(e)}
try{
var Qd=document.querySelector(".gb_I .gb_A"),Rd=document.querySelector("#gb.gb_Sc");Qd&&!Rd&&_.Pd(_.zd,Qd,"click");
}catch(e){_._DumpException(e)}
try{
The entire document is too large to fit in the snippet, but you get the point. You'll actually not find any of the content in the raw scrape since the content is never present in the DOM.Challenge: Explore the Random Growth Mindset Cats

I started making growth mindset cats a couple of years ago, and now there are hundreds of them. For this assignment, you will browse the cats at random and pick out two or three favorites, writing up a blog post about them.

Random Cats:

- You can see cats at random at the Growth Mindset blog; each time you reload the page, there will be a random cat.
- When you see a cat that you like, click on the "more info" link to go to the blog post with more information.
- To grab a copy of the image to use in your blog post, right-mouse click on the image and save it to your computer (or drag-and-drop), and make sure you link to that blog post in the Image Information.
- Hint: As you find a cat you want to use, you might leave that open in its own tab, and then open another tab to look for the next cat; that way, you will have the cats you need each in their own tab for when you write up your blog post.

Your blog post. Find two or three cats that you like, and include those images in a blog post. For each image, explain why you picked this cat in particular. Don't forget to link to the specific blog post for that cat as part of the Image Information.

will.jpg

(Source: Curiosity: The will to explore.)
With Smart Scraping, you actually get the content from the page, without any of the noise.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/smart-scraping#result-comparison",
    "title": "Result Comparison",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "Here is a a quick snippet comparison first ~20 lines of a raw text scrape vs a smart scrape for this wikipedia page.
Jump to content

Main menu

    Main menu
    move to sidebar
    hide





            Navigation





                    Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us









            Contribute





                    HelpLearn to editCommunity portalRecent changesUpload file

Search

                            Search
























                    Donate

Appearance

    Appearance
    move to sidebar
    hide

TextSmallStandardLargeThis page always uses small font sizeWidthStandardWideThe content is as wide as possible for your browser window.Color (beta)AutomaticLightDarkThis page is always in light mode.

# Margrit Waltz

From Wikipedia, the free encyclopedia

| Margrit Waltz       |                             |
| ------------------- | --------------------------- |
| **Aviation career** |                             |
| Full name           | Margrit Budert Waltz        |
| First flight        | Cessna-150                  |
| Famous flights      | Transatlantic ferry flights |
| Flight license      | 1975                        |

[![](https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Daher_TBM_960_%2810-20-2022%29.jpg/220px-Daher_TBM_960_%2810-20-2022%29.jpg)](https://en.wikipedia.org/wiki/File:Daher_TBM_960_%2810-20-2022%29.jpg)

A TBM 960 aircraft, similar to the one flown by Waltz on her 960th ferry flight

**Margrit Waltz** ([née](https://en.wikipedia.org/wiki/Birth_name#Maiden_and_married_names 'Birth name') **Budert**; born February 10, 1957)<sup>[\[1\]](#cite_note-1)</sup> is a [ferry pilot](https://en.wikipedia.org/wiki/Ferry_pilot 'Ferry pilot'). As of April 2024, she had completed 960 ferry flights. The 960th flight was performed in a [Daher TBM 960](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') single-engine [turboprop](https://en.wikipedia.org/wiki/Turboprop 'Turboprop'), taking 15 hours and 38 minutes of flight time to deliver the plane from [Tarbes, France](https://en.wikipedia.org/wiki/Tarbes 'Tarbes') to [Pompano Beach, Florida](https://en.wikipedia.org/wiki/Pompano_Beach,_Florida 'Pompano Beach, Florida'). Stops were made in [Wick](https://en.wikipedia.org/wiki/Wick,_Caithness 'Wick, Caithness'), Scotland; [Keflavík](https://en.wikipedia.org/wiki/Keflav%C3%ADk 'Keflavík'), Iceland; and [Goose Bay](https://en.wikipedia.org/wiki/Happy_Valley-Goose_Bay 'Happy Valley-Goose Bay'), Canada.<sup>[\[2\]](#cite_note-2)</sup>

According to a [Daher-Socata](https://en.wikipedia.org/wiki/SOCATA 'SOCATA') press release, Waltz is "one of the world's most experienced ferry pilots".<sup>[\[3\]](#cite_note-:0-3)</sup> She has been delivering planes for Daher for 33 years, and has delivered over 300 Daher [TBM](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') aircraft from their manufacturing plant in [Tarbes](https://en.wikipedia.org/wiki/Tarbes 'Tarbes'), France, to customers in North America.<sup>[\[3\]](#cite_note-:0-3)</sup> She has also made deliveries to Africa, Asia, and Australia.<sup>[\[3\]](#cite_note-:0-3)</sup>


Here's another example of a smart scrape for a google doc.
<div class="docs-butterbar-container"><div class="docs-butterbar-wrap"><div class="jfk-butterBar jfk-butterBar-shown jfk-butterBar-warning">JavaScript isn't enabled in your browser, so this file can't be opened. Enable and reload.</div></div><br /></div>(function() {function setIframeSrcdoc(iframe) {var coreJsIframePolicy; var contentsString = "\x3clink rel\x3d\x22stylesheet\x22 href\x3d\x22https://fonts.googleapis.com/css?family\x3dGoogle+Sans:bold,normal\x26lang\x3den\x22 nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e\x3clink rel\x3d\x22stylesheet\x22 href\x3d\x22https://fonts.googleapis.com/css?family\x3dRoboto:normal\x26lang\x3den\x22 nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e\x3cstyle nonce\x3d\x22L42FF1JdHJPKWYWFGRXMNA\x22\x3e:root \x7b--brand-color: #1a73e8\x7dli:nth-child(1) h4:before \x7bcontent: \x22Step 1\x22;\x7dli:nth-child(2) h4:before \x7bcontent: \x22Step 2\x22;\x7d\x3c/style\x3e\x3cstyle\x3ebutton.text-button.brand-color\x7bbackground-color:var(--brand-color);color:#fff;border:none\x7dbody\x7bfont-family:Roboto;font-size:14px;font-weight:400;margin:0;padding:24px;overflow-x:hidden\x7dh3,h4,li,ol,p\x7bmargin:0;padding:0\x7dh3\x7bfont-family:Google Sans;font-size:22px;font-weight:400;margin:0;padding:0\x7dli\x7bmargin-top:16px\x7dp\x7bmargin-top:5px\x7dli h4:before\x7bfont-weight:700\x7dp#chrome-url-box\x7bborder:1px solid #bdc1c6;-moz-box-sizing:border-box;box-sizing:border-box;border-radius:4px;padding:6px;height:36px\x7dbutton#chrome-settings-url-copy\x7bcolor:var(--brand-color);text-decoration:none;display:inline-block;border:none;padding:0;float:right;background:none;height:24px\x7dp#chrome-url-box code\x7bfont-family:inherit;display:block;float:left;height:24px;vertical-align:middle\x7dp#buttons-row\x7btext-align:right\x7dp#buttons-row button\x7bmargin-left:16px\x7dbutton.text-button\x7bfont-family:Google Sans;font-size:14px;text-decoration:none;display:inline-block;border-radius:4px;border:1px solid transparent;height:36px;padding-left:24px;padding-right:24px;cursor:pointer\x7dbutton.text-button:disabled\x7bborder-width:1px;border-color:#bdc1c6;border-style:solid;background-color:#fff;color:gray\x7d.sr-only\x7bposition:absolute;width:1px;height:1px;margin:-1px;clip:rect(0,0,0,0)\x7dbutton#chrome-settings-url-copy svg path\x7bfill:var(--brand-color)\x7dol\x7blist-style:none;padding-left:0\x7d\n/*# sourceMappingURL\x3dcorejserror_ltr.css.map */\x3c/style\x3e\x3cbody role\x3d\x22dialog\x22 aria-labelledby\x3d\x22heading\x22 aria-describedby\x3d\x22description\x22\x3e\x3ch3 id\x3d\x22heading\x22\x3eLoading issue\x3c/h3\x3e\x3cp id\x3d\x22description\x22\x3eTroubleshoot this issue by clearing application resources\x3c/p\x3e\x3col\x3e\x3cli\x3e\x3ch4 class\x3d\x22step-header\x22\x3e\x3c/h4\x3e\x3cp\x3eFollow \x3ca href\x3d\x22https://support.google.com/accounts/answer/32050\x22 target\x3d\x22_blank\x22\x3ethese instructions\x3c/a\x3e to clear your cache and cookies\x3c/p\x3e\x3c/li\x3e\x3cli\x3e\x3ch4 class\x3d\x22step-header\x22\x3e\x3c/h4\x3e\x3cp\x3eThen, reload this page\x3c/p\x3e\x3c/li\x3e\x3c/ol\x3e\x3cp id\x3d\x22buttons-row\x22\x3e\x3cbutton class\x3d\x22text-button\x22 id\x3d\x22send-feedback\x22 disabled\x3eSend feedback\x3c/button\x3e\x3cbutton class\x3d\x22text-button brand-color\x22 id\x3d\x22reload-now\x22\x3eReload now\x3c/button\x3e\x3c/p\x3e\x3cscript nonce\x3d\x22uBfdd5ElM-eQ4cCUZ50mBw\x22\x3efunction _F_toggles_initialize(a)\x7b(typeof globalThis!\x3d\x3d\x22undefined\x22?globalThis:typeof self!\x3d\x3d\x22undefined\x22?self:this)._F_toggles\x3da||\x5b\x5d\x7d_F_toggles_initialize(\x5b\x5d);\nvar d\x3ddocument.getElementById(\x22chrome-settings-url-copy\x22);function e()\x7bvar a\x3ddocument.getElementById(\x22chrome-settings-url\x22),b\x3dnew Range;b.setStart(a,0);b.setEnd(a,1);a\x3dwindow.getSelection();a.empty();a.addRange(b);document.execCommand(\x22copy\x22);setTimeout(function()\x7bvar c\x3ddocument.createElement(\x22p\x22);c.setAttribute(\x22role\x22,\x22alert\x22);c.style.position\x3d\x22absolute\x22;c.style.top\x3d\x22-10000px\x22;c.appendChild(document.createTextNode(\x22Link copied\x22));document.body.appendChild(c)\x7d,500);d\x26\x26d.focus()\x7dd\x26\x26(d.onclick\x3de);\ndocument.getElementById(\x22reload-now\x22).onclick\x3dfunction()\x7bwindow.parent.location.reload()\x7d;document.addEventListener(\x22keydown\x22,function(a)\x7bvar b\x3ddocument.querySelectorAll(\x22a\x5bhref\x5d:not(\x5bdisabled\x5d), button:not(\x5bdisabled\x5d)\x22),c\x3db\x5b0\x5d;b\x3db\x5bb.length-1\x5d;if(a.key\x3d\x3d\x3d\x22Tab\x22||a.keyCode\x3d\x3d\x3d9)a.shiftKey\x26\x26document.activeElement\x3d\x3dc?(b.focus(),a.preventDefault()):a.shiftKey||document.activeElement!\x3db||(c.focus(),a.preventDefault())\x7d);\nwindow.onload\x3dfunction()\x7bvar a\x3dwindow.parent.document.getElementById(\x22core-js-error-dialog\x22);if(a)\x7bvar b\x3ddocument.body.scrollHeight;a.style.height\x3db+\x22px\x22;a.style\x5b\x22margin-top\x22\x5d\x3d-Math.round(b/2)+\x22px\x22\x7d\x7d;\n// Google Inc.\n\n//# sourceMappingURL\x3dcorejserror_corejserror_chunk.sourcemap\n\x3c/script\x3e\x3cscript src\x3d\x22/static/document/client/js/898020166-corejserrorfeedback_corejserrorfeedback_chunk.js\x22 nonce\x3d\x22uBfdd5ElM-eQ4cCUZ50mBw\x22\x3e\x3c/script\x3e\x3c/body\x3e"; if (self.trustedTypes && self.trustedTypes.createPolicy) {coreJsIframePolicy = trustedTypes.createPolicy( 'docsCoreJsIframePolicy',{createHTML: function(ignored) {return contentsString;}});}var contentsTt = coreJsIframePolicy ? coreJsIframePolicy.createHTML('ignored') : contentsString; if ('srcdoc' in iframe) {iframe.srcdoc = contentsTt; return;}iframe.contentWindow.document.open(); iframe.contentWindow.document.write(contentsTt); iframe.contentWindow.document.close(); if ( true  && window.navigator && window.navigator.sendBeacon) {window.navigator.sendBeacon( '/document/jserror?jobset\x3dprod\x26error\x3dJS+binary+load+failure&context.coreJsNoSrcdoc=true&context.serviceWorkerControlled=' + !!(navigator.serviceWorker && navigator.serviceWorker.controller) + '\x26context.actionName\x3dEdit');}}function enterCoreJsErrorDialog() {if (!setIframeSrcdoc) {return;}var overlay = document.getElementById('core-js-error-dialog-overlay');var overlayPolicy; if (self.trustedTypes && self.trustedTypes.createPolicy) {overlayPolicy = trustedTypes.createPolicy( 'docsCoreJsOverlayPolicy',{createHTML: function(ignored) {return "\x3cdiv style\x3d\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\x22\x3e\x3c/div\x3e\x3ciframe id\x3d\x22core-js-error-dialog\x22 style\x3d\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\x22\x3e\x3c/iframe\x3e";}});}var overlayTt = overlayPolicy ? overlayPolicy.createHTML('ignored') : "\x3cdiv style\x3d\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\x22\x3e\x3c/div\x3e\x3ciframe id\x3d\x22core-js-error-dialog\x22 style\x3d\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\x22\x3e\x3c/iframe\x3e"; overlay.innerHTML = overlayTt; var iframe = document.getElementById('core-js-error-dialog'); overlay.onmousedown = function(e) {iframe.focus(); e.preventDefault();}; setIframeSrcdoc(iframe); setIframeSrcdoc = null; overlay.style.display = 'block'; iframe.focus();}window.enterCoreJsErrorDialog = enterCoreJsErrorDialog;})();Explore the Random Cats        Request edit access Sign inDOCS_timing['sdb']=new Date().getTime();FileEditViewToolsHelpAccessibilityDebugDOCS_timing['edb']=new Date().getTime();DOCS_timing['che'] = new Date().getTime();DOCS_timing['chv'] = new Date().getTime();KX_resize = function() {if (KX_kixApp) {KX_kixApp.resize();}}; Gemini created these notes. They can contain errors so should be double-checked. How Gemini takes notes  OutlineOutlineDocument tabs    Headings you add to the document will appear here. Changes bythis.gbar_=this.gbar_||{};(function(_){var window=this;
try{
_.Pd=function(a,b,c){if(!a.j)if(c instanceof Array)for(var d of c)_.Pd(a,b,d);else{d=(0,_.z)(a.C,a,b);const e=a.v+c;a.v++;b.dataset.eqid=e;a.B[e]=d;b&&b.addEventListener?b.addEventListener(c,d,!1):b&&b.attachEvent?b.attachEvent("on"+c,d):a.o.log(Error("B`"+b))}};
}catch(e){_._DumpException(e)}
try{
var Qd=document.querySelector(".gb_I .gb_A"),Rd=document.querySelector("#gb.gb_Sc");Qd&&!Rd&&_.Pd(_.zd,Qd,"click");
}catch(e){_._DumpException(e)}
try{
The entire document is too large to fit in the snippet, but you get the point. You'll actually not find any of the content in the raw scrape since the content is never present in the DOM.Challenge: Explore the Random Growth Mindset Cats

I started making growth mindset cats a couple of years ago, and now there are hundreds of them. For this assignment, you will browse the cats at random and pick out two or three favorites, writing up a blog post about them.

Random Cats:

- You can see cats at random at the Growth Mindset blog; each time you reload the page, there will be a random cat.
- When you see a cat that you like, click on the "more info" link to go to the blog post with more information.
- To grab a copy of the image to use in your blog post, right-mouse click on the image and save it to your computer (or drag-and-drop), and make sure you link to that blog post in the Image Information.
- Hint: As you find a cat you want to use, you might leave that open in its own tab, and then open another tab to look for the next cat; that way, you will have the cats you need each in their own tab for when you write up your blog post.

Your blog post. Find two or three cats that you like, and include those images in a blog post. For each image, explain why you picked this cat in particular. Don't forget to link to the specific blog post for that cat as part of the Image Information.

will.jpg

(Source: Curiosity: The will to explore.)
With Smart Scraping, you actually get the content from the page, without any of the noise.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/smart-scraping#result-comparison",
    "title": "Result Comparison",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "Interact with a page using LLMs

You can use the `promptContent` method to interact with a page using LLMs. You might want to use this method to scrape a page for specific information, or even ask a more general question about the page.

Examples:

- On a company's website, ask if they have a certain job opening.
- On a foreign news website, ask for a translation.
- On a product page, ask for list of product, but with the price in different currencies.
- etc.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page",
    "title": "Prompting a Page",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "You can use the promptContent method to interact with a page using LLMs. You might want to use this method to scrape a page for specific information, or even ask a more general question about the page.
Examples:

On a company's website, ask if they have a certain job opening.
On a foreign news website, ask for a translation.
On a product page, ask for list of product, but with the price in different currencies.
etc.

Usage example
First, you'll need to create a session.
const session = await client.sessions.create();
session = client.sessions.create()

Next, you'll need to create a window and load a URL.
const window = await client.windows.create(session.data.id, { url: "https://news.ycombinator.com/news" });
window = client.windows.create(session.data.id, url="https://news.ycombinator.com/news")

Finally, you can prompt the page.
const result = await client.windows.promptContent(session.data.id, window.data.windowId, {
  prompt:
    'Give me a list of all the titles of the articles on this page along with the number of comments each article has.',
});
const content = result.data.modelResponse;
result = client.windows.prompt_content(session.data.id, window.data.window_id, prompt='Give me a list of all the titles of the articles on this page along with the number of comments each article has.')
content = result.data.model_response

Example output:
1. California bans legacy admissions at private universities - 71 comments
2. Bop Spotter - 209 comments
3. Apple No Longer in Talks to Invest in ChatGPT Maker OpenAI - 7 comments
4. Paramotorists soar across remote Peru desert to collect threatened plants - 13 comments
5. Launch HN: Inkeep (YC W23) – Copilot for Support (think Cursor for help desks) - 39 comments
6. Phrase matching in Marginalia Search - 16 comments
7. Engineers investigate another malfunction on SpaceX's Falcon 9 rocket - 11 comments
8. Gavin Newsom vetoes SB 1047 - 414 comments
9. EasyPost (YC S13) Is Hiring - No comments listed
10. The Physics of Colliding Balls - 13 comments
11. Show HN: A macOS app to prevent sound quality degradation on AirPods - 78 comments
12. Product Hunt isn't dying, it's becoming gentrified - 16 comments
13. Two new books on John Calhoun and his rodent experiments - 41 comments
14. GnuCash 5.9 Released - 6 comments
15. The fight to save Chile's white strawberry - 10 comments
16. Keep Track: 3D Satellite Toolkit - 29 comments
17. Normans and Slavery: Breaking the Bonds - 51 comments
18. Screenpipe: 24/7 local AI screen and mic recording - 86 comments
19. Peer Calls: WebRTC peer to peer calls for everyone - 11 comments
20. How we built ngrok's data platform - 31 comments
21. The best browser bookmarking system is files - 66 comments
22. No such thing as exactly-once delivery - 2 comments
23. Tips for Building and Deploying Robots - 15 comments
24. Map with public fruit trees - 130 comments
25. NotebookLM's automatically generated podcasts are surprisingly effective - 389 comments
26. Generate pip requirements.txt file based on imports of any project - 55 comments
27. New research on anesthesia and microtubules gives new clues about consciousness - 139 comments
28. Liquid Foundation Models: Our First Series of Generative AI Models - 125 comments
29. Sitina1 Open-Source Camera - 116 comments
30. Do AI companies work? - 170 comments

Paginated Results
If you're scraping a paginated page, Airtop will automatically handle pagination for you. You just need to pass the followPaginationLinks: true option and specify the number of pages or results you want to scrape.
const result = await client.windows.promptContent(session.data.id, windowInfo.data.windowId, {
  prompt:
    'You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.',
  followPaginationLinks: true,
});
prompt = """
You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.
"""
result = client.windows.prompt_content(session.data.id, window_info.data.window_id, prompt=prompt, follow_pagination_links=True)

Example output:
1. **Article Number:** 2
   **Title:** Too much efficiency makes everything worse (2022)
   **Comments:** 204
   **User:** feyman_r

2. **Article Number:** 8
   **Title:** SpaceX launches mission for 2 NASA astronauts who are stuck on the ISS
   **Comments:** 250
   **User:** JumpCrisscross

3. **Article Number:** 23
   **Title:** The perils of transition to 64-bit time_t
   **Comments:** 177
   **User:** todsacerdoti

4. **Article Number:** 36
   **Title:** Floating megabomb heaves to near the English coast
   **Comments:** 176
   **User:** itronitron

5. **Article Number:** 51
   **Title:** Legalizing sports gambling was a mistake
   **Comments:** 1109
   **User:** jimbob45

6. **Article Number:** 52
   **Title:** Automatic Content Recognition Tracking in Smart TVs
   **Comments:** 133
   **User:** some_furry

7. **Article Number:** 53
   **Title:** Amusing Ourselves to Death (2014)
   **Comments:** 293
   **User:** yamrzou

8. **Article Number:** 68
   **Title:** Everything you need to know about Python 3.13 – JIT and GIL went up the hill
   **Comments:** 190
   **User:** chmaynard

9. **Article Number:** 84
   **Title:** Notion's mid-life crisis
   **Comments:** 130
   **User:** krishna2

10. **Article Number:** 91
    **Title:** I Am Tired of AI
    **Comments:** 1086
    **User:** Liriel

11. **Article Number:** 94
    **Title:** Hacking Kia: Remotely controlling cars with just a license plate
    **Comments:** 355
    **User:** speckx

12. **Article Number:** 95
    **Title:** If WordPress is to survive, Matt Mullenweg must be removed
    **Comments:** 224
    **User:** graeme

13. **Article Number:** 98
    **Title:** CNN and USA Today have fake websites, I believe Forbes Marketplace runs them
    **Comments:** 259
    **User:** greg_V

Prompting Tips
Like any LLM based tool, the quality of the results depends heavily on the quality of the prompt. Here are some tips to get the best results:
Basic Prompting Tips


Provide the AI with some context by telling it a little bit about the web page or content it's looking at.


Be clear about your goals and what you want the AI to do.


If, to complete the request, more content than is originally visible must be loaded (i.e. paginated results or infinite scrolling or "Load More" controls), be sure to include a clear limit on when the AI should stop. It can also be helpful to be explicit about how more content should be loaded.


Provide an example or two of how you would like the AI to respond, or include a JSON schema if you want a structured response that is more suitable for automated processing.


Tips for using JSON Schemas:


Take advantage of the description fields to give the AI additional clarity and instructions about how to populate the property, and consider even adding examples (especially if you would prefer certain formatting).


Don't mark a property as required unless you're certain it will always be possible to provide. If the AI feels compelled to provide data that doesn't exist, it's very likely to hallucinate it.


Be sure to include a valid way for the AI to report back failure if it cannot fulfill the objective. If your schema does not allow the AI to report failure and something happens, it may feel compelled to return a natural language response instead, or even hallucinate results in order to honor the schema and your request to use it for responses.


You can sometimes use schema constraints to guide the AI response. For example, if you find that it includes an empty string or array for an optional property when unavailable, and you'd rather see that property omitted instead, you can add a constraint of minLength: 1 (or minItems: 1 for an array). Of course, make sure those properties are not marked as required.


Most major LLMs are quite good at generating JSON schemas from examples (or even natural language descriptions) if you'd rather not write them by hand.


Example Prompt:
You are on the Hacker News website. Please scan the first 100 articles and provide a list of any articles that seem to be about nuclear reactors. You may need to page through the articles using the pagination controls at the bottom of the page to get through the 100 articles. Report your results using the JSON schema below. If you cannot fulfill the request, use the "error" field in the schema to report the problem.

Response schema:
```json
  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "results": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Article title"
            },
            "score": {
              "type": "number",
              "description": "Number of points the article has received"
            },
            "author": {
              "type": "string",
              "description": "Author of the post"
            }
          },
          "required": ["title", "score", "author"],
          "additionalProperties": false
        }
      },
      "error": {
        "type": "string",
        "description": "Error message in case of failure",
        "minLength": 1
      },
    },
  }

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page",
    "title": "Prompting a Page",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "First, you'll need to create a session.
const session = await client.sessions.create();
session = client.sessions.create()

Next, you'll need to create a window and load a URL.
const window = await client.windows.create(session.data.id, { url: "https://news.ycombinator.com/news" });
window = client.windows.create(session.data.id, url="https://news.ycombinator.com/news")

Finally, you can prompt the page.
const result = await client.windows.promptContent(session.data.id, window.data.windowId, {
  prompt:
    'Give me a list of all the titles of the articles on this page along with the number of comments each article has.',
});
const content = result.data.modelResponse;
result = client.windows.prompt_content(session.data.id, window.data.window_id, prompt='Give me a list of all the titles of the articles on this page along with the number of comments each article has.')
content = result.data.model_response

Example output:
1. California bans legacy admissions at private universities - 71 comments
2. Bop Spotter - 209 comments
3. Apple No Longer in Talks to Invest in ChatGPT Maker OpenAI - 7 comments
4. Paramotorists soar across remote Peru desert to collect threatened plants - 13 comments
5. Launch HN: Inkeep (YC W23) – Copilot for Support (think Cursor for help desks) - 39 comments
6. Phrase matching in Marginalia Search - 16 comments
7. Engineers investigate another malfunction on SpaceX's Falcon 9 rocket - 11 comments
8. Gavin Newsom vetoes SB 1047 - 414 comments
9. EasyPost (YC S13) Is Hiring - No comments listed
10. The Physics of Colliding Balls - 13 comments
11. Show HN: A macOS app to prevent sound quality degradation on AirPods - 78 comments
12. Product Hunt isn't dying, it's becoming gentrified - 16 comments
13. Two new books on John Calhoun and his rodent experiments - 41 comments
14. GnuCash 5.9 Released - 6 comments
15. The fight to save Chile's white strawberry - 10 comments
16. Keep Track: 3D Satellite Toolkit - 29 comments
17. Normans and Slavery: Breaking the Bonds - 51 comments
18. Screenpipe: 24/7 local AI screen and mic recording - 86 comments
19. Peer Calls: WebRTC peer to peer calls for everyone - 11 comments
20. How we built ngrok's data platform - 31 comments
21. The best browser bookmarking system is files - 66 comments
22. No such thing as exactly-once delivery - 2 comments
23. Tips for Building and Deploying Robots - 15 comments
24. Map with public fruit trees - 130 comments
25. NotebookLM's automatically generated podcasts are surprisingly effective - 389 comments
26. Generate pip requirements.txt file based on imports of any project - 55 comments
27. New research on anesthesia and microtubules gives new clues about consciousness - 139 comments
28. Liquid Foundation Models: Our First Series of Generative AI Models - 125 comments
29. Sitina1 Open-Source Camera - 116 comments
30. Do AI companies work? - 170 comments
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#usage-example",
    "title": "Usage example",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "First, you'll need to create a session.
const session = await client.sessions.create();
session = client.sessions.create()

Next, you'll need to create a window and load a URL.
const window = await client.windows.create(session.data.id, { url: "https://news.ycombinator.com/news" });
window = client.windows.create(session.data.id, url="https://news.ycombinator.com/news")

Finally, you can prompt the page.
const result = await client.windows.promptContent(session.data.id, window.data.windowId, {
  prompt:
    'Give me a list of all the titles of the articles on this page along with the number of comments each article has.',
});
const content = result.data.modelResponse;
result = client.windows.prompt_content(session.data.id, window.data.window_id, prompt='Give me a list of all the titles of the articles on this page along with the number of comments each article has.')
content = result.data.model_response

Example output:
1. California bans legacy admissions at private universities - 71 comments
2. Bop Spotter - 209 comments
3. Apple No Longer in Talks to Invest in ChatGPT Maker OpenAI - 7 comments
4. Paramotorists soar across remote Peru desert to collect threatened plants - 13 comments
5. Launch HN: Inkeep (YC W23) – Copilot for Support (think Cursor for help desks) - 39 comments
6. Phrase matching in Marginalia Search - 16 comments
7. Engineers investigate another malfunction on SpaceX's Falcon 9 rocket - 11 comments
8. Gavin Newsom vetoes SB 1047 - 414 comments
9. EasyPost (YC S13) Is Hiring - No comments listed
10. The Physics of Colliding Balls - 13 comments
11. Show HN: A macOS app to prevent sound quality degradation on AirPods - 78 comments
12. Product Hunt isn't dying, it's becoming gentrified - 16 comments
13. Two new books on John Calhoun and his rodent experiments - 41 comments
14. GnuCash 5.9 Released - 6 comments
15. The fight to save Chile's white strawberry - 10 comments
16. Keep Track: 3D Satellite Toolkit - 29 comments
17. Normans and Slavery: Breaking the Bonds - 51 comments
18. Screenpipe: 24/7 local AI screen and mic recording - 86 comments
19. Peer Calls: WebRTC peer to peer calls for everyone - 11 comments
20. How we built ngrok's data platform - 31 comments
21. The best browser bookmarking system is files - 66 comments
22. No such thing as exactly-once delivery - 2 comments
23. Tips for Building and Deploying Robots - 15 comments
24. Map with public fruit trees - 130 comments
25. NotebookLM's automatically generated podcasts are surprisingly effective - 389 comments
26. Generate pip requirements.txt file based on imports of any project - 55 comments
27. New research on anesthesia and microtubules gives new clues about consciousness - 139 comments
28. Liquid Foundation Models: Our First Series of Generative AI Models - 125 comments
29. Sitina1 Open-Source Camera - 116 comments
30. Do AI companies work? - 170 comments
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#usage-example",
    "title": "Usage example",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "If you're scraping a paginated page, Airtop will automatically handle pagination for you. You just need to pass the followPaginationLinks: true option and specify the number of pages or results you want to scrape.
const result = await client.windows.promptContent(session.data.id, windowInfo.data.windowId, {
  prompt:
    'You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.',
  followPaginationLinks: true,
});
prompt = """
You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.
"""
result = client.windows.prompt_content(session.data.id, window_info.data.window_id, prompt=prompt, follow_pagination_links=True)

Example output:
1. **Article Number:** 2
   **Title:** Too much efficiency makes everything worse (2022)
   **Comments:** 204
   **User:** feyman_r

2. **Article Number:** 8
   **Title:** SpaceX launches mission for 2 NASA astronauts who are stuck on the ISS
   **Comments:** 250
   **User:** JumpCrisscross

3. **Article Number:** 23
   **Title:** The perils of transition to 64-bit time_t
   **Comments:** 177
   **User:** todsacerdoti

4. **Article Number:** 36
   **Title:** Floating megabomb heaves to near the English coast
   **Comments:** 176
   **User:** itronitron

5. **Article Number:** 51
   **Title:** Legalizing sports gambling was a mistake
   **Comments:** 1109
   **User:** jimbob45

6. **Article Number:** 52
   **Title:** Automatic Content Recognition Tracking in Smart TVs
   **Comments:** 133
   **User:** some_furry

7. **Article Number:** 53
   **Title:** Amusing Ourselves to Death (2014)
   **Comments:** 293
   **User:** yamrzou

8. **Article Number:** 68
   **Title:** Everything you need to know about Python 3.13 – JIT and GIL went up the hill
   **Comments:** 190
   **User:** chmaynard

9. **Article Number:** 84
   **Title:** Notion's mid-life crisis
   **Comments:** 130
   **User:** krishna2

10. **Article Number:** 91
    **Title:** I Am Tired of AI
    **Comments:** 1086
    **User:** Liriel

11. **Article Number:** 94
    **Title:** Hacking Kia: Remotely controlling cars with just a license plate
    **Comments:** 355
    **User:** speckx

12. **Article Number:** 95
    **Title:** If WordPress is to survive, Matt Mullenweg must be removed
    **Comments:** 224
    **User:** graeme

13. **Article Number:** 98
    **Title:** CNN and USA Today have fake websites, I believe Forbes Marketplace runs them
    **Comments:** 259
    **User:** greg_V
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#paginated-results",
    "title": "Paginated Results",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "If you're scraping a paginated page, Airtop will automatically handle pagination for you. You just need to pass the followPaginationLinks: true option and specify the number of pages or results you want to scrape.
const result = await client.windows.promptContent(session.data.id, windowInfo.data.windowId, {
  prompt:
    'You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.',
  followPaginationLinks: true,
});
prompt = """
You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.
"""
result = client.windows.prompt_content(session.data.id, window_info.data.window_id, prompt=prompt, follow_pagination_links=True)

Example output:
1. **Article Number:** 2
   **Title:** Too much efficiency makes everything worse (2022)
   **Comments:** 204
   **User:** feyman_r

2. **Article Number:** 8
   **Title:** SpaceX launches mission for 2 NASA astronauts who are stuck on the ISS
   **Comments:** 250
   **User:** JumpCrisscross

3. **Article Number:** 23
   **Title:** The perils of transition to 64-bit time_t
   **Comments:** 177
   **User:** todsacerdoti

4. **Article Number:** 36
   **Title:** Floating megabomb heaves to near the English coast
   **Comments:** 176
   **User:** itronitron

5. **Article Number:** 51
   **Title:** Legalizing sports gambling was a mistake
   **Comments:** 1109
   **User:** jimbob45

6. **Article Number:** 52
   **Title:** Automatic Content Recognition Tracking in Smart TVs
   **Comments:** 133
   **User:** some_furry

7. **Article Number:** 53
   **Title:** Amusing Ourselves to Death (2014)
   **Comments:** 293
   **User:** yamrzou

8. **Article Number:** 68
   **Title:** Everything you need to know about Python 3.13 – JIT and GIL went up the hill
   **Comments:** 190
   **User:** chmaynard

9. **Article Number:** 84
   **Title:** Notion's mid-life crisis
   **Comments:** 130
   **User:** krishna2

10. **Article Number:** 91
    **Title:** I Am Tired of AI
    **Comments:** 1086
    **User:** Liriel

11. **Article Number:** 94
    **Title:** Hacking Kia: Remotely controlling cars with just a license plate
    **Comments:** 355
    **User:** speckx

12. **Article Number:** 95
    **Title:** If WordPress is to survive, Matt Mullenweg must be removed
    **Comments:** 224
    **User:** graeme

13. **Article Number:** 98
    **Title:** CNN and USA Today have fake websites, I believe Forbes Marketplace runs them
    **Comments:** 259
    **User:** greg_V
",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#paginated-results",
    "title": "Paginated Results",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "Like any LLM based tool, the quality of the results depends heavily on the quality of the prompt. Here are some tips to get the best results:",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#prompting-tips",
    "title": "Prompting Tips",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "Like any LLM based tool, the quality of the results depends heavily on the quality of the prompt. Here are some tips to get the best results:",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#prompting-tips",
    "title": "Prompting Tips",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
      {
        "slug": "guides/how-to/ai/prompting-a-page#prompting-tips",
        "title": "Prompting Tips",
      },
    ],
    "description": "

Provide the AI with some context by telling it a little bit about the web page or content it's looking at.


Be clear about your goals and what you want the AI to do.


If, to complete the request, more content than is originally visible must be loaded (i.e. paginated results or infinite scrolling or "Load More" controls), be sure to include a clear limit on when the AI should stop. It can also be helpful to be explicit about how more content should be loaded.


Provide an example or two of how you would like the AI to respond, or include a JSON schema if you want a structured response that is more suitable for automated processing.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#basic-prompting-tips",
    "title": "Basic Prompting Tips",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
      "Prompting Tips",
    ],
    "content": "

Provide the AI with some context by telling it a little bit about the web page or content it's looking at.


Be clear about your goals and what you want the AI to do.


If, to complete the request, more content than is originally visible must be loaded (i.e. paginated results or infinite scrolling or "Load More" controls), be sure to include a clear limit on when the AI should stop. It can also be helpful to be explicit about how more content should be loaded.


Provide an example or two of how you would like the AI to respond, or include a JSON schema if you want a structured response that is more suitable for automated processing.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#basic-prompting-tips",
    "title": "Basic Prompting Tips",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
      {
        "slug": "guides/how-to/ai/prompting-a-page#prompting-tips",
        "title": "Prompting Tips",
      },
    ],
    "description": "

Take advantage of the description fields to give the AI additional clarity and instructions about how to populate the property, and consider even adding examples (especially if you would prefer certain formatting).


Don't mark a property as required unless you're certain it will always be possible to provide. If the AI feels compelled to provide data that doesn't exist, it's very likely to hallucinate it.


Be sure to include a valid way for the AI to report back failure if it cannot fulfill the objective. If your schema does not allow the AI to report failure and something happens, it may feel compelled to return a natural language response instead, or even hallucinate results in order to honor the schema and your request to use it for responses.


You can sometimes use schema constraints to guide the AI response. For example, if you find that it includes an empty string or array for an optional property when unavailable, and you'd rather see that property omitted instead, you can add a constraint of minLength: 1 (or minItems: 1 for an array). Of course, make sure those properties are not marked as required.


Most major LLMs are quite good at generating JSON schemas from examples (or even natural language descriptions) if you'd rather not write them by hand.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#tips-for-using-json-schemas",
    "title": "Tips for using JSON Schemas:",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
      "Prompting Tips",
    ],
    "content": "

Take advantage of the description fields to give the AI additional clarity and instructions about how to populate the property, and consider even adding examples (especially if you would prefer certain formatting).


Don't mark a property as required unless you're certain it will always be possible to provide. If the AI feels compelled to provide data that doesn't exist, it's very likely to hallucinate it.


Be sure to include a valid way for the AI to report back failure if it cannot fulfill the objective. If your schema does not allow the AI to report failure and something happens, it may feel compelled to return a natural language response instead, or even hallucinate results in order to honor the schema and your request to use it for responses.


You can sometimes use schema constraints to guide the AI response. For example, if you find that it includes an empty string or array for an optional property when unavailable, and you'd rather see that property omitted instead, you can add a constraint of minLength: 1 (or minItems: 1 for an array). Of course, make sure those properties are not marked as required.


Most major LLMs are quite good at generating JSON schemas from examples (or even natural language descriptions) if you'd rather not write them by hand.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#tips-for-using-json-schemas",
    "title": "Tips for using JSON Schemas:",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "You are on the Hacker News website. Please scan the first 100 articles and provide a list of any articles that seem to be about nuclear reactors. You may need to page through the articles using the pagination controls at the bottom of the page to get through the 100 articles. Report your results using the JSON schema below. If you cannot fulfill the request, use the "error" field in the schema to report the problem.

Response schema:
```json
  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "results": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Article title"
            },
            "score": {
              "type": "number",
              "description": "Number of points the article has received"
            },
            "author": {
              "type": "string",
              "description": "Author of the post"
            }
          },
          "required": ["title", "score", "author"],
          "additionalProperties": false
        }
      },
      "error": {
        "type": "string",
        "description": "Error message in case of failure",
        "minLength": 1
      },
    },
  }

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#example-prompt",
    "title": "Example Prompt:",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "You are on the Hacker News website. Please scan the first 100 articles and provide a list of any articles that seem to be about nuclear reactors. You may need to page through the articles using the pagination controls at the bottom of the page to get through the 100 articles. Report your results using the JSON schema below. If you cannot fulfill the request, use the "error" field in the schema to report the problem.

Response schema:
```json
  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "results": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Article title"
            },
            "score": {
              "type": "number",
              "description": "Number of points the article has received"
            },
            "author": {
              "type": "string",
              "description": "Author of the post"
            }
          },
          "required": ["title", "score", "author"],
          "additionalProperties": false
        }
      },
      "error": {
        "type": "string",
        "description": "Error message in case of failure",
        "minLength": 1
      },
    },
  }

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/prompting-a-page#example-prompt",
    "title": "Example Prompt:",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "Learn more about how AI costs are calculated and how to control them

If you are using any of the AI APIs, you may be charged for the tokens used. The cost is calculated based on the number of input and output tokens used, as well as the model used.

Airtop uses a credit system to keep track of your usage since we often use multiple models and different pricing tiers for each model. We do not charge any markup on LLM costs.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/ai-costs",
    "title": "AI Costs",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "If you are using any of the AI APIs, you may be charged for the tokens used. The cost is calculated based on the number of input and output tokens used, as well as the model used.
Airtop uses a credit system to keep track of your usage since we often use multiple models and different pricing tiers for each model. We do not charge any markup on LLM costs.
Keeping track of costs
Every AI API call returns a meta.usage object containing the number of credits used by this call. You can use this number to monitor your usage on a per-request basis.
You can also see your consumed AI credits for the month on the billing page of the developer portal.
Controlling costs
In addition to monitoring, you can also specify a max cost for every AI API call. There are 2 fields that can be helpful for this:


costThresholdCredits: A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A request may slightly exceed the threshold if it's in the middle of an LLM call that is already in progress, but any subsequent calls will not be permitted to continue.


timeThresholdSeconds: A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. If you would like to prevent a single request from running for more than a certain amount of time rather than a cost threshold, you can use this field.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/ai-costs",
    "title": "AI Costs",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "Every AI API call returns a meta.usage object containing the number of credits used by this call. You can use this number to monitor your usage on a per-request basis.
You can also see your consumed AI credits for the month on the billing page of the developer portal.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/ai-costs#keeping-track-of-costs",
    "title": "Keeping track of costs",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "Every AI API call returns a meta.usage object containing the number of credits used by this call. You can use this number to monitor your usage on a per-request basis.
You can also see your consumed AI credits for the month on the billing page of the developer portal.",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/ai-costs#keeping-track-of-costs",
    "title": "Keeping track of costs",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/how-to/creating-a-session",
        "title": "How To",
      },
      {
        "slug": "guides/how-to/ai/smart-scraping",
        "title": "AI APIs",
      },
    ],
    "description": "In addition to monitoring, you can also specify a max cost for every AI API call. There are 2 fields that can be helpful for this:


costThresholdCredits: A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A request may slightly exceed the threshold if it's in the middle of an LLM call that is already in progress, but any subsequent calls will not be permitted to continue.


timeThresholdSeconds: A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. If you would like to prevent a single request from running for more than a certain amount of time rather than a cost threshold, you can use this field.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/ai-costs#controlling-costs",
    "title": "Controlling costs",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "How To",
      "AI APIs",
    ],
    "content": "In addition to monitoring, you can also specify a max cost for every AI API call. There are 2 fields that can be helpful for this:


costThresholdCredits: A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A request may slightly exceed the threshold if it's in the middle of an LLM call that is already in progress, but any subsequent calls will not be permitted to continue.


timeThresholdSeconds: A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. If you would like to prevent a single request from running for more than a certain amount of time rather than a cost threshold, you can use this field.

",
    "indexSegmentId": "0",
    "slug": "guides/how-to/ai/ai-costs#controlling-costs",
    "title": "Controlling costs",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "How to get help with Airtop

We're happy to help with any issues you're having with Airtop and eager to hear your feedback. If you run into any issues, please reach out to us at [support@airtop.ai](mailto:support@airtop.ai).

If you run into any bugs, please file an issue on [GitHub](https://github.com/airtop-ai/airtop-node-sdk/issues).",
    "indexSegmentId": "0",
    "slug": "guides/misc/support",
    "title": "Support",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "We're happy to help with any issues you're having with Airtop and eager to hear your feedback. If you run into any issues, please reach out to us at support@airtop.ai.
If you run into any bugs, please file an issue on GitHub.",
    "indexSegmentId": "0",
    "slug": "guides/misc/support",
    "title": "Support",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "Answers to frequently asked questions",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq",
    "title": "FAQ",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "What LLMs do you use?
Airtop uses a variety of LLMs from OpenAI, Anthropic, and custom fine-tuned models. Airtop may dynamically switch between different models based on the workload and model capabilities. Additionally, Airtop may failover to a different model if a model is experiencing high latency or downtime. Airtop additionally uses vision capable models to provide visual data to aid in the identification of content, making prompting against sites more accurate.
How does the AI credit system work?
Airtop uses a credit system to track usage of AI APIs. If you use an AI API to summarize content, or prompt a page, Airtop will charge your account for the cost of the API call in the form of credits.
Credits are calculated from input and output tokens of the LLMs, which is also how OpenAI and Anthropic charge for their APIs. Airtop does not add any markup on the cost of the LLMs.
Why doesn't Airtop charge for token usage directly?
Because Airtop uses a variety of LLMs, sometimes within the same API call, Airtop cannot charge for token usage directly since different token consumption may have a different cost. Instead, Airtop assigns a credit value to each LLM's token use and presents a single unified cost to developers. We are constantly working to lower the cost of LLM usage and pass on savings to developers.
Will my data be shared with third parties for AI training?
No. In the cases where Airtop uses an LLM hosted by a third party, Airtop always does so under contracts that prohibit the third party from using Airtop's customers' data for their own model training.
Are you SOC 2 compliant?
Yes, Airtop is SOC 2 compliant. If you need access to our SOC 2 report, please reach out to us at support@airtop.ai.
Are there any restrictions on what I can do with Airtop?
Airtop is designed to be used for good things. We do not allow any use of Airtop to engage in any activity that violates laws or the terms of service of the websites you are visiting. Please be aware that the excessive or abusive use of bots, or automation tools on some websites can lead to penalties, including temporary or even permanent restrictions on your account. We recommend you read and adhere to the specific terms of the websites you are visiting and using to avoid any disruptions or issues. We do not assume any responsibility for the consequences of abuse.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq",
    "title": "FAQ",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "Airtop uses a variety of LLMs from OpenAI, Anthropic, and custom fine-tuned models. Airtop may dynamically switch between different models based on the workload and model capabilities. Additionally, Airtop may failover to a different model if a model is experiencing high latency or downtime. Airtop additionally uses vision capable models to provide visual data to aid in the identification of content, making prompting against sites more accurate.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#what-llms-do-you-use",
    "title": "What LLMs do you use?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "Airtop uses a variety of LLMs from OpenAI, Anthropic, and custom fine-tuned models. Airtop may dynamically switch between different models based on the workload and model capabilities. Additionally, Airtop may failover to a different model if a model is experiencing high latency or downtime. Airtop additionally uses vision capable models to provide visual data to aid in the identification of content, making prompting against sites more accurate.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#what-llms-do-you-use",
    "title": "What LLMs do you use?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "Airtop uses a credit system to track usage of AI APIs. If you use an AI API to summarize content, or prompt a page, Airtop will charge your account for the cost of the API call in the form of credits.
Credits are calculated from input and output tokens of the LLMs, which is also how OpenAI and Anthropic charge for their APIs. Airtop does not add any markup on the cost of the LLMs.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#how-does-the-ai-credit-system-work",
    "title": "How does the AI credit system work?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "Airtop uses a credit system to track usage of AI APIs. If you use an AI API to summarize content, or prompt a page, Airtop will charge your account for the cost of the API call in the form of credits.
Credits are calculated from input and output tokens of the LLMs, which is also how OpenAI and Anthropic charge for their APIs. Airtop does not add any markup on the cost of the LLMs.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#how-does-the-ai-credit-system-work",
    "title": "How does the AI credit system work?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
      {
        "slug": "guides/misc/faq#how-does-the-ai-credit-system-work",
        "title": "How does the AI credit system work?",
      },
    ],
    "description": "Because Airtop uses a variety of LLMs, sometimes within the same API call, Airtop cannot charge for token usage directly since different token consumption may have a different cost. Instead, Airtop assigns a credit value to each LLM's token use and presents a single unified cost to developers. We are constantly working to lower the cost of LLM usage and pass on savings to developers.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#why-doesnt-airtop-charge-for-token-usage-directly",
    "title": "Why doesn't Airtop charge for token usage directly?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
      "How does the AI credit system work?",
    ],
    "content": "Because Airtop uses a variety of LLMs, sometimes within the same API call, Airtop cannot charge for token usage directly since different token consumption may have a different cost. Instead, Airtop assigns a credit value to each LLM's token use and presents a single unified cost to developers. We are constantly working to lower the cost of LLM usage and pass on savings to developers.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#why-doesnt-airtop-charge-for-token-usage-directly",
    "title": "Why doesn't Airtop charge for token usage directly?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "No. In the cases where Airtop uses an LLM hosted by a third party, Airtop always does so under contracts that prohibit the third party from using Airtop's customers' data for their own model training.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#will-my-data-be-shared-with-third-parties-for-ai-training",
    "title": "Will my data be shared with third parties for AI training?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "No. In the cases where Airtop uses an LLM hosted by a third party, Airtop always does so under contracts that prohibit the third party from using Airtop's customers' data for their own model training.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#will-my-data-be-shared-with-third-parties-for-ai-training",
    "title": "Will my data be shared with third parties for AI training?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "Yes, Airtop is SOC 2 compliant. If you need access to our SOC 2 report, please reach out to us at support@airtop.ai.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#are-you-soc-2-compliant",
    "title": "Are you SOC 2 compliant?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "Yes, Airtop is SOC 2 compliant. If you need access to our SOC 2 report, please reach out to us at support@airtop.ai.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#are-you-soc-2-compliant",
    "title": "Are you SOC 2 compliant?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "guides/misc/support",
        "title": "Misc",
      },
    ],
    "description": "Airtop is designed to be used for good things. We do not allow any use of Airtop to engage in any activity that violates laws or the terms of service of the websites you are visiting. Please be aware that the excessive or abusive use of bots, or automation tools on some websites can lead to penalties, including temporary or even permanent restrictions on your account. We recommend you read and adhere to the specific terms of the websites you are visiting and using to avoid any disruptions or issues. We do not assume any responsibility for the consequences of abuse.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#are-there-any-restrictions-on-what-i-can-do-with-airtop",
    "title": "Are there any restrictions on what I can do with Airtop?",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Misc",
    ],
    "content": "Airtop is designed to be used for good things. We do not allow any use of Airtop to engage in any activity that violates laws or the terms of service of the websites you are visiting. Please be aware that the excessive or abusive use of bots, or automation tools on some websites can lead to penalties, including temporary or even permanent restrictions on your account. We recommend you read and adhere to the specific terms of the websites you are visiting and using to avoid any disruptions or issues. We do not assume any responsibility for the consequences of abuse.",
    "indexSegmentId": "0",
    "slug": "guides/misc/faq#are-there-any-restrictions-on-what-i-can-do-with-airtop",
    "title": "Are there any restrictions on what I can do with Airtop?",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": undefined,
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage",
    "title": "Summarize a webpage",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "Overview
This recipe demonstrates how to use Airtop to automate the summarization of a webpage. By leveraging Airtop's cloud browser capabilities, we can extract a concise summary from any webpage using a simple API.
The instructions below will walk through creating a script that connects to Airtop, opens a webpage in a cloud browser session, and retrieves a summary of its content. The full source code is available on GitHub for your reference.
Prerequisites
To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.

Getting Started


Clone the repository
Start by cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-summarize.git
cd recipe-summarize



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:
npm install



Configure your environment
You will need to provide your Airtop API key in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your Airtop API key:
AIRTOP_API_KEY=<YOUR_API_KEY>



Script Walkthrough
The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const client = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser.
const createSessionResponse = await client.sessions.create({
  configuration: {
    timeoutMinutes: 5, // Customize the session timeout as needed
  },
});



Connect to the Browser
Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.
const browser: Browser = await puppeteer.connect({
  browserWSEndpoint: createSessionResponse.data.cdpWsUrl,
  headers: {
    Authorization: `Bearer ${AIRTOP_API_KEY}`,
  },
});



Navigate to the Target URL
The script opens a new page and navigates to the target URL. In this example we use a a Wikipedia page, however you can replace this with the URL of your choice.
const page: Page = await browser.newPage(); // Create a new page
await page.goto(TARGET_URL); // TARGET_URL is defined at the top of the script



Summarize the Content
Leverage Airtop to summarize the webpage's content using natural language. We utilize the promptContent API to specify how the summary should be structured.
Here we instruct Airtop to summarize the content of the page in 1 paragraph, however you can customize this prompt to suit your needs (i.e. asking it to provide bullet points).
const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page);
const contentSummary = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: 'Summarize the content of the page in 1 paragraph',
});

// Print the summary to the console or otherwise use it as desired
console.log(contentSummary.data.modelResponse);



Clean Up
Finally, the script closes the browser and terminates the session.
await browser.close();
await client.sessions.terminate(session.id);



Running the Script
To run the script, execute the following command in your terminal:
npm run start

Summary
Airtop makes extracting key information from web pages as simple as writing a few lines of code. By combining the power of cloud browser automation with AI summarization, you can efficiently gather and understand content from any website on the internet.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage",
    "title": "Summarize a webpage",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "This recipe demonstrates how to use Airtop to automate the summarization of a webpage. By leveraging Airtop's cloud browser capabilities, we can extract a concise summary from any webpage using a simple API.
The instructions below will walk through creating a script that connects to Airtop, opens a webpage in a cloud browser session, and retrieves a summary of its content. The full source code is available on GitHub for your reference.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#overview",
    "title": "Overview",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "This recipe demonstrates how to use Airtop to automate the summarization of a webpage. By leveraging Airtop's cloud browser capabilities, we can extract a concise summary from any webpage using a simple API.
The instructions below will walk through creating a script that connects to Airtop, opens a webpage in a cloud browser session, and retrieves a summary of its content. The full source code is available on GitHub for your reference.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#overview",
    "title": "Overview",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#prerequisites",
    "title": "Prerequisites",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#prerequisites",
    "title": "Prerequisites",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "

Clone the repository
Start by cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-summarize.git
cd recipe-summarize



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:
npm install



Configure your environment
You will need to provide your Airtop API key in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your Airtop API key:
AIRTOP_API_KEY=<YOUR_API_KEY>


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#getting-started",
    "title": "Getting Started",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "

Clone the repository
Start by cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-summarize.git
cd recipe-summarize



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:
npm install



Configure your environment
You will need to provide your Airtop API key in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your Airtop API key:
AIRTOP_API_KEY=<YOUR_API_KEY>


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#getting-started",
    "title": "Getting Started",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const client = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser.
const createSessionResponse = await client.sessions.create({
  configuration: {
    timeoutMinutes: 5, // Customize the session timeout as needed
  },
});



Connect to the Browser
Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.
const browser: Browser = await puppeteer.connect({
  browserWSEndpoint: createSessionResponse.data.cdpWsUrl,
  headers: {
    Authorization: `Bearer ${AIRTOP_API_KEY}`,
  },
});



Navigate to the Target URL
The script opens a new page and navigates to the target URL. In this example we use a a Wikipedia page, however you can replace this with the URL of your choice.
const page: Page = await browser.newPage(); // Create a new page
await page.goto(TARGET_URL); // TARGET_URL is defined at the top of the script



Summarize the Content
Leverage Airtop to summarize the webpage's content using natural language. We utilize the promptContent API to specify how the summary should be structured.
Here we instruct Airtop to summarize the content of the page in 1 paragraph, however you can customize this prompt to suit your needs (i.e. asking it to provide bullet points).
const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page);
const contentSummary = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: 'Summarize the content of the page in 1 paragraph',
});

// Print the summary to the console or otherwise use it as desired
console.log(contentSummary.data.modelResponse);



Clean Up
Finally, the script closes the browser and terminates the session.
await browser.close();
await client.sessions.terminate(session.id);


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#script-walkthrough",
    "title": "Script Walkthrough",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const client = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser.
const createSessionResponse = await client.sessions.create({
  configuration: {
    timeoutMinutes: 5, // Customize the session timeout as needed
  },
});



Connect to the Browser
Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.
const browser: Browser = await puppeteer.connect({
  browserWSEndpoint: createSessionResponse.data.cdpWsUrl,
  headers: {
    Authorization: `Bearer ${AIRTOP_API_KEY}`,
  },
});



Navigate to the Target URL
The script opens a new page and navigates to the target URL. In this example we use a a Wikipedia page, however you can replace this with the URL of your choice.
const page: Page = await browser.newPage(); // Create a new page
await page.goto(TARGET_URL); // TARGET_URL is defined at the top of the script



Summarize the Content
Leverage Airtop to summarize the webpage's content using natural language. We utilize the promptContent API to specify how the summary should be structured.
Here we instruct Airtop to summarize the content of the page in 1 paragraph, however you can customize this prompt to suit your needs (i.e. asking it to provide bullet points).
const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page);
const contentSummary = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: 'Summarize the content of the page in 1 paragraph',
});

// Print the summary to the console or otherwise use it as desired
console.log(contentSummary.data.modelResponse);



Clean Up
Finally, the script closes the browser and terminates the session.
await browser.close();
await client.sessions.terminate(session.id);


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#script-walkthrough",
    "title": "Script Walkthrough",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "To run the script, execute the following command in your terminal:
npm run start
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#running-the-script",
    "title": "Running the Script",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "To run the script, execute the following command in your terminal:
npm run start
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#running-the-script",
    "title": "Running the Script",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "Airtop makes extracting key information from web pages as simple as writing a few lines of code. By combining the power of cloud browser automation with AI summarization, you can efficiently gather and understand content from any website on the internet.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#summary",
    "title": "Summary",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "Airtop makes extracting key information from web pages as simple as writing a few lines of code. By combining the power of cloud browser automation with AI summarization, you can efficiently gather and understand content from any website on the internet.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/summarize-a-webpage#summary",
    "title": "Summary",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": undefined,
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login",
    "title": "Extract data from a webpage requiring login",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "Overview
This recipe demonstrates how to use Airtop to extract data from a website using a prompt. By leveraging Airtop's live view capabilities, you can have your users log into any of their accounts inside a browser session to provide your agents access to content that requires authentication. Airtop profiles can be used to persist a user's login state across sessions and avoid the need to have them log in again.
The instructions below will walk through creating a script that connects to Airtop, provides a live view for a user to log into their Glassdoor account if necessary, and retrieves a list of relevant job postings from the Glassdoor website. Similar logic can be applied to any website that requires authentication.
The full source code is available on GitHub for your reference.
Prerequisites
To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.

Getting Started


Clone the repository
Start by cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-prompt-content.git
cd recipe-prompt-content



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:
npm install



Configure your environment
You will need to provide your Airtop API key in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your Airtop API key:
AIRTOP_API_KEY=<YOUR_API_KEY>



Script Walkthrough
The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const client = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser. The API accepts an optional baseProfileId parameter, which can be used to reuse a user's previously provided credentials. If no baseProfileId is given, the user will be prompted to log in at the provided live view URL (see Step 4).
const profileId: string | undefined = await new Promise<string | undefined>((resolve) => {
  process.stdout.write('Enter a profileId (or press Enter to skip): ');
  process.stdin.once('data', (input) => {
    const trimmedInput = input.toString().trim();
    resolve(trimmedInput || undefined);
  });
});

const createSessionResponse = await client.sessions.create({
  configuration: {
    timeoutMinutes: 10, // Customize the session timeout as needed
    persistProfile: !profileId, // Persist the user's profile across sessions (if we do not have an existing profileId)
    baseProfileId: profileId, // Use the provided profileId if one is provided
  },
});



Connect to the Browser
Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.
const browser: Browser = await puppeteer.connect({
  browserWSEndpoint: createSessionResponse.data.cdpWsUrl,
  headers: {
    Authorization: `Bearer ${AIRTOP_API_KEY}`,
  },
});



Navigate to the Login Page
Next, the script navigates to the Glassdoor's user profile page. If the user is not logged in, it waits for the user to log in at the provided live view URL. The user is also provided with a profileId that can be used to avoid logging in again on subsequent runs.
If the user is already logged in, they are navigated to the target URL to proceed with data extraction.
const page: Page = await browser.newPage(); // Create a new page
await page.goto(LOGIN_URL);
const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page, {
  // By default, Airtop resizes a live view to match the user's local browser window size.
  // This might affect Airtop's data extraction mechanism, so we disable that behavior here.
  disableResize: true,
});

// Prompt the page content to determine if the user is logged in
const isLoggedInPromptResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: IS_LOGGED_IN_PROMPT,
});
const parsedResponse = JSON.parse(isLoggedInPromptResponse.data.modelResponse);
if (parsedResponse.error) {
  throw new Error(parsedResponse.error);
}
const isUserLoggedIn = parsedResponse.isLoggedIn;

if (!isUserLoggedIn) {
  console.log(
    'Log into your Glassdoor account on the live view of your browser window.  Press `Enter` once you have logged in.',
    windowInfo.data.liveViewUrl,
  );
  await new Promise<void>((resolve) => process.stdin.once('data', () => resolve())); // Wait for the user to log in
  console.log(
    'To avoid logging in again, use the following profileId the next time you run this script: ',
    session.profileId,
  );
} else {
  console.log(
    'User is already logged in. View progress at the following live view URL:',
    windowInfo.data.liveViewUrl,
  );
}



Navigate to the Target URL
After logging in, the script navigates to the target URL, which in this case is a Glassdoor search page for software engineering jobs in San Francisco.
await page.goto(TARGET_URL);



Prompt the AI to Extract Data
We construct a prompt that asks the AI to extract data about job postings that are related to AI companies and provide a JSON schema for the output.
Note that an optimal prompt will begin by providing context about the webpage and what the model is viewing. It will also include information in the
description fields of a provided JSON schema to guide the model's output.
const PROMPT = `This browser is open to a page that lists available job roles for software engineers in San Francisco. Please provide 10 job roles that appear to be posted by the AI-related companies.


 Report your results using the JSON schema below.

 {
     "$schema": "http://json-schema.org/draft-07/schema#",
     "type": "object",
     "properties": {
       "companies": {
         "type": "array",
         "items": {
           "type": "object",
           "properties": {
             "companyName": {
               "type": "string"
             },
             jobTitle: {
               "type": "string"
             },
             "location": {
               "type": "string"
             },
             "salary": {
               "type": "object",
               "properties": {
                 "min": {
                   "type": "number",
                   "minimum": 0
                 },
                 "max": {
                   "type": "number",
                   "minimum": 0
                 }
               },
               "required": ["min", "max"]
             }
           },
           "required": ["companyName", "jobTitle", "location", "salary"]
         }
       },
       "error": {
         "type": "string",
         "description": "If you cannot fulfill the request, use this field to report the problem."
       }
     }
   }
 `;

Utilizing Airtop's prompt feature, the script requests data about job postings that are related to AI companies, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results on sites with multiple pages or from a feed with infinite scrolling.
// Note that it may take several minutes to receive a response from the AI agent
// as it follows pagination links and gathers data from each page
const promptContentResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: PROMPT,
  followPaginationLinks: true,
});

// Print the result to the console or otherwise use it as desired
console.log(contentSummary.data.modelResponse);



Clean Up
Finally, the script closes the browser and terminates the session.
await browser.close();
await client.sessions.terminate(session.id);



Running the Script
To run the script, execute the following command in your terminal:
npm run start

Summary
This recipe showcases how Airtop can be used to automate tasks that require authentication and data extraction from dynamic content. By combining Airtop's live view feature for manual login with automated data extraction via natural language prompts, you can interact with and extract data from complex websites that require user credentials.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login",
    "title": "Extract data from a webpage requiring login",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "This recipe demonstrates how to use Airtop to extract data from a website using a prompt. By leveraging Airtop's live view capabilities, you can have your users log into any of their accounts inside a browser session to provide your agents access to content that requires authentication. Airtop profiles can be used to persist a user's login state across sessions and avoid the need to have them log in again.
The instructions below will walk through creating a script that connects to Airtop, provides a live view for a user to log into their Glassdoor account if necessary, and retrieves a list of relevant job postings from the Glassdoor website. Similar logic can be applied to any website that requires authentication.
The full source code is available on GitHub for your reference.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#overview",
    "title": "Overview",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "This recipe demonstrates how to use Airtop to extract data from a website using a prompt. By leveraging Airtop's live view capabilities, you can have your users log into any of their accounts inside a browser session to provide your agents access to content that requires authentication. Airtop profiles can be used to persist a user's login state across sessions and avoid the need to have them log in again.
The instructions below will walk through creating a script that connects to Airtop, provides a live view for a user to log into their Glassdoor account if necessary, and retrieves a list of relevant job postings from the Glassdoor website. Similar logic can be applied to any website that requires authentication.
The full source code is available on GitHub for your reference.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#overview",
    "title": "Overview",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#prerequisites",
    "title": "Prerequisites",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#prerequisites",
    "title": "Prerequisites",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "

Clone the repository
Start by cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-prompt-content.git
cd recipe-prompt-content



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:
npm install



Configure your environment
You will need to provide your Airtop API key in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your Airtop API key:
AIRTOP_API_KEY=<YOUR_API_KEY>


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#getting-started",
    "title": "Getting Started",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "

Clone the repository
Start by cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-prompt-content.git
cd recipe-prompt-content



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:
npm install



Configure your environment
You will need to provide your Airtop API key in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your Airtop API key:
AIRTOP_API_KEY=<YOUR_API_KEY>


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#getting-started",
    "title": "Getting Started",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const client = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser. The API accepts an optional baseProfileId parameter, which can be used to reuse a user's previously provided credentials. If no baseProfileId is given, the user will be prompted to log in at the provided live view URL (see Step 4).
const profileId: string | undefined = await new Promise<string | undefined>((resolve) => {
  process.stdout.write('Enter a profileId (or press Enter to skip): ');
  process.stdin.once('data', (input) => {
    const trimmedInput = input.toString().trim();
    resolve(trimmedInput || undefined);
  });
});

const createSessionResponse = await client.sessions.create({
  configuration: {
    timeoutMinutes: 10, // Customize the session timeout as needed
    persistProfile: !profileId, // Persist the user's profile across sessions (if we do not have an existing profileId)
    baseProfileId: profileId, // Use the provided profileId if one is provided
  },
});



Connect to the Browser
Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.
const browser: Browser = await puppeteer.connect({
  browserWSEndpoint: createSessionResponse.data.cdpWsUrl,
  headers: {
    Authorization: `Bearer ${AIRTOP_API_KEY}`,
  },
});



Navigate to the Login Page
Next, the script navigates to the Glassdoor's user profile page. If the user is not logged in, it waits for the user to log in at the provided live view URL. The user is also provided with a profileId that can be used to avoid logging in again on subsequent runs.
If the user is already logged in, they are navigated to the target URL to proceed with data extraction.
const page: Page = await browser.newPage(); // Create a new page
await page.goto(LOGIN_URL);
const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page, {
  // By default, Airtop resizes a live view to match the user's local browser window size.
  // This might affect Airtop's data extraction mechanism, so we disable that behavior here.
  disableResize: true,
});

// Prompt the page content to determine if the user is logged in
const isLoggedInPromptResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: IS_LOGGED_IN_PROMPT,
});
const parsedResponse = JSON.parse(isLoggedInPromptResponse.data.modelResponse);
if (parsedResponse.error) {
  throw new Error(parsedResponse.error);
}
const isUserLoggedIn = parsedResponse.isLoggedIn;

if (!isUserLoggedIn) {
  console.log(
    'Log into your Glassdoor account on the live view of your browser window.  Press `Enter` once you have logged in.',
    windowInfo.data.liveViewUrl,
  );
  await new Promise<void>((resolve) => process.stdin.once('data', () => resolve())); // Wait for the user to log in
  console.log(
    'To avoid logging in again, use the following profileId the next time you run this script: ',
    session.profileId,
  );
} else {
  console.log(
    'User is already logged in. View progress at the following live view URL:',
    windowInfo.data.liveViewUrl,
  );
}



Navigate to the Target URL
After logging in, the script navigates to the target URL, which in this case is a Glassdoor search page for software engineering jobs in San Francisco.
await page.goto(TARGET_URL);



Prompt the AI to Extract Data
We construct a prompt that asks the AI to extract data about job postings that are related to AI companies and provide a JSON schema for the output.
Note that an optimal prompt will begin by providing context about the webpage and what the model is viewing. It will also include information in the
description fields of a provided JSON schema to guide the model's output.
const PROMPT = `This browser is open to a page that lists available job roles for software engineers in San Francisco. Please provide 10 job roles that appear to be posted by the AI-related companies.


 Report your results using the JSON schema below.

 {
     "$schema": "http://json-schema.org/draft-07/schema#",
     "type": "object",
     "properties": {
       "companies": {
         "type": "array",
         "items": {
           "type": "object",
           "properties": {
             "companyName": {
               "type": "string"
             },
             jobTitle: {
               "type": "string"
             },
             "location": {
               "type": "string"
             },
             "salary": {
               "type": "object",
               "properties": {
                 "min": {
                   "type": "number",
                   "minimum": 0
                 },
                 "max": {
                   "type": "number",
                   "minimum": 0
                 }
               },
               "required": ["min", "max"]
             }
           },
           "required": ["companyName", "jobTitle", "location", "salary"]
         }
       },
       "error": {
         "type": "string",
         "description": "If you cannot fulfill the request, use this field to report the problem."
       }
     }
   }
 `;

Utilizing Airtop's prompt feature, the script requests data about job postings that are related to AI companies, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results on sites with multiple pages or from a feed with infinite scrolling.
// Note that it may take several minutes to receive a response from the AI agent
// as it follows pagination links and gathers data from each page
const promptContentResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: PROMPT,
  followPaginationLinks: true,
});

// Print the result to the console or otherwise use it as desired
console.log(contentSummary.data.modelResponse);



Clean Up
Finally, the script closes the browser and terminates the session.
await browser.close();
await client.sessions.terminate(session.id);


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#script-walkthrough",
    "title": "Script Walkthrough",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const client = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser. The API accepts an optional baseProfileId parameter, which can be used to reuse a user's previously provided credentials. If no baseProfileId is given, the user will be prompted to log in at the provided live view URL (see Step 4).
const profileId: string | undefined = await new Promise<string | undefined>((resolve) => {
  process.stdout.write('Enter a profileId (or press Enter to skip): ');
  process.stdin.once('data', (input) => {
    const trimmedInput = input.toString().trim();
    resolve(trimmedInput || undefined);
  });
});

const createSessionResponse = await client.sessions.create({
  configuration: {
    timeoutMinutes: 10, // Customize the session timeout as needed
    persistProfile: !profileId, // Persist the user's profile across sessions (if we do not have an existing profileId)
    baseProfileId: profileId, // Use the provided profileId if one is provided
  },
});



Connect to the Browser
Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.
const browser: Browser = await puppeteer.connect({
  browserWSEndpoint: createSessionResponse.data.cdpWsUrl,
  headers: {
    Authorization: `Bearer ${AIRTOP_API_KEY}`,
  },
});



Navigate to the Login Page
Next, the script navigates to the Glassdoor's user profile page. If the user is not logged in, it waits for the user to log in at the provided live view URL. The user is also provided with a profileId that can be used to avoid logging in again on subsequent runs.
If the user is already logged in, they are navigated to the target URL to proceed with data extraction.
const page: Page = await browser.newPage(); // Create a new page
await page.goto(LOGIN_URL);
const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page, {
  // By default, Airtop resizes a live view to match the user's local browser window size.
  // This might affect Airtop's data extraction mechanism, so we disable that behavior here.
  disableResize: true,
});

// Prompt the page content to determine if the user is logged in
const isLoggedInPromptResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: IS_LOGGED_IN_PROMPT,
});
const parsedResponse = JSON.parse(isLoggedInPromptResponse.data.modelResponse);
if (parsedResponse.error) {
  throw new Error(parsedResponse.error);
}
const isUserLoggedIn = parsedResponse.isLoggedIn;

if (!isUserLoggedIn) {
  console.log(
    'Log into your Glassdoor account on the live view of your browser window.  Press `Enter` once you have logged in.',
    windowInfo.data.liveViewUrl,
  );
  await new Promise<void>((resolve) => process.stdin.once('data', () => resolve())); // Wait for the user to log in
  console.log(
    'To avoid logging in again, use the following profileId the next time you run this script: ',
    session.profileId,
  );
} else {
  console.log(
    'User is already logged in. View progress at the following live view URL:',
    windowInfo.data.liveViewUrl,
  );
}



Navigate to the Target URL
After logging in, the script navigates to the target URL, which in this case is a Glassdoor search page for software engineering jobs in San Francisco.
await page.goto(TARGET_URL);



Prompt the AI to Extract Data
We construct a prompt that asks the AI to extract data about job postings that are related to AI companies and provide a JSON schema for the output.
Note that an optimal prompt will begin by providing context about the webpage and what the model is viewing. It will also include information in the
description fields of a provided JSON schema to guide the model's output.
const PROMPT = `This browser is open to a page that lists available job roles for software engineers in San Francisco. Please provide 10 job roles that appear to be posted by the AI-related companies.


 Report your results using the JSON schema below.

 {
     "$schema": "http://json-schema.org/draft-07/schema#",
     "type": "object",
     "properties": {
       "companies": {
         "type": "array",
         "items": {
           "type": "object",
           "properties": {
             "companyName": {
               "type": "string"
             },
             jobTitle: {
               "type": "string"
             },
             "location": {
               "type": "string"
             },
             "salary": {
               "type": "object",
               "properties": {
                 "min": {
                   "type": "number",
                   "minimum": 0
                 },
                 "max": {
                   "type": "number",
                   "minimum": 0
                 }
               },
               "required": ["min", "max"]
             }
           },
           "required": ["companyName", "jobTitle", "location", "salary"]
         }
       },
       "error": {
         "type": "string",
         "description": "If you cannot fulfill the request, use this field to report the problem."
       }
     }
   }
 `;

Utilizing Airtop's prompt feature, the script requests data about job postings that are related to AI companies, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results on sites with multiple pages or from a feed with infinite scrolling.
// Note that it may take several minutes to receive a response from the AI agent
// as it follows pagination links and gathers data from each page
const promptContentResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {
  prompt: PROMPT,
  followPaginationLinks: true,
});

// Print the result to the console or otherwise use it as desired
console.log(contentSummary.data.modelResponse);



Clean Up
Finally, the script closes the browser and terminates the session.
await browser.close();
await client.sessions.terminate(session.id);


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#script-walkthrough",
    "title": "Script Walkthrough",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "To run the script, execute the following command in your terminal:
npm run start
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#running-the-script",
    "title": "Running the Script",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "To run the script, execute the following command in your terminal:
npm run start
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#running-the-script",
    "title": "Running the Script",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "This recipe showcases how Airtop can be used to automate tasks that require authentication and data extraction from dynamic content. By combining Airtop's live view feature for manual login with automated data extraction via natural language prompts, you can interact with and extract data from complex websites that require user credentials.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#summary",
    "title": "Summary",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "This recipe showcases how Airtop can be used to automate tasks that require authentication and data extraction from dynamic content. By combining Airtop's live view feature for manual login with automated data extraction via natural language prompts, you can interact with and extract data from complex websites that require user credentials.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/extract-data-from-a-webpage-requiring-login#summary",
    "title": "Summary",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": undefined,
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings",
    "title": "Scrape the SEC database for recent S-1 filings",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "Overview
This recipe demonstrates how to use Airtop to scrape the SEC database for recent S-1 filings. It extracts company names and CIK numbers from the filings and sends the results via Telegram. This project showcases the power of combining web scraping, AI-assisted data extraction, and automated notifications.
Prerequisites
To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.

Getting Started


Clone the repository
Start by opening your terminal and cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-sec-bot
cd recipe-sec-bot



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer, TelegramBot, and the Airtop SDK:
npm install



Get your Telegram keys


Open Telegram application then search for @BotFather or just click this link @BotFather


Click Start


Click Menu -> /newbot or type /newbot and hit Send


Follow the instruction until we get message like so:
Done! Congratulations on your new bot. You will find it at t.me/new_bot.
You can now add a description.....

Use this token to access the HTTP API:
63xxxxxx71:AAFoxxxxn0hwA-2TVSxxxNf4c
Keep your token secure and store it safely, it can be used by anyone to control your bot.

For a description of the Bot API, see this page: https://core.telegram.org/bots/api



Get your user ID by talking to the UserInfoBot by clicking this link @UserInfoBot.


Send /start to it and you should get a message like this:
@your_user_name
Id: 9999999999
First: Marcos
Lang: en





Configure your environment
You will need to provide your Airtop API key, Telegram bot token and user ID, in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your keys:
AIRTOP_API_KEY=<YOUR_API_KEY>
TELEGRAM_BOT_TOKEN=<YOUR_TELEGRAM_BOT_TOKEN>
TELEGRAM_USER_ID=<YOUR_TELEGRAM_USER_ID>



Script Walkthrough
The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const airtopClient = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Initialize the Telegram Bot
We initialize the Telegram bot using the token and user ID we got back on step 3. This bot will be used to send notifications to the user.
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN!, { polling: false });



Create a function to send a message to the user
This function receives a message formatted as HTML and sends it to the user via Telegram.
async function sendTelegramMessage(message: string) {
  try {
    await bot.sendMessage(TELEGRAM_USER_ID!, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  } catch (error) {
    console.error('Error sending telegram message:', error);
    throw error;
  }
}



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser.
const createSessionResponse = await airtopClient.sessions.create();

sessionId = createSessionResponse.data.id;



Navigate to the SEC website
Next, the script navigates to the SEC's website and waits for the page to load.
const windowResponse = await airtopClient.windows.create(sessionId, {
  url: 'https://www.sec.gov/cgi-bin/browse-edgar?company=&CIK=&type=S-1&owner=include&count=80&action=getcurrent',
});

const windowInfo = await airtopClient.windows.getWindowInfo(sessionId, windowResponse.data.windowId);



Prompt the AI to Extract Data
There are several results on this page, but we want to provide specific instructions to our prompt regarding the exact data we need. Since these results are returned in plain text, we also want to instruct our prompt to convert the extracted information into a structured JSON format. This will allow us to easily parse and process the data in subsequent steps of our analysis.
To achieve this, we'll create a detailed prompt that outlines:

The specific information to extract (company names and CIK numbers)
The criteria for selecting entries (only S-1 filings, not S-1/A)
How to handle special characters in company names
The desired JSON structure for the output

By providing clear and precise instructions, we ensure that the AI model can accurately extract and format the data we need from the page in a repeatable way.
const prompt = `You are on the SEC website looking at a search for the latest filings.
Please extract the company names and their corresponding CIK numbers (which follow the company name in parentheses) from the search results table.
Get only the ones where the form type is S-1 and not S-1/A.
Company names might contain characters like backslashes, which should always be escaped.

Examples:

- "S-1 | Some Company Inc (0001234567)" should produce a result '{ "companyName": "Some Company Inc", "cik": "0001234567", "formType": "S-1" }'.
- "S-1/A | Another Company Inc (0009876543)" should be not be included because the form type is S-1/A.
- "S-1 | Foo Inc \\D\\E (0002468024)" should produce a result with the backslashes in the company name escaped: '{ "companyName": "Foo Inc \\\\D\\\\E, "cik": "0002468024", "formType": "S-1" }'.

Please produce a list of results using the JSON schema below. If you are unable to do so, use the failure field to describe the reason for the failure.

{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "oneOf": [
        {
        "properties": {
            "results": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                "companyName": {
                    "type": "string"
                },
                "cik": {
                    "type": "string"
                },
                "formType": {
                    "type": "string"
                }
                },
                "required": ["companyName", "cik", "formType"]
            }
            }
        },
        "required": ["results"]
        },
        {
        "properties": {
            "failure": {
            "type": "string"
            }
        },
        "required": ["failure"]
        }
    ]
}`;

const extractedContent = await airtopClient.windows.promptContent(sessionId, windowInfo.data.windowId, {
  prompt: prompt,
});

Utilizing Airtop's AI prompt feature, the script requests data about SEC filings, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results from the SEC database, which may contain multiple pages of filings by passing the followPaginationLinks parameter to the promptContent method.


Process the extracted content
modelResponse = JSON.parse(extractedContent.data.modelResponse);

if (modelResponse.failure) {
  console.log(`Airtop AI reported failure: ${modelResponse.failure}`);
  throw new Error(modelResponse.failure);
}

// Format the results as a list instead of a table
const formattedResults = modelResponse.results
  .map(
    (item: { companyName: string; cik: string }, index: number) =>
      `${index + 1}. <b>${item.companyName}</b>\n   CIK: <code>${item.cik}</code>`,
  )
  .join('\n\n');

const message = `<b>SEC EDGAR S-1 Results</b>\n\n${formattedResults}`;

await sendTelegramMessage(message);



Clean Up
Finally, the script closes the browser and terminates the session.
try {
  await browser.close();
} catch (err) {}
if (sessionId) {
  await airtopClient.sessions.terminate(sessionId);
}
console.log('Session deleted');
process.exit(0);



Running the Script
To run the script, execute the following command in your terminal:
npm run start

Summary
This recipe demonstrates how Airtop can be utilized to automate tasks involving plain-text data extraction. By leveraging Airtop's AI prompt feature and pagination handling capabilities, you can efficiently retrieve and process information about S-1 filings from the SEC database. The script showcases how to interact with complex data sources, parse JSON responses, and format the extracted information for easy readability and further analysis.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings",
    "title": "Scrape the SEC database for recent S-1 filings",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
    ],
    "description": "This recipe demonstrates how to use Airtop to scrape the SEC database for recent S-1 filings. It extracts company names and CIK numbers from the filings and sends the results via Telegram. This project showcases the power of combining web scraping, AI-assisted data extraction, and automated notifications.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
    "title": "Overview",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
    ],
    "content": "This recipe demonstrates how to use Airtop to scrape the SEC database for recent S-1 filings. It extracts company names and CIK numbers from the filings and sends the results via Telegram. This project showcases the power of combining web scraping, AI-assisted data extraction, and automated notifications.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
    "title": "Overview",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
      {
        "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
        "title": "Overview",
      },
    ],
    "description": "To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#prerequisites",
    "title": "Prerequisites",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
      "Overview",
    ],
    "content": "To get started, ensure you have:

Node.js installed on your system.
An Airtop API key. You can get one for free.
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#prerequisites",
    "title": "Prerequisites",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
      {
        "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
        "title": "Overview",
      },
    ],
    "description": "

Clone the repository
Start by opening your terminal and cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-sec-bot
cd recipe-sec-bot



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer, TelegramBot, and the Airtop SDK:
npm install



Get your Telegram keys


Open Telegram application then search for @BotFather or just click this link @BotFather


Click Start


Click Menu -> /newbot or type /newbot and hit Send


Follow the instruction until we get message like so:
Done! Congratulations on your new bot. You will find it at t.me/new_bot.
You can now add a description.....

Use this token to access the HTTP API:
63xxxxxx71:AAFoxxxxn0hwA-2TVSxxxNf4c
Keep your token secure and store it safely, it can be used by anyone to control your bot.

For a description of the Bot API, see this page: https://core.telegram.org/bots/api



Get your user ID by talking to the UserInfoBot by clicking this link @UserInfoBot.


Send /start to it and you should get a message like this:
@your_user_name
Id: 9999999999
First: Marcos
Lang: en





Configure your environment
You will need to provide your Airtop API key, Telegram bot token and user ID, in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your keys:
AIRTOP_API_KEY=<YOUR_API_KEY>
TELEGRAM_BOT_TOKEN=<YOUR_TELEGRAM_BOT_TOKEN>
TELEGRAM_USER_ID=<YOUR_TELEGRAM_USER_ID>


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#getting-started",
    "title": "Getting Started",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
      "Overview",
    ],
    "content": "

Clone the repository
Start by opening your terminal and cloning the source code from GitHub:
git clone https://github.com/airtop-ai/recipe-sec-bot
cd recipe-sec-bot



Install dependencies
Run the following command to install the necessary dependencies, including Puppeteer, TelegramBot, and the Airtop SDK:
npm install



Get your Telegram keys


Open Telegram application then search for @BotFather or just click this link @BotFather


Click Start


Click Menu -> /newbot or type /newbot and hit Send


Follow the instruction until we get message like so:
Done! Congratulations on your new bot. You will find it at t.me/new_bot.
You can now add a description.....

Use this token to access the HTTP API:
63xxxxxx71:AAFoxxxxn0hwA-2TVSxxxNf4c
Keep your token secure and store it safely, it can be used by anyone to control your bot.

For a description of the Bot API, see this page: https://core.telegram.org/bots/api



Get your user ID by talking to the UserInfoBot by clicking this link @UserInfoBot.


Send /start to it and you should get a message like this:
@your_user_name
Id: 9999999999
First: Marcos
Lang: en





Configure your environment
You will need to provide your Airtop API key, Telegram bot token and user ID, in a .env file. First, copy the provided example .env file:
cp .env.example .env

Now edit the .env file to add your keys:
AIRTOP_API_KEY=<YOUR_API_KEY>
TELEGRAM_BOT_TOKEN=<YOUR_TELEGRAM_BOT_TOKEN>
TELEGRAM_USER_ID=<YOUR_TELEGRAM_USER_ID>


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#getting-started",
    "title": "Getting Started",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
      {
        "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
        "title": "Overview",
      },
    ],
    "description": "The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const airtopClient = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Initialize the Telegram Bot
We initialize the Telegram bot using the token and user ID we got back on step 3. This bot will be used to send notifications to the user.
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN!, { polling: false });



Create a function to send a message to the user
This function receives a message formatted as HTML and sends it to the user via Telegram.
async function sendTelegramMessage(message: string) {
  try {
    await bot.sendMessage(TELEGRAM_USER_ID!, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  } catch (error) {
    console.error('Error sending telegram message:', error);
    throw error;
  }
}



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser.
const createSessionResponse = await airtopClient.sessions.create();

sessionId = createSessionResponse.data.id;



Navigate to the SEC website
Next, the script navigates to the SEC's website and waits for the page to load.
const windowResponse = await airtopClient.windows.create(sessionId, {
  url: 'https://www.sec.gov/cgi-bin/browse-edgar?company=&CIK=&type=S-1&owner=include&count=80&action=getcurrent',
});

const windowInfo = await airtopClient.windows.getWindowInfo(sessionId, windowResponse.data.windowId);



Prompt the AI to Extract Data
There are several results on this page, but we want to provide specific instructions to our prompt regarding the exact data we need. Since these results are returned in plain text, we also want to instruct our prompt to convert the extracted information into a structured JSON format. This will allow us to easily parse and process the data in subsequent steps of our analysis.
To achieve this, we'll create a detailed prompt that outlines:

The specific information to extract (company names and CIK numbers)
The criteria for selecting entries (only S-1 filings, not S-1/A)
How to handle special characters in company names
The desired JSON structure for the output

By providing clear and precise instructions, we ensure that the AI model can accurately extract and format the data we need from the page in a repeatable way.
const prompt = `You are on the SEC website looking at a search for the latest filings.
Please extract the company names and their corresponding CIK numbers (which follow the company name in parentheses) from the search results table.
Get only the ones where the form type is S-1 and not S-1/A.
Company names might contain characters like backslashes, which should always be escaped.

Examples:

- "S-1 | Some Company Inc (0001234567)" should produce a result '{ "companyName": "Some Company Inc", "cik": "0001234567", "formType": "S-1" }'.
- "S-1/A | Another Company Inc (0009876543)" should be not be included because the form type is S-1/A.
- "S-1 | Foo Inc \\D\\E (0002468024)" should produce a result with the backslashes in the company name escaped: '{ "companyName": "Foo Inc \\\\D\\\\E, "cik": "0002468024", "formType": "S-1" }'.

Please produce a list of results using the JSON schema below. If you are unable to do so, use the failure field to describe the reason for the failure.

{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "oneOf": [
        {
        "properties": {
            "results": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                "companyName": {
                    "type": "string"
                },
                "cik": {
                    "type": "string"
                },
                "formType": {
                    "type": "string"
                }
                },
                "required": ["companyName", "cik", "formType"]
            }
            }
        },
        "required": ["results"]
        },
        {
        "properties": {
            "failure": {
            "type": "string"
            }
        },
        "required": ["failure"]
        }
    ]
}`;

const extractedContent = await airtopClient.windows.promptContent(sessionId, windowInfo.data.windowId, {
  prompt: prompt,
});

Utilizing Airtop's AI prompt feature, the script requests data about SEC filings, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results from the SEC database, which may contain multiple pages of filings by passing the followPaginationLinks parameter to the promptContent method.


Process the extracted content
modelResponse = JSON.parse(extractedContent.data.modelResponse);

if (modelResponse.failure) {
  console.log(`Airtop AI reported failure: ${modelResponse.failure}`);
  throw new Error(modelResponse.failure);
}

// Format the results as a list instead of a table
const formattedResults = modelResponse.results
  .map(
    (item: { companyName: string; cik: string }, index: number) =>
      `${index + 1}. <b>${item.companyName}</b>\n   CIK: <code>${item.cik}</code>`,
  )
  .join('\n\n');

const message = `<b>SEC EDGAR S-1 Results</b>\n\n${formattedResults}`;

await sendTelegramMessage(message);



Clean Up
Finally, the script closes the browser and terminates the session.
try {
  await browser.close();
} catch (err) {}
if (sessionId) {
  await airtopClient.sessions.terminate(sessionId);
}
console.log('Session deleted');
process.exit(0);


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#script-walkthrough",
    "title": "Script Walkthrough",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
      "Overview",
    ],
    "content": "The script in index.ts performs the following steps:


Initialize the Airtop Client
First, we initialize the AirtopClient using your provided API key. This client will be used to create browser sessions and interact with the page content.
const airtopClient = new AirtopClient({
  apiKey: AIRTOP_API_KEY,
});



Initialize the Telegram Bot
We initialize the Telegram bot using the token and user ID we got back on step 3. This bot will be used to send notifications to the user.
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN!, { polling: false });



Create a function to send a message to the user
This function receives a message formatted as HTML and sends it to the user via Telegram.
async function sendTelegramMessage(message: string) {
  try {
    await bot.sendMessage(TELEGRAM_USER_ID!, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  } catch (error) {
    console.error('Error sending telegram message:', error);
    throw error;
  }
}



Create a Browser Session
Creating a browser session will allow us to connect to and control a cloud-based browser.
const createSessionResponse = await airtopClient.sessions.create();

sessionId = createSessionResponse.data.id;



Navigate to the SEC website
Next, the script navigates to the SEC's website and waits for the page to load.
const windowResponse = await airtopClient.windows.create(sessionId, {
  url: 'https://www.sec.gov/cgi-bin/browse-edgar?company=&CIK=&type=S-1&owner=include&count=80&action=getcurrent',
});

const windowInfo = await airtopClient.windows.getWindowInfo(sessionId, windowResponse.data.windowId);



Prompt the AI to Extract Data
There are several results on this page, but we want to provide specific instructions to our prompt regarding the exact data we need. Since these results are returned in plain text, we also want to instruct our prompt to convert the extracted information into a structured JSON format. This will allow us to easily parse and process the data in subsequent steps of our analysis.
To achieve this, we'll create a detailed prompt that outlines:

The specific information to extract (company names and CIK numbers)
The criteria for selecting entries (only S-1 filings, not S-1/A)
How to handle special characters in company names
The desired JSON structure for the output

By providing clear and precise instructions, we ensure that the AI model can accurately extract and format the data we need from the page in a repeatable way.
const prompt = `You are on the SEC website looking at a search for the latest filings.
Please extract the company names and their corresponding CIK numbers (which follow the company name in parentheses) from the search results table.
Get only the ones where the form type is S-1 and not S-1/A.
Company names might contain characters like backslashes, which should always be escaped.

Examples:

- "S-1 | Some Company Inc (0001234567)" should produce a result '{ "companyName": "Some Company Inc", "cik": "0001234567", "formType": "S-1" }'.
- "S-1/A | Another Company Inc (0009876543)" should be not be included because the form type is S-1/A.
- "S-1 | Foo Inc \\D\\E (0002468024)" should produce a result with the backslashes in the company name escaped: '{ "companyName": "Foo Inc \\\\D\\\\E, "cik": "0002468024", "formType": "S-1" }'.

Please produce a list of results using the JSON schema below. If you are unable to do so, use the failure field to describe the reason for the failure.

{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "oneOf": [
        {
        "properties": {
            "results": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                "companyName": {
                    "type": "string"
                },
                "cik": {
                    "type": "string"
                },
                "formType": {
                    "type": "string"
                }
                },
                "required": ["companyName", "cik", "formType"]
            }
            }
        },
        "required": ["results"]
        },
        {
        "properties": {
            "failure": {
            "type": "string"
            }
        },
        "required": ["failure"]
        }
    ]
}`;

const extractedContent = await airtopClient.windows.promptContent(sessionId, windowInfo.data.windowId, {
  prompt: prompt,
});

Utilizing Airtop's AI prompt feature, the script requests data about SEC filings, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results from the SEC database, which may contain multiple pages of filings by passing the followPaginationLinks parameter to the promptContent method.


Process the extracted content
modelResponse = JSON.parse(extractedContent.data.modelResponse);

if (modelResponse.failure) {
  console.log(`Airtop AI reported failure: ${modelResponse.failure}`);
  throw new Error(modelResponse.failure);
}

// Format the results as a list instead of a table
const formattedResults = modelResponse.results
  .map(
    (item: { companyName: string; cik: string }, index: number) =>
      `${index + 1}. <b>${item.companyName}</b>\n   CIK: <code>${item.cik}</code>`,
  )
  .join('\n\n');

const message = `<b>SEC EDGAR S-1 Results</b>\n\n${formattedResults}`;

await sendTelegramMessage(message);



Clean Up
Finally, the script closes the browser and terminates the session.
try {
  await browser.close();
} catch (err) {}
if (sessionId) {
  await airtopClient.sessions.terminate(sessionId);
}
console.log('Session deleted');
process.exit(0);


",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#script-walkthrough",
    "title": "Script Walkthrough",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
      {
        "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
        "title": "Overview",
      },
    ],
    "description": "To run the script, execute the following command in your terminal:
npm run start
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#running-the-script",
    "title": "Running the Script",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
      "Overview",
    ],
    "content": "To run the script, execute the following command in your terminal:
npm run start
",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#running-the-script",
    "title": "Running the Script",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "recipes/recipes/summarize-a-webpage",
        "title": "Recipes",
      },
      {
        "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#overview",
        "title": "Overview",
      },
    ],
    "description": "This recipe demonstrates how Airtop can be utilized to automate tasks involving plain-text data extraction. By leveraging Airtop's AI prompt feature and pagination handling capabilities, you can efficiently retrieve and process information about S-1 filings from the SEC database. The script showcases how to interact with complex data sources, parse JSON responses, and format the extracted information for easy readability and further analysis.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#summary",
    "title": "Summary",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Recipes",
      "Overview",
    ],
    "content": "This recipe demonstrates how Airtop can be utilized to automate tasks involving plain-text data extraction. By leveraging Airtop's AI prompt feature and pagination handling capabilities, you can efficiently retrieve and process information about S-1 filings from the SEC database. The script showcases how to interact with complex data sources, parse JSON responses, and format the extracted information for easy readability and further analysis.",
    "indexSegmentId": "0",
    "slug": "recipes/recipes/scrape-the-sec-database-for-recent-s-1-filings#summary",
    "title": "Summary",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [],
    "description": "Welcome to our API reference. We currently offer a RESTful API, as well as Typescript/NodeJS and Python SDKs to use in your applications.

If you have any other languages that you would like us to support, please [reach out to us](mailto:support@airtop.ai).

<CardGroup cols={4}>
  <Card
    title="Node.js SDK"
    href="https://github.com/airtop-ai/airtop-node-sdk"
    icon={<img src="https://cdn.brandfetch.io/idKX_Hb7va/theme/dark/logo.svg" alt="Typescript logo" />}
  >
    <a href="https://github.com/airtop-ai/airtop-node-sdk" style="text-decoration: underline; color: #ffffff;">Github</a>&nbsp;
    <a href="https://www.npmjs.com/package/@airtop/sdk" style="text-decoration: underline; color: #ffffff;">NPM</a>
  </Card> 
  <Card
    title="Python SDK"
    href="https://github.com/airtop-ai/airtop-python-sdk"
    icon={<img src="https://cdn.brandfetch.io/idbpOFBgcc/theme/dark/logo.svg" alt="Python Logo" />}
  >
    <a href="https://github.com/airtop-ai/airtop-python-sdk" style="text-decoration: underline; color: #ffffff;">Github</a>&nbsp;
    <a href="https://pypi.org/project/airtop/" style="text-decoration: underline; color: #ffffff;">PyPI</a>
  </Card>
</CardGroup>",
    "indexSegmentId": "0",
    "slug": "api-reference/airtop-api",
    "title": "Airtop API",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [],
    "content": "Welcome to our API reference. We currently offer a RESTful API, as well as Typescript/NodeJS and Python SDKs to use in your applications.
If you have any other languages that you would like us to support, please reach out to us.
Github 
NPMGithub 
PyPI",
    "indexSegmentId": "0",
    "slug": "api-reference/airtop-api",
    "title": "Airtop API",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog",
        "title": "Changelog",
      },
      {
        "slug": "changelog/2024",
        "title": "2024",
      },
      {
        "slug": "changelog/11",
        "title": "November 1900",
      },
    ],
    "description": undefined,
    "indexSegmentId": "0",
    "slug": "changelog/2024/11/1",
    "title": "November 1, 2024",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Changelog",
      "2024",
      "November 1900",
    ],
    "content": "Support for custom residential proxies
Added support for custom residential proxies. You can now use your own residential proxies with Airtop and easily configure them to use upon session creation. For more information see the guide documentation for proxies.",
    "indexSegmentId": "0",
    "slug": "changelog/2024/11/1",
    "title": "November 1, 2024",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog",
        "title": "Changelog",
      },
      {
        "slug": "changelog/2024",
        "title": "2024",
      },
      {
        "slug": "changelog/11",
        "title": "November 1900",
      },
    ],
    "description": "Added support for custom residential proxies. You can now use your own residential proxies with Airtop and easily configure them to use upon session creation. For more information see the guide documentation for proxies.",
    "indexSegmentId": "0",
    "slug": "changelog/2024/11/1#support-for-custom-residential-proxies",
    "title": "Support for custom residential proxies",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Changelog",
      "2024",
      "November 1900",
    ],
    "content": "Added support for custom residential proxies. You can now use your own residential proxies with Airtop and easily configure them to use upon session creation. For more information see the guide documentation for proxies.",
    "indexSegmentId": "0",
    "slug": "changelog/2024/11/1#support-for-custom-residential-proxies",
    "title": "Support for custom residential proxies",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog",
        "title": "Changelog",
      },
      {
        "slug": "changelog/2024",
        "title": "2024",
      },
      {
        "slug": "changelog/10",
        "title": "October 1900",
      },
    ],
    "description": undefined,
    "indexSegmentId": "0",
    "slug": "changelog/2024/10/19",
    "title": "October 19, 2024",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Changelog",
      "2024",
      "October 1900",
    ],
    "content": "New Native Window Management
Added support for creating windows, loading URLs, and closing windows without having to use Puppeteer or Playwright. For more information see the guide documentation for windows.",
    "indexSegmentId": "0",
    "slug": "changelog/2024/10/19",
    "title": "October 19, 2024",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog",
        "title": "Changelog",
      },
      {
        "slug": "changelog/2024",
        "title": "2024",
      },
      {
        "slug": "changelog/10",
        "title": "October 1900",
      },
    ],
    "description": "Added support for creating windows, loading URLs, and closing windows without having to use Puppeteer or Playwright. For more information see the guide documentation for windows.",
    "indexSegmentId": "0",
    "slug": "changelog/2024/10/19#new-native-window-management",
    "title": "New Native Window Management",
    "type": "page-v4",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Changelog",
      "2024",
      "October 1900",
    ],
    "content": "Added support for creating windows, loading URLs, and closing windows without having to use Puppeteer or Playwright. For more information see the guide documentation for windows.",
    "indexSegmentId": "0",
    "slug": "changelog/2024/10/19#new-native-window-management",
    "title": "New Native Window Management",
    "type": "page-v3",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Sessions",
    ],
    "content": "
## Path Parameters

- /sessions
## Request

### Body

- configuration=type_:SessionConfigV1: baseProfileId=unknown Id of a profile to load into the session.
persistProfile=unknown Persist the profile.
proxy=unknown Proxy configuration.
timeoutMinutes=unknown Max length of session in minutes, after which it will terminate if not already deleted. ? Session configuration
## Response

Created

### Body

type_:SessionResponse: data=type_:ExternalSessionWithConnectionInfo: cdpUrl=unknown Url to connect to chrome devtools protocol port on the Airtop browser. Include the header 'Authorization: Bearer <api-key>.'
cdpWsUrl=unknown Websocket url to connect to the Airtop browser for CDP-based automation frameworks (e.g. Puppeteer or Playwright). Include the header 'Authorization: Bearer <airtop-api-key>.'
chromedriverUrl=unknown Websocket url to connect to the Airtop browser for webdriver-based automation frameworks (e.g. Selenium). Include the header 'Authorization: Bearer <airtop-api-key>.'
configuration=unknown Session configuration details.
currentUsage=unknown Current usage in minutes.
dateCreated=unknown Date the session was created.
id=unknown Id of the session.
lastActivity=unknown Date of the last activity.
profileId=unknown Id of a newly persisted profile.
status=unknown Session status.  
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create",
    "title": "Create a session",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request",
    "title": "Request",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
    ],
    "description": "Session configuration",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
    "title": "configuration",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "Max length of session in minutes, after which it will terminate if not already deleted.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.timeoutMinutes",
    "title": "timeoutMinutes",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "Proxy configuration.

Proxy configuration.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.proxy",
    "title": "proxy",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "Array of proxy configurations. Includes a domain pattern and a proxy configuration to assign proxies to specific domains.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.proxy",
    "title": "proxy",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
        "title": "configuration",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.proxy",
        "title": "proxy",
      },
    ],
    "description": "Configuration for a single custom proxy.

Configuration for a single custom proxy.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.proxy.Custom%20Proxy",
    "title": "Custom Proxy",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "Persist the profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.persistProfile",
    "title": "persistProfile",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "Id of a profile to load into the session.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#request.body.configuration.baseProfileId",
    "title": "baseProfileId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Id of a newly persisted profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.profileId",
    "title": "profileId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Date of the last activity.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.lastActivity",
    "title": "lastActivity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Date the session was created.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.dateCreated",
    "title": "dateCreated",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Current usage in minutes.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.currentUsage",
    "title": "currentUsage",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Websocket url to connect to the Airtop browser for webdriver-based automation frameworks (e.g. Selenium). Include the header 'Authorization: Bearer <airtop-api-key>.'",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.chromedriverUrl",
    "title": "chromedriverUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Websocket url to connect to the Airtop browser for CDP-based automation frameworks (e.g. Puppeteer or Playwright). Include the header 'Authorization: Bearer <airtop-api-key>.'",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.cdpWsUrl",
    "title": "cdpWsUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Url to connect to chrome devtools protocol port on the Airtop browser. Include the header 'Authorization: Bearer <api-key>.'",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.cdpUrl",
    "title": "cdpUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Session status.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Id of the session.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Session configuration details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration",
    "title": "configuration",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration",
        "title": "configuration",
      },
    ],
    "description": "Max length of session in minutes, after which it will terminate if not already deleted.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration.timeoutMinutes",
    "title": "timeoutMinutes",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration",
        "title": "configuration",
      },
    ],
    "description": "Persist the profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration.persistProfile",
    "title": "persistProfile",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Create a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration",
        "title": "configuration",
      },
    ],
    "description": "Id of a profile to load into the session.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/sessions/create#response.body.data.configuration.baseProfileId",
    "title": "baseProfileId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Sessions",
    ],
    "content": "Get a list of sessions by ID
## Path Parameters

- /sessions
## Query Parameters

- sessionIds=string? A comma-separated list of IDs of the sessions to retrieve.
- status=type_sessions:SessionsListRequestStatus: awaitingCapacity (),initializing (),running (),ended () Status of the session to get.? Status of the session to get.
- offset=long? Offset for pagination.
- limit=long? Limit for pagination.
## Response

OK

### Body

type_:SessionsResponse: data=type_:SessionsWithPagination: pagination=unknown Pagination details.
sessions=unknown List of sessions.  
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : OK",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list",
    "title": "Get a list of sessions",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "A comma-separated list of IDs of the sessions to retrieve.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.sessionIds",
    "title": "sessionIds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.sessionIds",
    "title": "sessionIds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Status of the session to get.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Status of the session to get.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.status.awaitingCapacity",
    "title": "awaitingCapacity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.status.initializing",
    "title": "initializing",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.status.running",
    "title": "running",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.status.ended",
    "title": "ended",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Offset for pagination.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.offset",
    "title": "offset",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.offset",
    "title": "offset",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Limit for pagination.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.limit",
    "title": "limit",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#request.query.limit",
    "title": "limit",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
    ],
    "description": "List of sessions.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.sessions",
    "title": "sessions",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
    ],
    "description": "List of sessions.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.sessions",
    "title": "sessions",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
    ],
    "description": "Pagination details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
    "title": "pagination",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.totalItems",
    "title": "totalItems",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.numberOfPages",
    "title": "numberOfPages",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.nextOffset",
    "title": "nextOffset",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.initialCount",
    "title": "initialCount",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.hasMore",
    "title": "hasMore",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.finalCount",
    "title": "finalCount",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.currentPage",
    "title": "currentPage",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination",
        "title": "pagination",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.body.data.pagination.currentLimit",
    "title": "currentLimit",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
    ],
    "description": "Not Found",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
    "title": "Not Found",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
    "title": "Not Found",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A URI reference to human-readable documentation for the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.type",
    "title": "type",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "HTTP status code",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A URI reference that identifies the specific occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.instance",
    "title": "instance",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A human-readable explanation specific to this occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.NotFound.detail",
    "title": "detail",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
    ],
    "description": "Unprocessable Entity",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
    "title": "Unprocessable Entity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
    "title": "Unprocessable Entity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A URI reference to human-readable documentation for the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.type",
    "title": "type",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "HTTP status code",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A URI reference that identifies the specific occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.instance",
    "title": "instance",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A human-readable explanation specific to this occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.UnprocessableEntity.detail",
    "title": "detail",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
    ],
    "description": "Internal Server Error",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
    "title": "Internal Server Error",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
    "title": "Internal Server Error",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A URI reference to human-readable documentation for the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.type",
    "title": "type",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "HTTP status code",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A URI reference that identifies the specific occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.instance",
    "title": "instance",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list",
        "title": "Get a list of sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A human-readable explanation specific to this occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/list#response.error.InternalServerError.detail",
    "title": "detail",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Sessions",
    ],
    "content": "Get a session by ID
## Path Parameters

- /sessions/
- id
## Response

OK

### Body

type_:SessionResponse: data=type_:ExternalSessionWithConnectionInfo: cdpUrl=unknown Url to connect to chrome devtools protocol port on the Airtop browser. Include the header 'Authorization: Bearer <api-key>.'
cdpWsUrl=unknown Websocket url to connect to the Airtop browser for CDP-based automation frameworks (e.g. Puppeteer or Playwright). Include the header 'Authorization: Bearer <airtop-api-key>.'
chromedriverUrl=unknown Websocket url to connect to the Airtop browser for webdriver-based automation frameworks (e.g. Selenium). Include the header 'Authorization: Bearer <airtop-api-key>.'
configuration=unknown Session configuration details.
currentUsage=unknown Current usage in minutes.
dateCreated=unknown Date the session was created.
id=unknown Id of the session.
lastActivity=unknown Date of the last activity.
profileId=unknown Id of a newly persisted profile.
status=unknown Session status.  
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : OK",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info",
    "title": "Get info for a session",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "Id of the session to get",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#request.path.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#request.path.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Id of a newly persisted profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.profileId",
    "title": "profileId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Date of the last activity.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.lastActivity",
    "title": "lastActivity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Date the session was created.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.dateCreated",
    "title": "dateCreated",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Current usage in minutes.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.currentUsage",
    "title": "currentUsage",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Websocket url to connect to the Airtop browser for webdriver-based automation frameworks (e.g. Selenium). Include the header 'Authorization: Bearer <airtop-api-key>.'",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.chromedriverUrl",
    "title": "chromedriverUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Websocket url to connect to the Airtop browser for CDP-based automation frameworks (e.g. Puppeteer or Playwright). Include the header 'Authorization: Bearer <airtop-api-key>.'",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.cdpWsUrl",
    "title": "cdpWsUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Url to connect to chrome devtools protocol port on the Airtop browser. Include the header 'Authorization: Bearer <api-key>.'",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.cdpUrl",
    "title": "cdpUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Session status.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Id of the session.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Session configuration details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration",
    "title": "configuration",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration",
        "title": "configuration",
      },
    ],
    "description": "Max length of session in minutes, after which it will terminate if not already deleted.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration.timeoutMinutes",
    "title": "timeoutMinutes",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration",
        "title": "configuration",
      },
    ],
    "description": "Persist the profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration.persistProfile",
    "title": "persistProfile",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration",
        "title": "configuration",
      },
    ],
    "description": "Id of a profile to load into the session.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.body.data.configuration.baseProfileId",
    "title": "baseProfileId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
    ],
    "description": "Not Found",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
    "title": "Not Found",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
    "title": "Not Found",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A URI reference to human-readable documentation for the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.type",
    "title": "type",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "HTTP status code",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A URI reference that identifies the specific occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.instance",
    "title": "instance",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound",
        "title": "Not Found",
      },
    ],
    "description": "A human-readable explanation specific to this occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.NotFound.detail",
    "title": "detail",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
    ],
    "description": "Unprocessable Entity",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
    "title": "Unprocessable Entity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
    "title": "Unprocessable Entity",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A URI reference to human-readable documentation for the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.type",
    "title": "type",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "HTTP status code",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A URI reference that identifies the specific occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.instance",
    "title": "instance",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity",
        "title": "Unprocessable Entity",
      },
    ],
    "description": "A human-readable explanation specific to this occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.UnprocessableEntity.detail",
    "title": "detail",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
    ],
    "description": "Internal Server Error",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
    "title": "Internal Server Error",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
    "title": "Internal Server Error",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A URI reference to human-readable documentation for the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.type",
    "title": "type",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "HTTP status code",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A URI reference that identifies the specific occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.instance",
    "title": "instance",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "Optional list of individual error details",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info",
        "title": "Get info for a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error",
        "title": "Errors",
      },
      {
        "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError",
        "title": "Internal Server Error",
      },
    ],
    "description": "A human-readable explanation specific to this occurrence of the problem.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/sessions/get-info#response.error.InternalServerError.detail",
    "title": "detail",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Sessions",
    ],
    "content": "Ends a session by ID. If a given session id does not exist within the organization, it is ignored.
## Path Parameters

- /sessions/
- id",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/sessions/terminate",
    "title": "Ends a session",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/terminate",
        "title": "Ends a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/terminate#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/terminate#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "ID of the session to delete.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/sessions/terminate#request.path.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/sessions/create",
        "title": "Sessions",
      },
      {
        "slug": "api-reference/airtop-api/sessions/terminate",
        "title": "Ends a session",
      },
      {
        "slug": "api-reference/airtop-api/sessions/terminate#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/sessions/terminate#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "id",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/sessions/terminate#request.path.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows/
- windowId
- /summarize-content
## Request

### Body

- clientRequestId=string? 
- configuration=type_:SummaryConfig: outputSchema=unknown JSON schema defining the structure of the output. If not provided, the format of the output might vary. ? Request configuration
- costThresholdCredits=long? A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a
threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified,
but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).
- prompt=string? An optional prompt providing the Airtop AI model with additional direction or constraints about the summary (such as desired
length).
- timeThresholdSeconds=long? A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but
a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not
specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not
recommended).

This setting does not extend the maximum session duration provided at the time of session creation.
## Response

Created

### Body

type_:AiPromptResponse: data=type_:AiResponseEnvelope: modelResponse=unknown   
errors=List<unknown>? 
meta=type_:ExternalSessionAiResponseMetadata: clientProvided=unknown 
requestId=unknown 
status=unknown Outcome of the operation.
usage=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content",
    "title": "Get a summary of content in a browser window",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "The session id for the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "The Airtop window id of the browser window to summarize.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request",
    "title": "Request",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
    ],
    "description": "A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).

This setting does not extend the maximum session duration provided at the time of session creation.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.body.timeThresholdSeconds",
    "title": "timeThresholdSeconds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
    ],
    "description": "An optional prompt providing the Airtop AI model with additional direction or constraints about the summary (such as desired length).",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.body.prompt",
    "title": "prompt",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
    ],
    "description": "A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.body.costThresholdCredits",
    "title": "costThresholdCredits",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
    ],
    "description": "Request configuration",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.body.configuration",
    "title": "configuration",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "JSON schema defining the structure of the output. If not provided, the format of the output might vary.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.body.configuration.outputSchema",
    "title": "outputSchema",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#request",
        "title": "Request",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#request.body.clientRequestId",
    "title": "clientRequestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.clientProvided",
    "title": "clientProvided",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.clientProvided",
        "title": "clientProvided",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.clientProvided.clientRequestId",
    "title": "clientRequestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.usage",
    "title": "usage",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.usage",
        "title": "usage",
      },
    ],
    "description": "The id of the request",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.usage.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.usage",
        "title": "usage",
      },
    ],
    "description": "The credit usage for this request",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.usage.credits",
    "title": "credits",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": "Outcome of the operation.

Outcome of the operation.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status.success",
    "title": "success",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status.partial",
    "title": "partial",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.meta.status.failure",
    "title": "failure",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Get a summary of content in a browser window",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content#response.body.data",
        "title": "data",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/summarize-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/summarize-content#response.body.data.modelResponse",
    "title": "modelResponse",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows/
- windowId
- /scrape-content
## Request

### Body

- clientRequestId=string? 
- costThresholdCredits=long? A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a
threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified,
but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).
- timeThresholdSeconds=long? A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but
a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not
specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not
recommended).

This setting does not extend the maximum session duration provided at the time of session creation.
## Response

Created

### Body

type_:ScrapeResponse: data=type_:ScrapeResponseEnvelope: modelResponse=unknown The response from the Airtop AI model.  
errors=List<unknown>? 
meta=type_:ExternalSessionAiResponseMetadata: clientProvided=unknown 
requestId=unknown 
status=unknown Outcome of the operation.
usage=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content",
    "title": "Scrape a window",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "The session id for the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "The Airtop window id of the browser window to scrape.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request",
    "title": "Request",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
    ],
    "description": "A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).

This setting does not extend the maximum session duration provided at the time of session creation.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.body.timeThresholdSeconds",
    "title": "timeThresholdSeconds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
    ],
    "description": "A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.body.costThresholdCredits",
    "title": "costThresholdCredits",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#request",
        "title": "Request",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#request.body.clientRequestId",
    "title": "clientRequestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.clientProvided",
    "title": "clientProvided",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.clientProvided",
        "title": "clientProvided",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.clientProvided.clientRequestId",
    "title": "clientRequestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.usage",
    "title": "usage",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.usage",
        "title": "usage",
      },
    ],
    "description": "The id of the request",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.usage.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.usage",
        "title": "usage",
      },
    ],
    "description": "The credit usage for this request",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.usage.credits",
    "title": "credits",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": "Outcome of the operation.

Outcome of the operation.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status.success",
    "title": "success",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status.partial",
    "title": "partial",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.meta.status.failure",
    "title": "failure",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data",
        "title": "data",
      },
    ],
    "description": "The response from the Airtop AI model.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse",
    "title": "modelResponse",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse",
        "title": "modelResponse",
      },
    ],
    "description": "Any text that was highlighted in the browser window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse.selectedText",
    "title": "selectedText",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse",
        "title": "modelResponse",
      },
    ],
    "description": "The title of the browser page.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse.title",
    "title": "title",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content",
        "title": "Scrape a window",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data",
        "title": "data",
      },
      {
        "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse",
        "title": "modelResponse",
      },
    ],
    "description": "The scraped content of the browser window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/scrape-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/scrape-content#response.body.data.modelResponse.scrapedContent",
    "title": "scrapedContent",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows/
- windowId
- /prompt-content
## Request

### Body

- clientRequestId=string? 
- configuration=type_:PromptContentConfig: outputSchema=unknown JSON schema defining the structure of the output. If not provided, the format of the output might vary. ? Request configuration
- costThresholdCredits=long? A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a
threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified,
but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).
- followPaginationLinks=boolean? Make a best effort attempt to load more content items than are originally displayed on the page, e.g. by following pagination
links, clicking controls to load more content, utilizing infinite scrolling, etc. This can be quite a bit more costly, but may be
necessary for sites that require additional interaction to show the needed results. You can provide constraints in your prompt
(e.g. on the total number of pages or results to consider).
- prompt=string The prompt to submit about the content in the browser window.
- timeThresholdSeconds=long? A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but
a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not
specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not
recommended).

This setting does not extend the maximum session duration provided at the time of session creation.
## Response

Created

### Body

type_:AiPromptResponse: data=type_:AiResponseEnvelope: modelResponse=unknown   
errors=List<unknown>? 
meta=type_:ExternalSessionAiResponseMetadata: clientProvided=unknown 
requestId=unknown 
status=unknown Outcome of the operation.
usage=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content",
    "title": "Submit a prompt about the content in a specific browser window.",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "The session id for the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "The Airtop window id of the browser window to target with an Airtop AI prompt.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request",
    "title": "Request",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
    ],
    "description": "A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).

This setting does not extend the maximum session duration provided at the time of session creation.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.timeThresholdSeconds",
    "title": "timeThresholdSeconds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
    ],
    "description": "Make a best effort attempt to load more content items than are originally displayed on the page, e.g. by following pagination links, clicking controls to load more content, utilizing infinite scrolling, etc. This can be quite a bit more costly, but may be necessary for sites that require additional interaction to show the needed results. You can provide constraints in your prompt (e.g. on the total number of pages or results to consider).",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.followPaginationLinks",
    "title": "followPaginationLinks",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
    ],
    "description": "A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.costThresholdCredits",
    "title": "costThresholdCredits",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
    ],
    "description": "Request configuration",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.configuration",
    "title": "configuration",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request.body.configuration",
        "title": "configuration",
      },
    ],
    "description": "JSON schema defining the structure of the output. If not provided, the format of the output might vary.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.configuration.outputSchema",
    "title": "outputSchema",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.clientRequestId",
    "title": "clientRequestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#request",
        "title": "Request",
      },
    ],
    "description": "The prompt to submit about the content in the browser window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#request.body.prompt",
    "title": "prompt",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.clientProvided",
    "title": "clientProvided",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.clientProvided",
        "title": "clientProvided",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.clientProvided.clientRequestId",
    "title": "clientRequestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.usage",
    "title": "usage",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.usage",
        "title": "usage",
      },
    ],
    "description": "The id of the request",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.usage.id",
    "title": "id",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.usage",
        "title": "usage",
      },
    ],
    "description": "The credit usage for this request",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.usage.credits",
    "title": "credits",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
    ],
    "description": "Outcome of the operation.

Outcome of the operation.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status.success",
    "title": "success",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status.partial",
    "title": "partial",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.meta.status.failure",
    "title": "failure",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content",
        "title": "Submit a prompt about the content in a specific browser window.",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/prompt-content#response.body.data",
        "title": "data",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
      {
        "type": "literal",
        "value": "/prompt-content",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/prompt-content#response.body.data.modelResponse",
    "title": "modelResponse",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows
## Request

### Body

- screenResolution=string? Affects the live view configuration. By default, a live view will fill the parent frame (or local window if loaded directly) when
initially loaded, causing the browser window to be resized to match. This parameter can be used to instead configure the returned
liveViewUrl so that the live view is loaded with fixed dimensions (e.g. 1280x720), resizing the browser window to match, and then
disallows any further resizing from the live view.
- url=string? Initial url to navigate to
- waitUntil=type_windows:CreateWindowInputV1BodyWaitUntil: load (),domContentLoaded (),complete () Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.? Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded.
'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded
it's dom and assets.
- waitUntilTimeoutSeconds=long? Maximum time in seconds to wait for the specified loading event to occur before timing out.
## Response

Created

### Body

type_:WindowIdResponse: data=type_:WindowId: targetId=unknown CDP Window target ID
windowId=unknown Airtop window ID of the browser window  
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create",
    "title": "Creates a new browser window in a session",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "ID of the session that owns the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request",
    "title": "Request",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
    ],
    "description": "Maximum time in seconds to wait for the specified loading event to occur before timing out.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.waitUntilTimeoutSeconds",
    "title": "waitUntilTimeoutSeconds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
    ],
    "description": "Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.

Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil",
    "title": "waitUntil",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil",
        "title": "waitUntil",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil.load",
    "title": "load",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil",
        "title": "waitUntil",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil.domContentLoaded",
    "title": "domContentLoaded",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil",
        "title": "waitUntil",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.waitUntil.complete",
    "title": "complete",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
    ],
    "description": "Initial url to navigate to",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.url",
    "title": "url",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#request",
        "title": "Request",
      },
    ],
    "description": "Affects the live view configuration. By default, a live view will fill the parent frame (or local window if loaded directly) when initially loaded, causing the browser window to be resized to match. This parameter can be used to instead configure the returned liveViewUrl so that the live view is loaded with fixed dimensions (e.g. 1280x720), resizing the browser window to match, and then disallows any further resizing from the live view.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#request.body.screenResolution",
    "title": "screenResolution",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "Airtop window ID of the browser window",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.data.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/create",
        "title": "Creates a new browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/create#response.body.data",
        "title": "data",
      },
    ],
    "description": "CDP Window target ID",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/create#response.body.data.targetId",
    "title": "targetId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows/
- windowId
## Query Parameters

- includeNavigationBar=boolean? Affects the live view configuration. A navigation bar is not shown in the live view of a browser by default. Set this to true to
configure the returned liveViewUrl so that a navigation bar is rendered, allowing users to easily navigate the browser to other
pages from the live view.
- disableResize=boolean? Affects the live view configuration. Set to true to configure the returned liveViewUrl so that the ability to resize the browser
window from the live view is disabled (resizing is allowed by default). Note that, at initial load, the live view will
automatically fill the parent frame (or local window if loaded directly) and cause the browser window to be resized to match. This
parameter does not affect that initial load behavior. See screenResolution for a way to set a fixed size for the live view.
- screenResolution=string? Affects the live view configuration. By default, a live view will fill the parent frame (or local window if loaded directly) when
initially loaded, causing the browser window to be resized to match. This parameter can be used to instead configure the returned
liveViewUrl so that the live view is loaded with fixed dimensions (e.g. 1280x720), resizing the browser window to match, and then
disallows any further resizing from the live view.
## Response

Created

### Body

type_:WindowResponse: data=type_:Window: liveViewUrl=unknown Url for loading a browser window live view that is configured according to the request options like screenResolution, disableResize, etc.
windowId=unknown Airtop window ID of the browser window  
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info",
    "title": "Get information about a browser window in a session",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Affects the live view configuration. A navigation bar is not shown in the live view of a browser by default. Set this to true to configure the returned liveViewUrl so that a navigation bar is rendered, allowing users to easily navigate the browser to other pages from the live view.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.query.includeNavigationBar",
    "title": "includeNavigationBar",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.query.includeNavigationBar",
    "title": "includeNavigationBar",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Affects the live view configuration. Set to true to configure the returned liveViewUrl so that the ability to resize the browser window from the live view is disabled (resizing is allowed by default). Note that, at initial load, the live view will automatically fill the parent frame (or local window if loaded directly) and cause the browser window to be resized to match. This parameter does not affect that initial load behavior. See screenResolution for a way to set a fixed size for the live view.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.query.disableResize",
    "title": "disableResize",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.query.disableResize",
    "title": "disableResize",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "Affects the live view configuration. By default, a live view will fill the parent frame (or local window if loaded directly) when initially loaded, causing the browser window to be resized to match. This parameter can be used to instead configure the returned liveViewUrl so that the live view is loaded with fixed dimensions (e.g. 1280x720), resizing the browser window to match, and then disallows any further resizing from the live view.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.query.screenResolution",
    "title": "screenResolution",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.query.screenResolution",
    "title": "screenResolution",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "ID of the session that owns the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "ID of the browser window, which can either be a normal AirTop windowId or a [CDP TargetId](https://chromedevtools.github.io/devtools-protocol/tot/Target/#type-TargetID) from a browser automation library like Puppeteer (typically associated with the page or main frame). Our SDKs will handle retrieving a TargetId for you from various popular browser automation libraries, but we also have details in our guides on how to do it manually.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Airtop window ID of the browser window",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.data.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info",
        "title": "Get information about a browser window in a session",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/get-window-info#response.body.data",
        "title": "data",
      },
    ],
    "description": "Url for loading a browser window live view that is configured according to the request options like screenResolution, disableResize, etc.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/windows/get-window-info#response.body.data.liveViewUrl",
    "title": "liveViewUrl",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows/
- windowId
## Request

### Body

- url=string Url to navigate to
- waitUntil=type_windows:WindowLoadUrlV1BodyWaitUntil: load (),domContentLoaded (),complete () Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.? Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded.
'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded
it's dom and assets.
- waitUntilTimeoutSeconds=long? Maximum time in seconds to wait for the specified loading event to occur before timing out.
## Response

Created

### Body

type_:EmptyResponse: data=type_:EmptyResponseJson: success=unknown Indicates if the operations was successful  
errors=List<unknown>? 
meta=type_:EnvelopeStatusDefaultMeta: requestId=unknown 
status=unknown   
warnings=List<unknown>?  : Created",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url",
    "title": "Loads a specified url on a given window",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "ID of the session that owns the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "Airtop window ID of the browser window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request",
    "title": "Request",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
    ],
    "description": "Maximum time in seconds to wait for the specified loading event to occur before timing out.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntilTimeoutSeconds",
    "title": "waitUntilTimeoutSeconds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
    ],
    "description": "Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.

Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil",
    "title": "waitUntil",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil",
        "title": "waitUntil",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil.load",
    "title": "load",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil",
        "title": "waitUntil",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil.domContentLoaded",
    "title": "domContentLoaded",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil",
        "title": "waitUntil",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.body.waitUntil.complete",
    "title": "complete",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#request",
        "title": "Request",
      },
    ],
    "description": "Url to navigate to",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#request.body.url",
    "title": "url",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status.success",
    "title": "success",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status.%20failure",
    "title": " failure",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta",
        "title": "meta",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status",
        "title": "status",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.status.%20timeout",
    "title": " timeout",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url",
        "title": "Loads a specified url on a given window",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/load-url#response.body.data",
        "title": "data",
      },
    ],
    "description": "Indicates if the operations was successful",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "POST",
    "slug": "api-reference/airtop-api/windows/load-url#response.body.data.success",
    "title": "success",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Windows",
    ],
    "content": "
## Path Parameters

- /sessions/
- sessionId
- /windows/
- windowId
## Response

OK

### Body

type_:WindowIdResponse: data=type_:WindowId: targetId=unknown CDP Window target ID
windowId=unknown Airtop window ID of the browser window  
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : OK",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close",
    "title": "Close the specified window",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "ID of the session that owns the window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#request.path.sessionId",
    "title": "sessionId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": "Airtop window ID of the browser window.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#request.path",
        "title": "Path Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#request.path.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.data",
        "title": "data",
      },
    ],
    "description": "Airtop window ID of the browser window",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.data.windowId",
    "title": "windowId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/windows/summarize-content",
        "title": "Windows",
      },
      {
        "slug": "api-reference/airtop-api/windows/close",
        "title": "Close the specified window",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/windows/close#response.body.data",
        "title": "data",
      },
    ],
    "description": "CDP Window target ID",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/sessions/",
      },
      {
        "type": "pathParameter",
        "value": "sessionId",
      },
      {
        "type": "literal",
        "value": "/windows/",
      },
      {
        "type": "pathParameter",
        "value": "windowId",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/windows/close#response.body.data.targetId",
    "title": "targetId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Profiles",
    ],
    "content": "Get profiles matching by id
## Path Parameters

- /profiles
## Query Parameters

- profileIds=string? A comma-separated list of profile ids.
## Response

OK

### Body

type_:ProfilesResponse: data=List<unknown>? 
errors=List<unknown>? 
meta=type_:EnvelopeDefaultMeta: requestId=unknown   
warnings=List<unknown>?  : OK",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get",
    "title": "Get profiles",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "A comma-separated list of profile ids.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#request.query.profileIds",
    "title": "profileIds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#request.query.profileIds",
    "title": "profileIds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response",
    "title": "Response",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.warnings",
    "title": "warnings",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.warnings.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.warnings.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.warnings",
        "title": "warnings",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.warnings.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.errors",
    "title": "errors",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Any associated details.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.errors.details",
    "title": "details",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Issue code.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.errors.code",
    "title": "code",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.errors",
        "title": "errors",
      },
    ],
    "description": "Message describing the issue.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.errors.message",
    "title": "message",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.data",
    "title": "data",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.data",
        "title": "data",
      },
    ],
    "description": "Status of the profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.data.status",
    "title": "status",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.data",
        "title": "data",
      },
    ],
    "description": "Id of the profile.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.data.profileId",
    "title": "profileId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.meta",
    "title": "meta",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Get profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response",
        "title": "Response",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get#response.body.meta",
        "title": "meta",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "GET",
    "slug": "api-reference/airtop-api/profiles/get#response.body.meta.requestId",
    "title": "requestId",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "breadcrumbs": [
      "Airtop API",
      "Profiles",
    ],
    "content": "Delete profiles matching by id
## Path Parameters

- /profiles
## Query Parameters

- profileIds=string? A comma-separated list of profile ids.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/profiles/delete",
    "title": "Delete profiles",
    "type": "endpoint-v3",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/delete",
        "title": "Delete profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/delete#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/profiles/delete#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": "A comma-separated list of profile ids.",
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/profiles/delete#request.query.profileIds",
    "title": "profileIds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
  {
    "availability": undefined,
    "breadcrumbs": [
      {
        "slug": "api-reference/airtop-api",
        "title": "Airtop API",
      },
      {
        "slug": "api-reference/airtop-api/profiles/get",
        "title": "Profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/delete",
        "title": "Delete profiles",
      },
      {
        "slug": "api-reference/airtop-api/profiles/delete#request",
        "title": "Request",
      },
      {
        "slug": "api-reference/airtop-api/profiles/delete#request.query",
        "title": "Query Parameters",
      },
    ],
    "description": undefined,
    "endpointPath": [
      {
        "type": "literal",
        "value": "/profiles",
      },
    ],
    "extends": undefined,
    "indexSegmentId": "0",
    "isResponseStream": false,
    "method": "DELETE",
    "slug": "api-reference/airtop-api/profiles/delete#request.query.profileIds",
    "title": "profileIds",
    "type": "endpoint-field-v1",
    "version": undefined,
  },
]