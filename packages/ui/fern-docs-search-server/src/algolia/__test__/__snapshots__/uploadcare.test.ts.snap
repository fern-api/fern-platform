[
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Some explanation










Uploadcare makes simple, powerful, developer-friendly building blocks to handle file uploading, storage, processing, and delivery. You get a complete file handling infrastructure.",
    "description": "Uploadcare makes simple, powerful, developer-friendly building blocks to handle file uploading, storage, processing, and delivery. You get a complete file handling infrastructure.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.intro",
    "org_id": "test",
    "pathname": "/docs/introduction/intro",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Intro",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "description": "Uploadcare provides companies with simple, powerful, developer-friendly building blocks to handle file uploading, processing, and delivery. A complete out-of-the-box solution, built for engineers by engineers.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploadcare quick start",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "When building a website or an app, you'll need to handle uploading, storing,
processing, and delivering various files, either from you, or from your users.
We have various uploading methods, a few storage options, an API to manage
files, and a CDN with on-the-fly processing capabilities. Everything is
compliant with numerous international regulations.
In this quickstart we'll show you our [File Uploader][file-uploader] and
[image processing operations][transformations-image-list]. We will also cover the rest of our
features at the end of this article.",
    "domain": "test.com",
    "hash": "#quick-start",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start",
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-quick-start",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Quick start",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "domain": "test.com",
    "hash": "#step-1-uploading",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start",
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start",
      },
      "h2": {
        "id": "step-1-uploading",
        "title": "Step 1. Uploading",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-step-1-uploading",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Step 1. Uploading",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "code_snippets": [
      {
        "code": "<lr-config
  ctx-name="my-uploader"
  pubkey="YOUR_PUBLIC_KEY"
></lr-config>
<lr-file-uploader-regular
  css-src="https://cdn.jsdelivr.net/npm/@uploadcare/blocks@{{__BLOCKS_VERSION__}}/web/lr-file-uploader-regular.min.css"
  ctx-name="my-uploader"
></lr-file-uploader-regular>",
        "lang": "html",
      },
    ],
    "content": "You can either install File Uploader from CDN, or via NPM.






CDN

NPM









File Uploader can be presented in [a few ways][file-uploader-solutions], e.g.
regularly, inline or minimalistic.
Regular File Uploader:
Where lr-config is a configuration block, and lr-file-uploader-regular is a File Uploader block.
ctx-name attribute is used to wire up the configuration block with the File Uploader block.
css-src attribute is used to specify basic CSS styles.
To dive further, check out [configuration][file-uploader-configuration] guide.
Here you can find examples how to integrate it into your stack of choice:
[React][file-uploader-react-git]

[Angular][file-uploader-angular-git]

[Vue][file-uploader-vue-git]",
    "domain": "test.com",
    "hash": "#installation-and-configuration",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start",
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start",
      },
      "h2": {
        "id": "step-1-uploading",
        "title": "Step 1. Uploading",
      },
      "h3": {
        "id": "installation-and-configuration",
        "title": "Installation and configuration",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-installation-and-configuration",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Installation and configuration",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "code_snippets": [
      {
        "code": "window.addEventListener('LR_UPLOAD_FINISH', (e) => {
  console.log(e.detail);
});",
        "lang": "js",
      },
    ],
    "content": "Once a file is uploaded, it goes to your Uploadcare storage and instantly
becomes available on CDN.


(By default, Upload API doesn't store the files forever. There is a 24-hour
window when you should decide whether to store uploaded files or not. But all
of our official libraries, including File Uploader, inherit the
[auto-store setting][project-settings-storage] from your project, where it's
set to ON by default. You can read more about [storage behavior][storage-store]).
You can get the UUID of the uploaded files immediately on upload. For example:
Please refer to the [Events][file-uploader-events] page to view the complete list of available events.
We recommend saving UUIDs instead of CDN URLs because this will let you
process these files easier later on.",
    "domain": "test.com",
    "hash": "#step-2-storage--cdn",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start",
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start",
      },
      "h2": {
        "id": "step-2-storage--cdn",
        "title": "Step 2. Storage & CDN",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-step-2-storage--cdn",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Step 2. Storage & CDN",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "code_snippets": [
      {
        "code": "https://ucarecdn.com/0e679e26-781b-4a66-b760-b2125f8c862c/
           -/resize/1200x/
           -/blur_region/faces/
           -/overlay/2f44b1c2-f71a-4f84-bbe2-6d96c7e35a2d/100p,100p/",
      },
    ],
    "content": "You can add image processing operations by including directives in the CDN URL:


Imagine you're building a service with a lot of street photos:
You'll need to optimize the size and quality of the images for page load time.

You'll have to blur the faces on the photos to comply with privacy laws.

You'll want to add your watermark to every picture.


Construct the value of the image src attribute template, adding the operations
you pick, and use this template for every street photo in your project:


See the full list of [image processing operations][image-operations-list].",
    "domain": "test.com",
    "hash": "#step-3-processing",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start",
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start",
      },
      "h2": {
        "id": "step-3-processing",
        "title": "Step 3. Processing",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-step-3-processing",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Step 3. Processing",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Lear more about [uploading files][uploading-files] options.

Integrate Uploadcare into your mobile app with [native SDKs][integrations].

Implement [secure workflows][security] for uploading and delivering files.

[Fetch and deliver remote files][delivery-proxy] without explicitly uploading files.

Add [arbitrary metadata][file-metadata], [remove image background][remove-bg],
[recognize objects][intelligence-object-recognition], [process videos][transformations-video],
[convert documents][transformations-docs], and [detect viruses][malware-protection].

Explore [project settings][settings-projects].

[Migrate][migro-guide] your files to Uploadcare.",
    "domain": "test.com",
    "hash": "#more-features",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start",
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start",
      },
      "h2": {
        "id": "more-features",
        "title": "More features",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-more-features",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "More features",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "description": "Learn how Uploadcare can handle critical user data, including critical information in-line with the GDPR/CCPA and HIPAA compliances needed to operate in the EU and US legislation respectively.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Security and compliance",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "At Uploadcare we honor the safety of personal and business-sensitive information
and implement compliancy with GDPR, HIPAA and other standards and regulations.
Uploadcare provides you with advanced privacy features to upload, access and
manage your content in a secure way.",
    "domain": "test.com",
    "hash": "#security",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-security",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Security",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Control who and when can upload files. It prevents from uploading files using a
Public API key only. You'll have to generate a security token on the backend
to upload a file. [Signed uploads][secure-uploads] work for a particular
Uploadcare project.",
    "domain": "test.com",
    "hash": "#signed-uploads",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "signed-uploads",
        "title": "Signed uploads",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-signed-uploads",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Signed uploads",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Control who and when can request files. Enabling this feature limits access to
your project files. A user will require a token from your backend to access
the content.
[Signed URLs][secure-delivery] work in conjunction with custom domains.",
    "domain": "test.com",
    "hash": "#signed-urls",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "signed-urls",
        "title": "Signed URLs",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-signed-urls",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Signed URLs",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Customers are automatically protected against Distributed Denial of Service (DDoS).",
    "domain": "test.com",
    "hash": "#ddos-protection",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "ddos-protection",
        "title": "DDoS protection",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-ddos-protection",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "DDoS protection",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Enable [malware checking][malware-protection] for all uploaded files.",
    "domain": "test.com",
    "hash": "#malware-protection",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "malware-protection",
        "title": "Malware protection",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-malware-protection",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Malware protection",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Restrict [search engines][search-engine-indexing] to analyze and index content
in your project for global search: image and text.
Setup search engine indexing behavior for each of your projects.",
    "domain": "test.com",
    "hash": "#search-engine-indexing",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "search-engine-indexing",
        "title": "Search engine indexing",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-search-engine-indexing",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Search engine indexing",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Control who and when can call your webhook endpoint (URL). Without
verification, anyone can spoof a request sent to the webhook URL. The solution
is to sign each [webhook payload][secure-webhooks] with a secret.",
    "domain": "test.com",
    "hash": "#signed-webhooks",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "signed-webhooks",
        "title": "Signed webhooks",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-signed-webhooks",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Signed webhooks",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "HIPAA is US legislation providing data privacy and security provisions for
safeguarding electronic protected health information (ePHI). On our Enterprise
plan, Uploadcare can be configured to support [HIPAA compliant][guide-hipaa]
workflow.",
    "domain": "test.com",
    "hash": "#hipaa-guide",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "hipaa-guide",
        "title": "HIPAA guide",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-hipaa-guide",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "HIPAA guide",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Uploadcare is committed to complying with industry-standard privacy and security
measures and all applicable laws and regulations to keep customer and end-user
data safe and secure: SOC 2, HIPAA, GDPR. Learn more about it in our
[Trust Center][uc-trust].",
    "domain": "test.com",
    "hash": "#compliance",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance",
      },
      "h1": {
        "id": "security",
        "title": "Security",
      },
      "h2": {
        "id": "compliance",
        "title": "Compliance",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-compliance",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Compliance",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "description": "How Uploadcare account charges for Operations, Traffic & Storage usage.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploadcare billing",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "This page serves as a guide on Uploadcare billing process, explaining what
charges may apply to your Operations, Traffic,
and Storage usage.",
    "domain": "test.com",
    "hash": "#billing",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-billing",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Billing",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Think of operations as a credit balance that is spent depending on the complexity
of actions with your files using Uploadcare APIs: file uploading, image optimization
and transformations, video processing, document conversion, outcoming webhooks
and various API requests.
Any incoming API request or outgoing request ([webhooks][webhooks]) is considered
as 1 operation. However some advanced requests like background removal or
AVIF image optimization require more operations to be performed.",
    "domain": "test.com",
    "hash": "#operations",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-operations",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Operations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Every successful file upload results in an extra operation count for each 100 MB.
Note that the file size is rounded up to the closest number divisible by 100
for calculation.",
    "domain": "test.com",
    "hash": "#uploading-volume",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "uploading",
        "title": "Uploading",
      },
      "h4": {
        "id": "uploading-volume",
        "title": "Uploading volume",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-uploading-volume",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading volume",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "All uploaded files are screened for viruses.
Please note that a single additional operation is deducted for every 100 MB
scanned for viruses.",
    "domain": "test.com",
    "hash": "#malware-protection",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "uploading",
        "title": "Uploading",
      },
      "h4": {
        "id": "malware-protection",
        "title": "Malware protection",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-malware-protection",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Malware protection",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "The cost of uploading a 20 MB file:
1 operation for the API request.

1 operation due to rounding up the file size to 100 MB.

1 operation for the virus scan of 100 MB.


For a 250 MB file:
2 operations for the API request.

3 operations attributed to rounding the file size up to 300 MB.

3 operations for the virus scan of 300 MB.


Uploading a file larger than 100 MB requires 2 API requests.
Learn more about [Multipart uploading][uploading-files-multipart].",
    "domain": "test.com",
    "hash": "#examples",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "uploading",
        "title": "Uploading",
      },
      "h4": {
        "id": "examples",
        "title": "Examples",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-examples",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Examples",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "When requesting an image from the CDN, you can do a lot of things all at once.
You can resize, apply effects, and make it load faster, all in one go.
No matter how complicated your task is, or how many changes are included
in the URL, Uploadcare only counts it as one operation for each unique URL
per billing cycle. Please note that, in addition to operations,
CDN traffic related to your tasks is also taken into account.
There are certain tasks that require more computational power that will
result in additional operations being consumed:
Feature Operations per request 
[Image compression to AVIF format][transformations-image-format] 2 
[Animated images optimization][transformations-gif-to-video] 2 
[Image transformations with facial detection][face-detection-operations] 2 
[Background removal][remove-bg] 750",
    "domain": "test.com",
    "hash": "#image-processing",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "image-processing",
        "title": "Image processing",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-image-processing",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Image processing",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Adjust the size, optimize, and convert the image format to WebP:
1 operation for a unique URL.


Adjust the size, optimize, and convert the image format to AVIF:
1 operation for a unique URL.

1 additional operation for AVIF conversion.


Remove the background, add an overlay, and resize:
1 operation for a unique URL.

749 additional operations for background removal.",
    "domain": "test.com",
    "hash": "#examples-1",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "image-processing",
        "title": "Image processing",
      },
      "h4": {
        "id": "examples-1",
        "title": "Examples",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-examples-1",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Examples",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "When your users request a file, Uploadcare only counts the traffic if the
file is either the original or a cached version. However, if a file isn't
cached and needs processing—especially if that processing involves complex
transformations specified in the URL—it will use up additional operations
based on the complexity of the tasks.
When a file is requested, original or processed, it gets cached on CDN.
The lifespan of a file in the cache can vary depending on factors like
how frequently it's accessed. Popular files that are requested often tend
to stay longer. On the other hand, infrequently accessed files might be removed.",
    "domain": "test.com",
    "hash": "#delivery",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "delivery",
        "title": "Delivery",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-delivery",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Delivery",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Each API request counts as one operation.
But some actions can count as extra operations, depending on how complex they are:
Feature Operations 
[Detecting unsafe content in an image][unsafe-content] 40 per image 
[Processing a video][transformations-video] 100 per minute 
[Converting a document][transformations-docs] 100 per 50 MB 
[Auto-tagging an image][intelligence-object-recognition] 40 per image 

These operations affect your storage volume because each operation means
a new file is uploaded. But, they don't affect your traffic usage.",
    "domain": "test.com",
    "hash": "#file-management",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "file-management",
        "title": "File management",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-file-management",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File management",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Uploadcare calculates your operations and rounds up to the nearest thousand.
So, if you've executed 1700 operations, we'll account for it as 2000.",
    "domain": "test.com",
    "hash": "#billing-1",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "operations",
        "title": "Operations",
      },
      "h3": {
        "id": "billing-1",
        "title": "Billing",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-billing-1",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Billing",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Total amount of content that's been delivered from your account.
To track how much traffic you're using, just check out the
[Analytics][project-analytics] section in your Dashboard.",
    "domain": "test.com",
    "hash": "#traffic",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "traffic",
        "title": "Traffic",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-traffic",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Traffic",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Total size of all the files you have stored in your account.
Only the uploaded and stored files count towards this.
Actions like [CDN operations][delivery-operations] and
[image processing operations][transformations-image-list] don't consume your
storage space because the results are only cached on the CDN.
However, operations like video processing or document conversion do affect
your storage volume, as each operation results in a new file upload.
To monitor your storage usage, simply check the [Analytics][project-analytics]
section on your Dashboard.",
    "domain": "test.com",
    "hash": "#storage",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "storage",
        "title": "Storage",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-storage",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Storage",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Demo Pro Business Business Plus 
Operations 10,000 100,000 250,000 500,000 
Traffic 5 GB 75 GB 200 GB 400 GB 
Storage 1 GB 50 GB 125 GB 250 GB 
Max file size 10 MB 1 GB 10 GB 100 GB 
Team members Personal use only 3 4 5",
    "domain": "test.com",
    "hash": "#plans-and-limits",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "plans-and-limits",
        "title": "Plans and limits",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-plans-and-limits",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Plans and limits",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "content": "Beginning with the Pro plan, we offer a pay-as-you-go model for additional
usage, allowing you more flexibility and control over your usage.
Any additional usage will be automatically charged at the rates specified below:
 Demo Pro Business Business Plus 
1,000 operations Not allowed $0.50 $0.45 $0.40 
1 GB traffic Not allowed $0.50 $0.45 $0.40 
1 GB storage Not allowed $0.50 $0.45 $0.45 

If you're interested in custom pricing and annual commitment,
[contact our sales team][mail-sales].",
    "domain": "test.com",
    "hash": "#additional-resources",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing",
      },
      "h1": {
        "id": "billing",
        "title": "Billing",
      },
      "h2": {
        "id": "plans-and-limits",
        "title": "Plans and limits",
      },
      "h3": {
        "id": "additional-resources",
        "title": "Additional resources",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-additional-resources",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Additional resources",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "description": "Uploadcare provides Upload API and powerful file uploaders for your website or app with no hassle.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File uploading with Uploadcare",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "You can upload any file type, from almost any source, using a variety of upload optionsBuilt-in storage and CDN

Uploading acceleration network

Multipart uploading up to 5 TB per file

File analysis and moderation

Authenticated uploading process

Unlimited scalability on demand

API clients for popular platforms


Upload files from almost any source using API or beautiful UI file uploaders.
Receive and store: user-generated content, programmatically uploaded media,
large files to be later optimized, etc.
Once uploaded, files become instantly accessible on our CDN via their unique
and unguessable URLs. [Deliver][delivery] them with the set of image
optimization and transformation operations, or [manage][file-management] via
REST API.",
    "domain": "test.com",
    "hash": "#file-uploading",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare",
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-file-uploading",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File uploading",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Integrate our customizable uploading widget that provides a ton of features
and works in all modern browsers:


Our web and mobile uploading widgets:
[File Uploader][file-uploader] — our flagship uploader

[jQuery widget][jquery-widget]

[iOS uploading widget][swift-integration]

[Android uploading widget][android-integration]",
    "domain": "test.com",
    "hash": "#file-uploader",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare",
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading",
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Build custom uploading flow using Upload API directly or with an API client.






JavaScript

PHP

Python

Ruby

Swift

cUrl

























Check out our guide to the various methods of [uploading files][uploading-files]
and available integrations.",
    "domain": "test.com",
    "hash": "#upload-api",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare",
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading",
      },
      "h2": {
        "id": "upload-api",
        "title": "Upload API",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-upload-api",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Upload API",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "code_snippets": [
      {
        "code": "https://endpoint.ucr.io/ + https://yoursite.com/assets/image.jpg =
https://endpoint.ucr.io/https://yoursite.com/assets/image.jpg",
      },
    ],
    "content": "It is the best and simplest way to retrieve files from existing remote locations
and deliver them using our CDN.
Learn more about [Proxy][delivery-proxy].",
    "domain": "test.com",
    "hash": "#proxy",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare",
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading",
      },
      "h2": {
        "id": "proxy",
        "title": "Proxy",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-proxy",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Proxy",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Article Description 
[Uploading files][uploading-files] Upload media files with various options. Whether you need to accept user-generated content or serve media on your website or app, we've got you covered 
[File Uploader][file-uploader] Open source, responsive and mobile-ready web solution that allows users to select and upload multiple files from various sources 
[Storage options][storage-store] Uploadcare storage requires no configuration and works out of the box. Learn about file storing behavior 
[Signed uploads][secure-uploads] Get to control who can and when can upload files to one of your Uploadcare projects 
[File analysis on upload][file-analysis] We extract a ton of helpful information about file that you can use to your benifit 
[Validation and moderation][moderation] You can validate the types of files you want to accept, and apply various checks after 
[Upload API][upload-api] Low-level access to provide several ways of uploading files to Uploadcare servers in a secure and reliable way 
[API integrations][integrations] You don't have to code most of the low-level API integrations. We have high-level libraries for all popular platforms",
    "domain": "test.com",
    "hash": "#table-of-contents",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare",
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading",
      },
      "h2": {
        "id": "table-of-contents",
        "title": "Table of Contents",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-table-of-contents",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Table of Contents",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "description": "Whether you need to accept user generated content, serve media on your website or app, or collect and prepare files to train your ML model — we’ve got you covered.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading files",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Whether you need to accept user generated content, serve media on your website
or app, or collect and prepare files to train your ML model, we've got you
covered.
Upload any file type from almost any source using various upload
options. Uploadcare provides a robust, secure, and comprehensive
Upload API that you and your users can access from your backend
or directly from the browser. We also offer state-of-the-art web
File Uploader and mobile widgets.
Every uploaded file is immediately available on [Uploadcare CDN][delivery]
through unique and unguessable URLs. The files are stored in the integrated
storage. Once uploaded, you can [manage your files][managing-files] using the
REST API and [deliver them][delivery], applying on-the-fly operations.",
    "domain": "test.com",
    "hash": "#uploading-files",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-uploading-files",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading files",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "All files are uploaded into the projects. Projects are separate environments
with unique sets of [API keys][api-keys], dedicated storage, and settings.
For example, projects can be used to separate development, staging and
production environments. Learn more about [projects][settings-projects].
Note: Image uploads are available on the [Demo plan][billing-plans].
To upload other file types, you must add a credit card to your account
according to "Know your customer" (KYC) principles,
but as long as you stay on the free plan, you won't be charged.",
    "domain": "test.com",
    "hash": "#projects",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics",
      },
      "h3": {
        "id": "projects",
        "title": "Projects",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-projects",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Projects",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "code_snippets": [
      {
        "code": "{
  "sample-image.jpeg": "17be4678-dab7-4bc7-8753-28914a22960a"
}",
      },
      {
        "code": "https://ucarecdn.com/17be4678-dab7-4bc7-8753-28914a22960a/",
      },
    ],
    "content": "When you upload a file,






JavaScript

PHP

Python

Ruby

Swift

cURL

























you immediately receive the file's UUID in a 200 response,
and the file immediately becomes available on our CDN.
Save this UUID into your database and retrieve it to:
Serve optimized and transformed images.

Encode videos based on their size and codec.

Organize them with arbitrary metadata.

Detect the type of content.",
    "domain": "test.com",
    "hash": "#upload-api-request-and-response",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics",
      },
      "h3": {
        "id": "upload-api-request-and-response",
        "title": "Upload API request and response",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-api-request-and-response",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Upload API request and response",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "When uploading files, you can specify whether you want to keep
them permanently or not.
Notice the UPLOADCARE_STORE parameter in the example above.
It can be set as follows:
0 — the file will be deleted after 24 hours.

1 — the file will be stored permanently until explicitly deleted.

auto — defers the choice of storage behavior to the project's
[auto-store setting][project-settings-storage] (which is ON by default).


If you don't specify UPLOADCARE_STORE parameter, the default value is auto.
Note: Before, the value was 0 by default. Learn more about [storing behavior][storage-store].",
    "domain": "test.com",
    "hash": "#file-storing-behavior",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics",
      },
      "h3": {
        "id": "file-storing-behavior",
        "title": "File storing behavior",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-file-storing-behavior",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File storing behavior",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "We can extract file data that you can use: from basic file
information, e.g. EXIF, to insights into its content. We can automatically
[analyze][file-analysis] files for things like malware or NSFW content.
It also allows you to use [MIME type moderation][moderation].
Check out [files section][files] in Dashboard to see it in action.",
    "domain": "test.com",
    "hash": "#information-about-uploaded-files",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics",
      },
      "h3": {
        "id": "information-about-uploaded-files",
        "title": "Information about uploaded files",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-information-about-uploaded-files",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Information about uploaded files",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "[File Uploader][file-uploader] is a new and highly customizable widget that
allows users to upload files from various sources, utilizing the power of
Uploadcare APIs.


If you're looking for a [ready-made uploading solution][file-uploader], look no further.",
    "domain": "test.com",
    "hash": "#file-uploader",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "If you need to build your own uploading solution and don't want to use
[File Uploader][file-uploader], one of the options is to use our JS SDK.
[Upload Client][ext-uploadcare-upload-client] works with both Node.js and browsers.",
    "domain": "test.com",
    "hash": "#uploading-from-the-browser",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader",
      },
      "h4": {
        "id": "uploading-from-the-browser",
        "title": "Uploading from the browser",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-uploading-from-the-browser",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading from the browser",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Both [Swift][swift-integration] and [Kotlin][android-integration] integrations
have not only uploaded API methods but include uploading widgets for iOS and Android.
They allow to:
Upload files from a local disk, camera, and cloud sources.

Upload multiple files at once.

Track, pause and continue multipart uploading.

Upload in the background.",
    "domain": "test.com",
    "hash": "#uploading-widgets-for-ios-and-android",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader",
      },
      "h4": {
        "id": "uploading-widgets-for-ios-and-android",
        "title": "Uploading widgets for iOS and Android",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-uploading-widgets-for-ios-and-android",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading widgets for iOS and Android",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "[JavaScript][js-integration]

[PHP][php-integration]

[Python & Django][python-integration]

[Ruby][ruby-integration] and [Rails][rails-integration]

[Swift][swift-integration] (iOS, iPadOS, macOS, tvOS, Linux)

[Kotlin][android-integration] (Android)

[Java][java-integration]

[Golang][golang-integration]

[Rust][rust-integration]",
    "domain": "test.com",
    "hash": "#api-integrations",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "api-integrations",
        "title": "API integrations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-api-integrations",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "API integrations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "The main features of our Upload API are:








Upload local file



Upload from URLs



Upload large file



Add arbitrary metadata



Signed uploads



Webhooks on upload



Get file infoYou can also check out the complete OpenAPI specification of [Upload API][upload-api].",
    "domain": "test.com",
    "hash": "#upload-api-features",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-api-features",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Upload API features",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "The simplest way to upload a local file is to perform a HTTP POST request.
As in the example above, you only need to specify the project's public key.
Direct file uploads support files smaller than 100 MiB only. (If you want
to upload larger files, please use multipart uploads instead).






JavaScript

PHP

Python

Ruby

Swift

cURL

























Check out detailed API reference for [direct uploads][api-reference-upload-direct].",
    "domain": "test.com",
    "hash": "#upload-local-file",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "upload-local-file",
        "title": "Upload local file",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-local-file",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Upload local file",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Uploadcare can fetch a file from a publicly available URL and upload it to your
project.






JavaScript

PHP

Python

Ruby

Swift

cURL

























Check out detailed [uploads from URL][api-reference-from-url-upload] API reference.
Requests to the endpoint return a JSON dictionary with a token that can be
further used to check the status of an upload request. The token is not a
file ID and can't be used to address the file directly. The actual file ID
should be retrieved by calling the /from_url/status/ endpoint.
Integration implementation may vary, please refer to the respective documentation.






JavaScript

PHP

Python

Ruby

Swift

cURL

























Check out detailed API reference for [uploads from URL][api-reference-from-url-upload-status].",
    "domain": "test.com",
    "hash": "#upload-from-url",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "upload-from-url",
        "title": "Upload from URL",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-from-url",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Upload from URL",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "By default, every request to the /from_url/ endpoint with the same
source_url results in a new upload leading to file duplication.
If you would like Uploadcare to keep track of the requested URLs and avoid
duplicate uploads, pass the save_URL_duplicates and check_URL_duplicates
parameters described in [uploads from URL][api-reference-from-url-upload] API reference.






JavaScript

PHP

Python

Ruby

Swift

cURL

























If the source_url had already been fetched and uploaded previously, this
request would return information about the already uploaded file.",
    "domain": "test.com",
    "hash": "#duplicates-prevention",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "upload-from-url",
        "title": "Upload from URL",
      },
      "h4": {
        "id": "duplicates-prevention",
        "title": "Duplicates prevention",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-duplicates-prevention",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Duplicates prevention",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "You can also upload remote files with CDN Proxy.",
    "domain": "test.com",
    "hash": "#alternative-remote-uploading-method",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "upload-from-url",
        "title": "Upload from URL",
      },
      "h4": {
        "id": "alternative-remote-uploading-method",
        "title": "Alternative remote uploading method",
      },
    },
    "level": "h4",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-alternative-remote-uploading-method",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Alternative remote uploading method",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Multipart uploads should be used if you need to upload files larger
than 100 MiB or if you want to explicitly trigger
[AWS S3 Transfer Acceleration][ext-s3-transfer-acceleration].






JavaScript

PHP

Python

Ruby

Swift

cURL

























Check out detailed API reference for [multipart uploads][api-reference-upload-requests-multipart].
Note: Each uploaded part should be at least 5242880 bytes in size except
for the last one, which can be smaller. You can upload the file parts
in parallel, provided that the byte order stays unchanged.",
    "domain": "test.com",
    "hash": "#upload-large-file",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "upload-large-file",
        "title": "Upload large file",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-large-file",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Upload large file",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "You can add additional, arbitrary key-value data associated with uploaded files.
For example, you could store user IDs, order IDs, or tags.






JavaScript

PHP

Python

Ruby

Swift

cURL

























Learn more about [file metadata][file-metadata].",
    "domain": "test.com",
    "hash": "#add-arbitrary-metadata",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "add-arbitrary-metadata",
        "title": "Add arbitrary metadata",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-add-arbitrary-metadata",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Add arbitrary metadata",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Signed upload requests include an authentication signature that is generated
based on your project's secret key and expiration time parameters. This
signature must be generated on your backend, as you must never expose your
secret key in client-side code.
Learn more about [signed uploads][secure-uploads].",
    "domain": "test.com",
    "hash": "#signed-uploads",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "signed-uploads",
        "title": "Signed uploads",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-signed-uploads",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Signed uploads",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "Uploadcare can notify your application when a new file has been uploaded
asynchronously. For example, you may need to decide on your file
based on the abovementioned analysis. When an upload happens, we'll make a POST
request with a JSON payload to the endpoint you provided. Learn more about
[webhooks][webhooks].",
    "domain": "test.com",
    "hash": "#webhooks-on-upload",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "webhooks-on-upload",
        "title": "Webhooks on upload",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-webhooks-on-upload",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Webhooks on upload",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "There're various methods to get file information: via
[Upload API][api-upload-file-info],
[REST API][api-reference-fileinfo], or [URL API][url-api-file-info-json].
Upload API gives you limited but essential access, while REST API gives full details.
Integration implementation may vary, please refer to the respective documentation.






JavaScript

PHP

Python

Ruby

Swift

cURL

























Check out detailed API reference for [file info][api-upload-file-info].",
    "domain": "test.com",
    "hash": "#get-file-info",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features",
      },
      "h3": {
        "id": "get-file-info",
        "title": "Get file info",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-get-file-info",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Get file info",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "code_snippets": [
      {
        "code": "https://endpoint.ucr.io/ + https://yoursite.com/assets/image.jpg =
https://endpoint.ucr.io/https://yoursite.com/assets/image.jpg",
      },
    ],
    "content": "Proxy automatically retrieves files from existing remote locations and delivers
them using [Uploadcare CDN][delivery]. It's easy to integrate, requiring only one
URL modification:
Learn more about [Proxy][delivery-proxy].",
    "domain": "test.com",
    "hash": "#retrieve-remote-files-on-the-fly",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "retrieve-remote-files-on-the-fly",
        "title": "Retrieve remote files on the fly",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-retrieve-remote-files-on-the-fly",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Retrieve remote files on the fly",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "content": "If you migrated to Uploadcare from a DIY solution or another platform,
you need to migrate your files. First, copy the files from their current
location to your Uploadcare storage so they can be processed and
delivered using the Uploadcare CDN.
Learn more about [Migro][migro-guide].",
    "domain": "test.com",
    "hash": "#migrate-files-from-anywhere",
    "hierarchy": {
      "h0": {
        "title": "Uploading files",
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files",
      },
      "h2": {
        "id": "migrate-files-from-anywhere",
        "title": "Migrate files from anywhere",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-migrate-files-from-anywhere",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Migrate files from anywhere",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "description": "Upload and store files with one secure, reliable and compatible solution. Use our ready-made uploader interface and infrastructure.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploadcare File Uploader | Overview",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "[File Uploader][file-uploader-product-page] is a new and highly customizable
widget that allows users to upload files from various sources. It utilizes the
power of Uploadcare APIs and can run within any web tech stack.",
    "domain": "test.com",
    "hash": "#uploadcare-file-uploader",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-uploadcare-file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploadcare File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "We supply a set of ready-made solutions for the most frequent file uploading
cases: regular, inline, and minimal. Each with its own set of features
and customization options. You can also use them as is or as a custom build reference.",
    "domain": "test.com",
    "hash": "#solutions",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-solutions",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Solutions",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "The Regular File Uploader is a dialog-based solution that enables easy integration of an uploading button into your application.
The button opens a dialog where users can select files to upload from various sources, including local files, external URLs, or social platforms.
Both the button and the dialog can be customized to match your application's look and feel.",
    "domain": "test.com",
    "hash": "#regular-file-uploader",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions",
      },
      "h3": {
        "id": "regular-file-uploader",
        "title": "Regular File Uploader",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-regular-file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Regular File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "The Inline mode is quite similar to the Regular uploader and is useful when you want to upload files without opening a dialog window.
This mode is particularly handy if you prefer using your own button and dialog components.
The Inline mode can also be useful when you want to embed the file uploader directly within a form or a specific section of your application's user interface.
This allows users to seamlessly upload files in context, without being redirected to a separate dialog window, thus enhancing the overall user experience.",
    "domain": "test.com",
    "hash": "#inline-file-uploader",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions",
      },
      "h3": {
        "id": "inline-file-uploader",
        "title": "Inline File Uploader",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-inline-file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Inline File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "The Minimal uploader is the last, but certainly not the least, type of uploader.
It offers a streamlined approach, enabling file uploads without any additional UI elements.
The minimalistic uploader functions as a simple drag-and-drop area.
However, some features, such as social sources and cloud editor, are unavailable with this uploader type.",
    "domain": "test.com",
    "hash": "#minimal-file-uploader",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions",
      },
      "h3": {
        "id": "minimal-file-uploader",
        "title": "Minimal File Uploader",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-minimal-file-uploader",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Minimal File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "Both Regular and Inline modes include a built-in cloud image editor that provides a few dozen popular image edit operations.",
    "domain": "test.com",
    "hash": "#embed-image-editor",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions",
      },
      "h3": {
        "id": "embed-image-editor",
        "title": "Embed image editor",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-embed-image-editor",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Embed image editor",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "The main feature of the new File Uploader is the ease of customization and
localization with basic HTML and CSS.
Add a file uploading capability to your website:
Receive files from anybody.

Upload files of any type and up to 5 TB in size.

Upload multiple files in one go.

Track upload jobs with an individual progress bar for each file.

Get files from various sources, including local storage, camera, social media, and cloud storage services.

Speed up the uploading with the uploading network (it works like CDN).

Show image previews.

Resize, crop, rotate, add effects, enhance images, add overlays right after upload.

Validate files by their format or size.

Prevent remote code execution through widgets and code execution in uploaded files like SVG, html and xml.


All your uploads go to the storage covered by SLA with a 99.9% uptime. On top of that, Uploadcare infrastructure is compliant with SOC 2, HIPAA, and more.",
    "domain": "test.com",
    "hash": "#features",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "features",
        "title": "Features",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-features",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Features",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "You can run the File Uploader within any tech stack. Here are a few examples:
React

Vue

Angular

Svetle",
    "domain": "test.com",
    "hash": "#frameworks-support",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "frameworks-support",
        "title": "Frameworks support",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-frameworks-support",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Frameworks support",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "File Uploader is supported and tested in all major modern desktop and mobile browsers:
Chrome

Firefox

Safari

Edge

Opera


If you need IE support, please use our [jQuery widget][jquery-widget].",
    "domain": "test.com",
    "hash": "#supported-browsers",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "supported-browsers",
        "title": "Supported browsers",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-supported-browsers",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Supported browsers",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "code_snippets": [
      {
        "code": "{
  "compilerOptions": {
    "types": ["@uploadcare/blocks/types/jsx"]
  },
}",
        "lang": "json",
      },
    ],
    "content": "We use [JSDoc type annotations][ext-jsdoc-supported-types]
for TypeScript static analysis support during development.
Additionally, we provide type definitions ([*.d.ts files][ext-jsdoc-supported-types])
for the TypeScript projects in our packages.
Check the [JSDoc Reference][ext-jsdoc-supported-types]
page in TypeScript official documentation.
Basic types are automatically loaded when you import the package.
To enable JSX support, add the following to your tsconfig.json file:",
    "domain": "test.com",
    "hash": "#typescript-support",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "typescript-support",
        "title": "Typescript support",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-typescript-support",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Typescript support",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "We built the File Uploader as close to the native web platform as possible and
do not force you to use any specific development environment tools.
Uploader is built with web components, service workers, wasm, and a set of
other modern technologies. Modern ESM-level code sharing. Minimum of external
dependencies.
The build stage is unnecessary for development. Use the code directly in any
modern browser or Node.js. We encourage you to build your custom solutions with
all building blocks that we have.",
    "domain": "test.com",
    "hash": "#technology-behind",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "technology-behind",
        "title": "Technology behind",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-technology-behind",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Technology behind",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "We recommend beginning with the File Uploader [configurator][configurator].
It includes all necessary settings and generates ready-to-use code snippets and
step-by-step instructions tailored to your project's environment. If you don't
have an account yet, now is the perfect time to [get one][account-signup].
Or start with File Uploader [installation][file-uploader-installation].",
    "domain": "test.com",
    "hash": "#fast-start",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "fast-start",
        "title": "Fast start",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-fast-start",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Fast start",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "We are actively working to make the File Uploader accessible to everyone.
However, please note that it is not currently fully accessible.
We have plans to incorporate support for accessibility features in the near future.
If accessibility is critical for your needs, we recommend checking out our
previous [jQuery widget][jquery-widget].",
    "domain": "test.com",
    "hash": "#accessibility",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "accessibility",
        "title": "Accessibility",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-accessibility",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Accessibility",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "content": "This is our latest file uploading solution. If you're looking for a previous
one, please refer to the [jQuery widget][jquery-widget]. In contrast
to the previous one, new uploader is 57% lighter, has a modern and highly
customizable view, and works with any JavaScript framework, while previous
jQuery widget requires additional work.
If you're a mobile developer, check our Swift and Kotlin integrations:
[iOS uploading widget][swift-integration]

[Android uploading widget][android-integration]",
    "domain": "test.com",
    "hash": "#other-uploading-widgets",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview",
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader",
      },
      "h2": {
        "id": "other-uploading-widgets",
        "title": "Other uploading widgets",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-other-uploading-widgets",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Other uploading widgets",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "description": "Uploadcare allows process images on the fly with a set of CDN operations on the fly to alter images the way you need.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Image optimization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "Image optimization is essential for improving the performance of your website
or application. Resizing your images and compressing them without sacrificing
quality are the critical factors to consider:
Scaling operations, such as various methods of resize and crop,
have the biggest effect.

Delivering the most efficient format
that the client's browser supports.

Further optimization of the image quality of the
resulting image, especially for high pixel ratios.




It's important to use all three types of operations to achieve the best
results.
Check out our [responsive images][guide-image-responsive] guide for more details.",
    "domain": "test.com",
    "hash": "#image-optimization",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-image-optimization",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Image optimization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "code_snippets": [
      {
        "code": "https://yoursite.ucr.io/-/resize/500x/https://yoursite.com/assets/image.jpg",
      },
    ],
    "content": "Every URL transformation generates a modified image version on the fly, while
the original file stays intact. The transformed image version will be cached
on [CDN nodes][delivery] to optimize delivery.


Also, you can [fetch and deliver images][delivery-proxy] to apply operations
without explicitly uploading them:
When applying any image operation, a new file is created (cached on our CDN,
and not counted towards your storage limits). If not set, this file is encoded
with the default quality and format.
Image processing operation may be applied only to the appropriate file.
On uploading, the file is analyzed by Uploadcare: file type, metadata, and so on;
the file is assigned an attribute is_image. If this attribute is true, then
an operation can be applied to the file. See the Limitations section.
Without any image processing operation in the URL, CDN [instructs][delivery-cdn-inline]
browsers to show images (Content-Disposition: inline) and download other file
types (Content-Disposition: attachment). Browsers may not show all image formats,
such as TIFF and HEIC. If you need to display an image, add any image
processing operation, [-/preview/][transformations-image-preview] for instance.",
    "domain": "test.com",
    "hash": "#how-it-works",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-how-it-works",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "How it works",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "Image processing operations have limits that you should consider:
Input image formats

Mandatory usage of core operations

File size

Output image dimensions

SVG files

Image resolution

Rotation

Animated images


Learn more about [image processing limitations][delivery-operations-limits].",
    "domain": "test.com",
    "hash": "#limitations",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works",
      },
      "h3": {
        "id": "limitations",
        "title": "Limitations",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-limitations",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Limitations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "Rather than delivering large, full-sized images and relying on the browser to
resize them, you can do it programmatically:
[Preview][transformations-image-preview]

[Scale crop][transformations-image-scale-crop]

[Resize][transformations-image-resize]

[Crop][transformations-image-crop]


The advanced scaling operations allows you to resize images more precisely:
[Smart crop][transformations-image-smart-crop]

[Crop by ratio][transformations-image-crop-ratio]

[Crop by objects][transformations-image-crop-objects]

[Smart resize][transformations-smart-resize]

[Zoom][transformations-image-zoom-objects]",
    "domain": "test.com",
    "hash": "#scaling-operations",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "scaling-operations",
        "title": "Scaling operations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-scaling-operations",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Scaling operations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "-/format/:format/
If any other image processing operation is applied (such as scaling operations),
the default format is auto (see how auto works).
Alternatively, you can use the -/format/ operation to convert an image
to one of the following formats:
jpeg is a lossy image format (good compression for photos). JPEG doesn’t
support an alpha channel; hence you can use the
[setfill][transformations-image-setfill] operation that sets a background
color. All browsers support JPEG.

png is a lossless format (good compression only for graphics) with
alpha channel support. All browsers support PNG.

webp is a modern format with more efficient compression than JPEG and with
alpha channel support. It works well for all images, yet [not all][ext-caniuse-webp]
browsers and OSs support it.

auto the default behavior; is an automatic image format selection based on
alpha channel presenceand a client's device and browser.

preserve returns the image in the original format if it is PNG or JPEG,
otherwise coerces to PNG or JPEG. This option is useful
when you need to save the image, rather than display it to the end-user.",
    "domain": "test.com",
    "hash": "#format",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "format",
        "title": "Format",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-format",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Format",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "First, the algorithm checks the Accept header with MIME types to figure out
what image format a client browser supports.
AVIF is used as output when all the following conditions are met:
image/avif MIME type is supported by the client.

Output image resolution is under the threshold (currently 2 MPx).



WebP is used when image/webp MIME type is supported by the client.

PNG is used when the source image contains an alpha channel with non-opaque pixels
or when the image has limited color diversity, resembling artwork.

JPEG is used otherwise.


You can disable the selection of modern formats, specifically AVIF and WebP,
for your project in the Dashboard. Alternatively, you may consider adding the
-/format/preserve/ operation to a specific URL.
Note: auto works when you use primary Uploadcare [storage][storage] (not S3
Bucket) and the default [Uploadcare CDN][delivery] domain ucarecdn.com.












400x301 

png 116Kb


Transparent








400x301 

jpeg 16Kb


Opaque








400x301 

webp 15Kb


Transparent, size is equal


to the opaque one.
Browsers that support WebP will load this image version, while others will
display JPEG or PNG instead.",
    "domain": "test.com",
    "hash": "#how-auto-works-and-prioritize-image-formats",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "format",
        "title": "Format",
      },
      "h3": {
        "id": "how-auto-works-and-prioritize-image-formats",
        "title": "How auto works and prioritize image formats",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-how-auto-works-and-prioritize-image-formats",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "How auto works and prioritize image formats",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "-/quality/:value/
Sets output quality for [lossy formats][ext-lossy-formats] (JPEG, WebP, and AVIF).
Since actual settings vary from codec to codec and, more importantly, from format
to format, we provide five simple tiers that are consistent across
different formats and other settings and suit most cases of image distribution.
A higher quality level will typically result in a larger output file.
However, setting the quality level higher than the original level of the
uploaded image won’t increase your file size.
normal — the default behavior when no quality operation is applied.
The reasonable quality for 1x pixel density.

better — can be used to render relatively small and detailed previews. ≈125%
file size compared to normal.

best — can be used to deliver images close to their pristine quality
(e.g., for artwork). ≈170% file size.

lighter — useful when applied to relatively large images to save traffic
without significant quality loss. ≈80% file size.

lightest — highest compression ratio for high pixel ratio. ≈50% file size.",
    "domain": "test.com",
    "hash": "#quality",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "quality",
        "title": "Quality",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-quality",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Quality",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "Adaptive quality could be enabled per project in the Dashboard. In this case,
we analyze the output image using content-aware algorithms to determine
maximum compression that won't cause noticeable visual artefacts and
adjust the compression level accordingly.",
    "domain": "test.com",
    "hash": "#adaptive-quality",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "adaptive-quality",
        "title": "Adaptive quality",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-adaptive-quality",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Adaptive quality",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "A great approach for high pixel densities is to increase images resolution
and reduce quality at the same time. Compared to just increasing quality,
images will look clearer on all screens with nearly the same file size.
To adjust quality, you can use lighter and lightest presets.












1x 

best 16Kb


Blurry on retina.








1.5x 

lighter 14Kb










2x 

lightest 12Kb


Perfect for all screens.",
    "domain": "test.com",
    "hash": "#optimizing-for-high-pixel-ratios",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "optimizing-for-high-pixel-ratios",
        "title": "Optimizing for high pixel ratios",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-optimizing-for-high-pixel-ratios",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Optimizing for high pixel ratios",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "-/progressive/yes/


-/progressive/no/
Returns a progressive image. In progressive images, data are compressed in
multiple passes of progressively higher detail. This is ideal for large images
that will be displayed while downloading over a slow connection allowing a
reasonable preview after receiving only a portion of the data.
The operation does not affect non-JPEG images; does not force image formats
to JPEG.
















Baseline loading.












Progressive loading.",
    "domain": "test.com",
    "hash": "#progressive-jpeg",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "progressive-jpeg",
        "title": "Progressive JPEG",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-progressive-jpeg",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Progressive JPEG",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "-/strip_meta/all/


-/strip_meta/none/


-/strip_meta/sensitive/
The original image often comes with additional information built into the image
file. In most cases, this information doesn't affect image rendering and thus
can be safely stripped from the processed images to reduce image weight.
Currently, you can only keep EXIF meta information. Other storage, such as XMP
or IPTC, will always be stripped when creating a new processed image version.
all — the default behavior when no strip_meta operation is applied.
No meta information will be added to the processed file.

none — uses the EXIF from the original file.
The orientation tag will be set to 1 (normal orientation).

sensitive — uses the EXIF from the original file but skips geolocation.
The orientation tag will be set to 1 (normal orientation).


If you need to restrict user access to EXIF information, please
[protect your images from editing][mutability].",
    "domain": "test.com",
    "hash": "#strip-meta-information",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "strip-meta-information",
        "title": "Strip meta information",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-strip-meta-information",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Strip meta information",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "content": "Video files are much smaller than GIFs, without noticeable quality loss. Their
delivery to end users is much faster. Gif to video operation converts animated
image files, such as GIF, WebP, and HEIC, to video and transforms them on the
fly. Learn more about [animated images optimization][transformations-gif-to-video].",
    "domain": "test.com",
    "hash": "#animated-images-optimization",
    "hierarchy": {
      "h0": {
        "title": "Image optimization",
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization",
      },
      "h2": {
        "id": "animated-images-optimization",
        "title": "Animated images optimization",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-animated-images-optimization",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Animated images optimization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/image-transformations",
        "title": "Image transformations",
      },
    ],
    "description": "Uploadcare allows process images on the fly with a set of CDN operations on the fly to alter images the way you need.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview",
    "org_id": "test",
    "pathname": "/docs/image-transformations/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploadcare image transformations overview",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/image-transformations",
        "title": "Image transformations",
      },
    ],
    "content": "With Uploadcare, you can easily build custom image processing workflows and
automate most image transformation tasks. For example, you can set up a chain of
actions for user-generated images that'll unify their look.






Use and stack transformations right in the image URL:
















Original image









Sharpen 

-/sharp/15/









Enhance 

-/enhance/100/",
    "domain": "test.com",
    "hash": "#image-transformations-and-art-direction",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview",
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-image-transformations-and-art-direction",
    "org_id": "test",
    "pathname": "/docs/image-transformations/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Image transformations and art-direction",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/image-transformations",
        "title": "Image transformations",
      },
    ],
    "code_snippets": [
      {
        "code": "https://yoursite.ucr.io/-/preview/-/resize/500x/https://yoursite.com/assets/image.jpg",
      },
    ],
    "content": "Every URL transformation generates a modified image version on the fly, while
the original file stays intact. The transformed image version will be cached
on [CDN nodes][delivery] to optimize delivery.


Also, you can [fetch and deliver images][delivery-proxy] to apply operations
without explicitly uploading them:
Image processing operation may only apply to [appropriate file][delivery-operations-formats].
On uploading, the file is analyzed by Uploadcare: file type, metadata, and so on;
the file is assigned an attribute is_image. If this attribute is true, then
an operation can be applied to the file. See the Limitations section.
When applying any image operation, a new file is created (cached on our CDN,
and not counted towards your storage limits). If not set, this file is encoded
with the default [quality][transformations-image-quality] and original
[format][transformations-image-format]. However, you can adjust them to meet your
requirements better.",
    "domain": "test.com",
    "hash": "#how-it-works",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview",
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction",
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-how-it-works",
    "org_id": "test",
    "pathname": "/docs/image-transformations/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "How it works",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/image-transformations",
        "title": "Image transformations",
      },
    ],
    "content": "Most of the image processing operations work on-the-fly:








Resize, crop, rotation



 

Preview

 

Resize

 

Smart resize

 

Crop

 

Crop by ratio

 

Crop by objects

 

Scale crop

 

Smart crop

 

Border radius and circle crop

 

Set fill color

 

Zoom objects

 

Automatic rotation, EXIF-based

 

Manual rotation

 

Flip

 

Mirror



Overlays and watermarks





Image overlay



Self overlay



Text overlay



Effects and enhancements





Basic color adjustment



Enhance



Grayscale



Inverting



Color profile management





Conversion to sRGB



ICC profile size threshold



Photo filters



Blur



Blur region



Blur faces



Unsharp masking



Sharpen



Color recognition



Face-detection based transformations



Animated images optimization



SVG transformations and rasterizationNote: Some image operations can't be perfomed on the fly and work asynchronously via [REST API][rest-api]:








Background removal



Object recognition



Video thumbnail generation



Document thumbnail generationImage optimization operations can be found in a separate section:








Compression





Format



Quality



Smart compression



Progressive JPEG



Meta information control",
    "domain": "test.com",
    "hash": "#full-list-of-image-transformations-operations",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview",
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction",
      },
      "h2": {
        "id": "full-list-of-image-transformations-operations",
        "title": "Full list of image transformations operations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-full-list-of-image-transformations-operations",
    "org_id": "test",
    "pathname": "/docs/image-transformations/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Full list of image transformations operations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/image-transformations",
        "title": "Image transformations",
      },
    ],
    "content": "Image processing operations have limits that you should consider:
Input image formats

Mandatory usage of core operations

File size

Output image dimensions

SVG files

Image resolution

Rotation

Animated images


Learn more about [image processing limitations][delivery-operations-limits].",
    "domain": "test.com",
    "hash": "#limitations",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview",
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction",
      },
      "h2": {
        "id": "limitations",
        "title": "Limitations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-limitations",
    "org_id": "test",
    "pathname": "/docs/image-transformations/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Limitations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/delivery",
        "title": "Delivery",
      },
    ],
    "description": "Uploadcare CDN is a fast and reliable content delivery network that optimizes your images and videos for any device and platform.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview",
    "org_id": "test",
    "pathname": "/docs/delivery/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File delivery with Uploadcare",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/delivery",
        "title": "Delivery",
      },
    ],
    "content": "Every uploaded file is immediately available on the Uploadcare CDN
— the best place to host your files for media deliveryGlobal CDN network

Fastest on-the-fly image operations

Huge set of image transformations

Deliver files from any remote storage

DDoS protection and access control

Unlimited scalability on demand


CDN is a geographically distributed system of servers that delivers content to
client devices from the servers nearby, which saves time on long-distance data
exchange.
While traditional CDNs are typically limited to basic copying and caching
functions, Uploadcare CDN stands out by offering dynamic image modifications.
This unique feature not only ensures faster page load times and better uptime,
but also allows on-the-fly image optimization and transformation of images to
suit the device they are being consumed on.",
    "domain": "test.com",
    "hash": "#file-delivery-with-uploadcare",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare",
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-file-delivery-with-uploadcare",
    "org_id": "test",
    "pathname": "/docs/delivery/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File delivery with Uploadcare",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/delivery",
        "title": "Delivery",
      },
    ],
    "code_snippets": [
      {
        "code": "https://yoursite.ucr.io/-/preview/-/resize/500x/https://yoursite.com/assets/image.jpg",
      },
    ],
    "content": "Access files in Uploadcare CDN at ucarecdn.com over HTTP/HTTPS liks this:


You can add CDN operations by including directives in the CDN URL:


:uuid stands for the unique file identifier, UUID, assigned on upload.

/-/ is a mandatory parsing delimiter to divide operations and other path
components.

:operation/:params/ is a CDN operation directive with parameters.

:filename is an optional filename you can add after a trailing slash /.


You can stack two and more operations like this:
/:operation/:params/-/:operation/:params/
Same applies when using [Proxy][delivery-proxy]:",
    "domain": "test.com",
    "hash": "#how-it-works",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare",
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare",
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-how-it-works",
    "org_id": "test",
    "pathname": "/docs/delivery/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "How it works",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/delivery",
        "title": "Delivery",
      },
    ],
    "content": "One way to improve your site's SEO is to name your files relevantly,
such as integrating keywords into your image URLs.
Valid URLs typically have words separated by a hyphen,
for example seo-optimize-images.
You can specify an additional filename after the UUID
instead of the automatically generated one:


The filename can be added to both the original (after the UUID) and at the end
of the URL with operations applied, as in the example above.",
    "domain": "test.com",
    "hash": "#seo-optimization",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare",
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare",
      },
      "h2": {
        "id": "seo-optimization",
        "title": "SEO optimization",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-seo-optimization",
    "org_id": "test",
    "pathname": "/docs/delivery/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "SEO optimization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/delivery",
        "title": "Delivery",
      },
    ],
    "content": "Article Description 
[On-the-fly operations][delivery-operations] Uploadcare CDN features on-the-fly image optimization, large set of image transformations, and non-image file operations, such as getting file information or changing file delivery behavior 
[Image optimizations][transformations-image-compression] Scale your images and compress them without sacrificing quality to improve the performance of your website or application 
[Image transformations][transformations-image] Build custom image processing workflows and automate most image transformation tasks: scaling, rotation, overlays, effects and enhancements, face-detection, SVG transformation and many more 
[CDN settings][delivery-settings] Set up custom CDN CNAME, cache duration, search engine indexing behavior, or even bring your own CDN 
[Fetch and deliver remote files][delivery-proxy] When you need to get all the benefits of image optimization for files that you already store somewhere else, use Proxy. It automatically retrieves files from existing remote locations and delivers them using the CDN 
[Signed URLs][secure-delivery] Control who and for how long can access files in your project via signed URLs. Protect end-users sensitive data, authorize clients, limit access by time 
[URL API][url-api] List of all CDN operations, its limitations, and settings",
    "domain": "test.com",
    "hash": "#table-of-contents",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare",
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare",
      },
      "h2": {
        "id": "table-of-contents",
        "title": "Table of Contents",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-table-of-contents",
    "org_id": "test",
    "pathname": "/docs/delivery/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Table of Contents",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/file-management",
        "title": "File management",
      },
    ],
    "description": "Implement custom workflows for your uploaded files with Uploadcare REST API.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview",
    "org_id": "test",
    "pathname": "/docs/file-management/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File management with Uploadcare",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/file-management",
        "title": "File management",
      },
    ],
    "content": "Implement custom workflows for your uploaded files.Manage files with REST API

Webhooks for various events

Arbitrary file metadata management

S3 bucket integration

Video processing

Document conversion

Unsafe content detection

Object recognition

Malware protection

API clients for popular platforms


Once uploaded, you can manage files using REST API and project storage settings.",
    "domain": "test.com",
    "hash": "#file-management",
    "hierarchy": {
      "h0": {
        "title": "File management with Uploadcare",
      },
      "h1": {
        "id": "file-management",
        "title": "File management",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview-file-management",
    "org_id": "test",
    "pathname": "/docs/file-management/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File management",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/file-management",
        "title": "File management",
      },
    ],
    "content": "Manage your files using REST API directly or with an API client.






JavaScript

PHP

Python

Ruby

Swift

cUrl",
    "domain": "test.com",
    "hash": "#how-it-works",
    "hierarchy": {
      "h0": {
        "title": "File management with Uploadcare",
      },
      "h1": {
        "id": "file-management",
        "title": "File management",
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview-how-it-works",
    "org_id": "test",
    "pathname": "/docs/file-management/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "How it works",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/file-management",
        "title": "File management",
      },
    ],
    "content": "Article Description 
[Managing files][managing-files] Uploadcare provides various methods for managing already uploaded files with its REST API 
[Webhooks][webhooks] Setup webhooks to notify your application about certain events that occur in your project asynchronously 
[File metadata][file-metadata] File metadata is additional, arbitrary key-value data associated with uploaded files. For example, you could store a unique file identifier from your system 
[S3 bucket integration][storage-custom] Connect an Amazon S3 bucket to one or more of your Uploadcare projects to implement custom file workflows, integrated deeply into your system 
[Storage backups][storage-backup] Automatically copy all of you stored files to a custom S3 bucket. Connect the storage once, and the system will do backups on a timely basis 
[Video processing][transformations-video] Encode video files to MP4, WEBM, or OGG, and transform them to adjust the viewing experience, create thumbnails, and save bandwidth 
[Document conversion][transformations-docs] Convert documents and create their thumbnails to improve user experience 
[Unsafe content detection][unsafe-content] Detect and identify inappropriate, unwanted, NSFW, or offensive user-generated content 
[Object recognition][intelligence-object-recognition] Categorize and tag people, objects, and other content classes in your images 
[Malware protection][malware-protection] Automatically detect infected or malicious files to protect your users 
[REST API][rest-api] Low-level access to Uploadcare features, e.g. CRUD files and their metadata, receive webhooks, and run add-ons 
[API integrations][integrations] You don't have to code most of the low-level API integrations. We have high-level libraries for all popular platforms",
    "domain": "test.com",
    "hash": "#table-of-contents",
    "hierarchy": {
      "h0": {
        "title": "File management with Uploadcare",
      },
      "h1": {
        "id": "file-management",
        "title": "File management",
      },
      "h2": {
        "id": "table-of-contents",
        "title": "Table of Contents",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview-table-of-contents",
    "org_id": "test",
    "pathname": "/docs/file-management/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Table of Contents",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "description": "Uploadcare features widgets, API clients, plugins, no-code integrations, and low-code guides for different languages, frameworks and platforms.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Uploadcare integrations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "hash": "#integrations",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-integrations",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Integrations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "The new and highly customizable widget that allows users to upload and edit
files from various sources, utilizing the power of Uploadcare APIs.
We built it as close to the native web platform as possible (web components,
service workers, wasm, etc). It doesn't force you to use any specific
development environment tools.








Documentation





React example





Vue example





Angular example





Next.js example





Svelte example",
    "domain": "test.com",
    "hash": "#file-uploader",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-file-uploader",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "File Uploader",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "We continue to support our previous uploading widget. It's built using jQuery,
very stable, and supports every customer request we received over the years.








Documentation





React wrapper





Angular wrapper",
    "domain": "test.com",
    "hash": "#previous-stable-version",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader",
      },
      "h3": {
        "id": "previous-stable-version",
        "title": "Previous stable version",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-previous-stable-version",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Previous stable version",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "JS





PHP





Python





Ruby





Rails





Java





Golang





Rust





iOS (Swift)





Android (Kotlin)",
    "domain": "test.com",
    "hash": "#api-clients",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "api-clients",
        "title": "API clients",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-api-clients",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "API clients",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Next.js





NuxtImage

by Nuxt",
    "domain": "test.com",
    "hash": "#cdn-sdks",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "cdn-sdks",
        "title": "CDN SDKs",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-cdn-sdks",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "CDN SDKs",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "WooCommerce

by snowray.co





Contentful

 





CKEditor

 





TinyMCE

 





Redactor

 





Zapier

 





Make

 





Integrately

 





Wix Uploadly

by Inspon",
    "domain": "test.com",
    "hash": "#plugins-and-no-code-integrations",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "plugins-and-no-code-integrations",
        "title": "Plugins and no-code integrations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-plugins-and-no-code-integrations",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Plugins and no-code integrations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Shopify

 





Webflow

 





Marketo",
    "domain": "test.com",
    "hash": "#low-code-guides",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "low-code-guides",
        "title": "Low-code guides",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-low-code-guides",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Low-code guides",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Lovely libs made by those who believe in Uploadcare.








PHP Transformation URLs generation

by Vormkracht10





Flysystem driver for Laravel

by Vormkracht10





Vue.js

by Josh Smith





Vue.js

by Tipe.io





C#

by Anton Kheystver





Erlang

by Roman Chvanikoff





Elixir

by CryptoHamsters





Flutter

by Konstantin Kai





A-Frame

by Fernando Serrano





GetSimple CMS

by zekoolweb",
    "domain": "test.com",
    "hash": "#third-party-integrations",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "third-party-integrations",
        "title": "Third-party integrations",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-third-party-integrations",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Third-party integrations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Adaptive delivery SDK

 





Webpack

by Roman Dubinin





WordPress

 





JotForm

 





Netlify CMS

 Got an integration request? [Hit us up!][mail-help]",
    "domain": "test.com",
    "hash": "#misc",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations",
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations",
      },
      "h2": {
        "id": "misc",
        "title": "Misc",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-misc",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Misc",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "description": "Uploadcare Python & Django integrations handle uploads and further operations with files by wrapping Upload and REST APIs.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Python API Client for File Upload and Management",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "content": "Uploadcare Python & Django integrations handle uploads and further operations
with files by wrapping Upload and REST APIs.
[GitHub →][pyuploadcare-github-readme]",
    "domain": "test.com",
    "hash": "#python-api-client",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management",
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client",
      },
    },
    "level": "h1",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-python-api-client",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Python API Client",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "content": "Uploading ([Upload API][upload-api]):
Upload files from a local storage and URLs (up to 5 TB)

Multipart uploading for large files

Uploading network to speed up uploading jobs (like CDN)


File management ([REST API][rest-api]):
Get file info

Perform various file operations (store/delete/copy/group)

Detect unsafe and malicious content

Encode and transform videos

Convert documents and other files

Recognize objects in the image

Add arbitrary file metadata

Manage webhooks


Image processing ([URL API][url-api]):
Compression

Geometry

Colors

Definition

Image and text overlays

Rotations

Recognition

File info

Proxy (fetch)


Security features:
Secure authentication

Secure uploads (signed uploads)

Secure delivery (signed URLs)

Secure webhooks (signing secret)",
    "domain": "test.com",
    "hash": "#features",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management",
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client",
      },
      "h2": {
        "id": "features",
        "title": "Features",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-features",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Features",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "code_snippets": [
      {
        "code": "pip install pyuploadcare",
        "lang": "bash",
      },
      {
        "code": "pip install pyuploadcare[django]",
        "lang": "bash",
      },
    ],
    "content": "In order to install pyuploadcare, run these command in CLI:
To use in Django project install with extra dependencies:",
    "domain": "test.com",
    "hash": "#installation",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management",
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client",
      },
      "h2": {
        "id": "installation",
        "title": "Installation",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-installation",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Installation",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "code_snippets": [
      {
        "code": "from django import forms
from django.db import models

from pyuploadcare.dj.models import ImageField
from pyuploadcare.dj.forms import FileWidget, ImageField as ImageFormField

class Candidate(models.Model):
    photo = ImageField(blank=True, manual_crop='4:3')

# optional. provide advanced widget options:
# https://uploadcare.com/docs/file-uploader/configuration/
# https://uploadcare.com/docs/file-uploader/options/
class CandidateForm(forms.Form):
    photo = ImageField(widget=FileWidget(attrs={
        'source-list': 'local,url,camera',
        'camera-mirror': True,
    }))",
        "lang": "python",
      },
    ],
    "content": "Here is an example how to include Uploadcare ImageField into an existing
Django project.",
    "domain": "test.com",
    "hash": "#usage-example",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management",
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client",
      },
      "h2": {
        "id": "usage-example",
        "title": "Usage example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-usage-example",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Usage example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "content": "Check out example Django project.
It features:
Project section

Files section

File Groups section

Files uploading

Documents conversion

Video conversion

Webhooks

Posts section",
    "domain": "test.com",
    "hash": "#example-django-project",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management",
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client",
      },
      "h2": {
        "id": "example-django-project",
        "title": "Example Django project",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-example-django-project",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Example Django project",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "content": "Python 3.8, 3.9, 3.10, 3.11, 3.12


To use pyuploadcare with Python 3.6 or 3.7 please install pyuploadcare < 5.0.
To use pyuploadcare with Python 2.7 please install pyuploadcare < 3.0.
Django compatibility:
Py/Dj 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 
3.8 X X X X X X X  
3.9 X X X X X X X  
3.10    X X X X X 
3.11      X X X 
3.12       X X",
    "domain": "test.com",
    "hash": "#requirements",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management",
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client",
      },
      "h2": {
        "id": "requirements",
        "title": "Requirements",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-requirements",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Requirements",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.baseUpload",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "code_snippets": [
      {
        "code": "curl -F "UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY" -F "my_file.jpg=@my_file.jpg" "https://upload.uploadcare.com/base/"",
      },
    ],
    "default_environment_id": "Default",
    "description": "Direct file uploads comply with the RFC 7578 standard.
In other words, you can perform a direct upload by making an HTTP POST request with the Content-Type
header set to multipart/form-data.
Note: Direct file uploads support files smaller than 100 megabytes only.
If you would like to upload larger files, please use Multipart Uploads instead.
File upload example with curl:",
    "domain": "test.com",
    "endpoint_path": "/base",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.baseUpload",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/base-upload",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Direct uploads",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.multipartFileUploadStart",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "default_environment_id": "Default",
    "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to
explicitly trigger AWS S3 Transfer Acceleration.
When you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.
To upload large files, 3 requests are sent in sequence:
/multipart/start/

<presigned-url-x>

/multipart/complete/.


Note: Multipart uploads support files larger than 10 megabytes only.",
    "domain": "test.com",
    "endpoint_path": "/multipart/start",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadStart",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/multipart-file-upload-start",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Start multipart upload",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.multipartFileUploadPart",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "default_environment_id": "Default",
    "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the
/multipart/start/ endpoint.
Each uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.
You can upload the file parts in parallel provided that the byte order stays unchanged.
Note: You MUST define Content-Type header for your data.",
    "domain": "test.com",
    "endpoint_path": "/<presigned-url-x>",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "PUT",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadPart",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/multipart-file-upload-part",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Upload individual file parts",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.multipartFileUploadComplete",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "default_environment_id": "Default",
    "description": "Once all the file parts have been uploaded successfully, complete the
upload session to assemble all the file parts into a single resulting file.",
    "domain": "test.com",
    "endpoint_path": "/multipart/complete",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadComplete",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/multipart-file-upload-complete",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Complete multipart upload",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.fromURLUpload",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "default_environment_id": "Default",
    "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the
fetched file to your project.
Upload tokens
Requests to the endpoint return a JSON dictionary with a token that can be further used
to check the status of the upload
request.
Note: The token is not a file ID and can't be used to address the file directly.
The actual file ID should be retrieved by calling the /from_url/status/ endpoint.
Duplicates prevention
By default, every call to the /from_url/ endpoint with the same source_url results in
a new upload leading to file duplication.
If you would like Uploadcare to keep track of the requested URLs and avoid the duplicate
uploads, pass the save_URL_duplicates and check_URL_duplicates parameters described below.",
    "domain": "test.com",
    "endpoint_path": "/from_url",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fromURLUpload",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/from-url-upload",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Upload files from URLs",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.fromURLUploadStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "default_environment_id": "Default",
    "description": "The endpoint notifies about the progress of the task by changing the value of the status field:
the field is set to waiting initially

once the system starts processing the request, the field is set to progress

if the file is fetched and uploaded successfully, the status field is set to success
and the endpoint returns a JSON object holding information about the uploaded file

if the system fails to fetch/upload the file, the status field is set to error and
the error field is set to the cause of the error.",
    "domain": "test.com",
    "endpoint_path": "/from_url/status",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fromURLUploadStatus",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/from-url-upload-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check the status of a task to fetch/upload a file from a URL",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.fileUploadInfo",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "default_environment_id": "Default",
    "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).",
    "domain": "test.com",
    "endpoint_path": "/info",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fileUploadInfo",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/file-upload-info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get information about an uploaded file",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_groups.createFilesGroup",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/groups",
        "title": "Groups",
      },
    ],
    "default_environment_id": "Default",
    "description": "Create a file group from a set of already uploaded files.
The most common use case for creating a file group is when a user uploads
multiple files at once and then wants to display them together.
Note: A group itself and files within it MUST belong to the same project.
Note: Groups are immutable and the only way to add/remove a file to a group
is to create a new one.",
    "domain": "test.com",
    "endpoint_path": "/group",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups.subpackage_groups.createFilesGroup",
    "org_id": "test",
    "pathname": "/api/upload-api/groups/create-files-group",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Create a file group",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_groups.filesGroupInfo",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/groups",
        "title": "Groups",
      },
    ],
    "default_environment_id": "Default",
    "description": "Returns a JSON object with information about a file group (when the group was created,
number of the files in the group, etc).",
    "domain": "test.com",
    "endpoint_path": "/group/info",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups.subpackage_groups.filesGroupInfo",
    "org_id": "test",
    "pathname": "/api/upload-api/groups/files-group-info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get information about a file group",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "__package__.File metadata",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get file's metadata keys and values.",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid/metadata",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.__package__.File metadata",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get file's metadata",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.filesList",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "Getting a paginated list of files. If you need multiple results pages, use previous/next from the response to navigate back/forth.",
    "domain": "test.com",
    "endpoint_path": "/files",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesList",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/files-list",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "List of files",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.storeFile",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "Store a single file by UUID. When file is stored, it is available permanently. If not stored — it will only be available for 24 hours. If the parameter is omitted, it checks the Auto file storing setting of your Uploadcare project identified by the public_key provided in the auth-param.",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid/storage",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "PUT",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.storeFile",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/store-file",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Store file",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.deleteFileStorage",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "Removes individual files. Returns file info.
Note: this operation removes the file from storage but doesn't invalidate CDN cache.",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid/storage",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.deleteFileStorage",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/delete-file-storage",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete file",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.info",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get file information by its UUID (immutable).",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.info",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File info",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.filesStoring",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "Used to store multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.",
    "domain": "test.com",
    "endpoint_path": "/files/storage",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "PUT",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesStoring",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/files-storing",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Batch file storing",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.filesDelete",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "Used to delete multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.
Note: this operation removes files from storage but doesn't invalidate CDN cache.",
    "domain": "test.com",
    "endpoint_path": "/files/storage",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesDelete",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/files-delete",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Batch file delete",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.createLocalCopy",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "POST requests are used to copy original files or their modified versions to a default storage.
Source files MAY either be stored or just uploaded and MUST NOT be deleted.
Copying of large files is not supported at the moment. If the file CDN URL includes transformation operators, its size MUST NOT exceed 100 MB. If not, the size MUST NOT exceed 5 GB.",
    "domain": "test.com",
    "endpoint_path": "/files/local_copy",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.createLocalCopy",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/create-local-copy",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Copy file to local storage",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.createRemoteCopy",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "default_environment_id": "Default",
    "description": "POST requests are used to copy original files or their modified versions to a custom storage.
Source files MAY either be stored or just uploaded and MUST NOT be deleted.
Copying of large files is not supported at the moment. File size MUST NOT exceed 5 GB.",
    "domain": "test.com",
    "endpoint_path": "/files/remote_copy",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.createRemoteCopy",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/create-remote-copy",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Copy file to remote storage",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionExecute",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Execute AWS Rekognition Add-On for a given target to detect labels in an image. Note: Detected labels are stored in the file's appdata.",
    "domain": "test.com",
    "endpoint_path": "/addons/aws_rekognition_detect_labels/execute",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionExecute",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute AWS Rekognition",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionExecutionStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check the status of an Add-On execution request that had been started
using the Execute Add-On operation.",
    "domain": "test.com",
    "endpoint_path": "/addons/aws_rekognition_detect_labels/execute/status",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionExecutionStatus",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check AWS Rekognition execution status",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionDetectModerationLabelsExecute",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Execute AWS Rekognition Moderation Add-On for a given target to detect moderation labels in an image. Note: Detected moderation labels are stored in the file's appdata.",
    "domain": "test.com",
    "endpoint_path": "/addons/aws_rekognition_detect_moderation_labels/execute",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionDetectModerationLabelsExecute",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute AWS Rekognition Moderation",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check the status of an Add-On execution request that had been started
using the Execute Add-On operation.",
    "domain": "test.com",
    "endpoint_path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check AWS Rekognition Moderation execution status",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.ucClamavVirusScanExecute",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Execute ClamAV virus checking Add-On for a given target.",
    "domain": "test.com",
    "endpoint_path": "/addons/uc_clamav_virus_scan/execute",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.ucClamavVirusScanExecute",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute ClamAV",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.ucClamavVirusScanExecutionStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check the status of an Add-On execution request that had been started
using the Execute Add-On operation.",
    "domain": "test.com",
    "endpoint_path": "/addons/uc_clamav_virus_scan/execute/status",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.ucClamavVirusScanExecutionStatus",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check ClamAV execution status",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.removeBgExecute",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Execute remove.bg background image removal Add-On for a given target.",
    "domain": "test.com",
    "endpoint_path": "/addons/remove_bg/execute",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.removeBgExecute",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute Remove.bg",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.removeBgExecutionStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check the status of an Add-On execution request that had been started
using the Execute Add-On operation.",
    "domain": "test.com",
    "endpoint_path": "/addons/remove_bg/execute/status",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.removeBgExecutionStatus",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check Remove.bg execution status",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_fileMetadata.key",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file-metadata",
        "title": "File Metadata",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get the value of a single metadata key.",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid/metadata/:key",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.key",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata/key",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get metadata key's value",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_fileMetadata.updateFileMetadataKey",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file-metadata",
        "title": "File Metadata",
      },
    ],
    "default_environment_id": "Default",
    "description": "Update the value of a single metadata key. If the key does not exist, it will be created.",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid/metadata/:key",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "PUT",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.updateFileMetadataKey",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata/update-file-metadata-key",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Update metadata key's value",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_fileMetadata.deleteFileMetadataKey",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file-metadata",
        "title": "File Metadata",
      },
    ],
    "default_environment_id": "Default",
    "description": "Delete a file's metadata key.",
    "domain": "test.com",
    "endpoint_path": "/files/:uuid/metadata/:key",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.deleteFileMetadataKey",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata/delete-file-metadata-key",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete metadata key",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_group.groupsList",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/group",
        "title": "Group",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get a paginated list of groups.",
    "domain": "test.com",
    "endpoint_path": "/groups",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.groupsList",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group/groups-list",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "List of groups",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_group.info",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/group",
        "title": "Group",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get a file group by its ID.
Groups are identified in a way similar to individual files. A group ID consists of a UUID
followed by a “~” (tilde) character and a group size: integer number of the files in the group.",
    "domain": "test.com",
    "endpoint_path": "/groups/:uuid",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.info",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group/info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Group info",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_group.deleteGroup",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/group",
        "title": "Group",
      },
    ],
    "default_environment_id": "Default",
    "description": "Delete a file group by its ID.
Note: The operation only removes the group object itself. All the files that were part of the group are left as is.",
    "domain": "test.com",
    "endpoint_path": "/groups/:uuid",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.deleteGroup",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group/delete-group",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete group",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_project.info",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/project",
        "title": "Project",
      },
    ],
    "default_environment_id": "Default",
    "description": "Getting info about account project.",
    "domain": "test.com",
    "endpoint_path": "/project",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_project.subpackage_project.info",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/project/info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Project info",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.webhooksList",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "default_environment_id": "Default",
    "description": "List of project webhooks.",
    "domain": "test.com",
    "endpoint_path": "/webhooks",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.webhooksList",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/webhooks-list",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "List of webhooks",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.create",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "default_environment_id": "Default",
    "description": "Create and subscribe to a webhook. You can use webhooks to receive notifications about your uploads. For instance, once a file gets uploaded to your project, we can notify you by sending a message to a target URL.",
    "domain": "test.com",
    "endpoint_path": "/webhooks",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.create",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/create",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Create webhook",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.updateWebhook",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "default_environment_id": "Default",
    "description": "Update webhook attributes.",
    "domain": "test.com",
    "endpoint_path": "/webhooks/:id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "PUT",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.updateWebhook",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/update-webhook",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Update webhook",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.unsubscribe",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "default_environment_id": "Default",
    "description": "Unsubscribe and delete a webhook.",
    "domain": "test.com",
    "endpoint_path": "/webhooks/unsubscribe",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.unsubscribe",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/unsubscribe",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete webhook",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.documentConvertInfo",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "default_environment_id": "Default",
    "description": "The endpoint allows you to determine the document format and possible conversion formats.",
    "domain": "test.com",
    "endpoint_path": "/convert/document/:uuid",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvertInfo",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert-info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Document info",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.documentConvert",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "default_environment_id": "Default",
    "description": "Uploadcare allows you to convert files to different target formats. Check out the conversion capabilities for each supported format.",
    "domain": "test.com",
    "endpoint_path": "/convert/document",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvert",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Convert document",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.documentConvertStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "default_environment_id": "Default",
    "description": "Once you get a conversion job result, you can acquire a conversion job status via token. Just put it in your request URL as :token.",
    "domain": "test.com",
    "endpoint_path": "/convert/document/status/:token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvertStatus",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Document conversion job status",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.videoConvert",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "default_environment_id": "Default",
    "description": "Uploadcare video processing adjusts video quality, format (mp4, webm, ogg), and size, cuts it, and generates thumbnails. Processed video is instantly available over CDN.",
    "domain": "test.com",
    "endpoint_path": "/convert/video",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.videoConvert",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/video-convert",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Convert video",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.videoConvertStatus",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "default_environment_id": "Default",
    "description": "Once you get a processing job result, you can acquire a processing job status via token. Just put it in your request URL as :token.",
    "domain": "test.com",
    "endpoint_path": "/convert/video/status/:token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.videoConvertStatus",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/video-convert-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Video conversion job status",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "api_endpoint_id": "subpackage_fileInformation.fileInfoJson",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
      {
        "pathname": "/api/url-api/file-information",
        "title": "File Information",
      },
    ],
    "default_environment_id": "Default",
    "description": "Returns file-related information, such as image dimensions or geo
tagging data in the JSON format.",
    "domain": "test.com",
    "endpoint_path": "/:uuid/-/json",
    "environments": [
      {
        "id": "Default",
        "url": "https://ucarecdn.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation.subpackage_fileInformation.fileInfoJson",
    "org_id": "test",
    "pathname": "/api/url-api/file-information/file-info-json",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File info as JSON",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "api_endpoint_id": "subpackage_fileInformation.fileInfoJsonp",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
      {
        "pathname": "/api/url-api/file-information",
        "title": "File Information",
      },
    ],
    "default_environment_id": "Default",
    "description": "Same as the example above, but it returns data as the
application/javascript type.
The callback name should always be uploadcare_callback. It should
receive the two following arguments: id and a response object.
For original files, id is equivalent to their UUIDs.
For processed files, id is equivalent to their URLs, excluding
the last operation, jsonp.",
    "domain": "test.com",
    "endpoint_path": "/:uuid/-/jsonp",
    "environments": [
      {
        "id": "Default",
        "url": "https://ucarecdn.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation.subpackage_fileInformation.fileInfoJsonp",
    "org_id": "test",
    "pathname": "/api/url-api/file-information/file-info-jsonp",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File info as application/javascript",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "api_endpoint_id": "subpackage_fileNames.fileWithName",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
      {
        "pathname": "/api/url-api/file-names",
        "title": "File Names",
      },
    ],
    "default_environment_id": "Default",
    "description": "You can set an optional filename that users will see instead of
the original name.",
    "domain": "test.com",
    "endpoint_path": "/:uuid/:filename",
    "environments": [
      {
        "id": "Default",
        "url": "https://ucarecdn.com",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileNames.subpackage_fileNames.fileWithName",
    "org_id": "test",
    "pathname": "/api/url-api/file-names/file-with-name",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File with a custom name",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "root",
    "objectID": "test:test.com:root__navigation_record",
    "org_id": "test",
    "pathname": "/",
    "title": "Uploadcare | Documentation",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "puzzle",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.docs__navigation_record",
    "org_id": "test",
    "pathname": "/docs",
    "title": "Guides",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.introduction__navigation_record",
    "org_id": "test",
    "pathname": "/docs/introduction",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Introduction",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.intro__navigation_record",
    "org_id": "test",
    "pathname": "/docs/introduction/intro",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart__navigation_record",
    "org_id": "test",
    "pathname": "/docs/introduction/start/quickstart",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Quick start",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security__navigation_record",
    "org_id": "test",
    "pathname": "/docs/introduction/security",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Security",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/introduction",
        "title": "Introduction",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing__navigation_record",
    "org_id": "test",
    "pathname": "/docs/introduction/billing",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Billing",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.uploading__navigation_record",
    "org_id": "test",
    "pathname": "/docs/uploading",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads__navigation_record",
    "org_id": "test",
    "pathname": "/docs/uploading/uploads",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files__navigation_record",
    "org_id": "test",
    "pathname": "/docs/uploading/uploading-files",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Uploading files",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
    ],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader__navigation_record",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File Uploader",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/uploading",
        "title": "Uploading",
      },
      {
        "pathname": "/docs/uploading/file-uploader",
        "title": "File Uploader",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader__navigation_record",
    "org_id": "test",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.optimization__navigation_record",
    "org_id": "test",
    "pathname": "/docs/optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Optimization",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/optimization",
        "title": "Optimization",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization__navigation_record",
    "org_id": "test",
    "pathname": "/docs/optimization/image-optimization",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Image optimization",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations__navigation_record",
    "org_id": "test",
    "pathname": "/docs/image-transformations",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Image transformations",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/image-transformations",
        "title": "Image transformations",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview__navigation_record",
    "org_id": "test",
    "pathname": "/docs/image-transformations/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.delivery__navigation_record",
    "org_id": "test",
    "pathname": "/docs/delivery",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Delivery",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/delivery",
        "title": "Delivery",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview__navigation_record",
    "org_id": "test",
    "pathname": "/docs/delivery/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.file-management__navigation_record",
    "org_id": "test",
    "pathname": "/docs/file-management",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "File management",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/file-management",
        "title": "File management",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview__navigation_record",
    "org_id": "test",
    "pathname": "/docs/file-management/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Guides",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "puzzle",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.docs/integrations__navigation_record",
    "org_id": "test",
    "pathname": "/docs/integrations",
    "title": "Integrations",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations__navigation_record",
    "org_id": "test",
    "pathname": "/docs/integrations/all-integrations",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "All integrations",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients__navigation_record",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "API clients",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/integrations/api-clients",
        "title": "API clients",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python__navigation_record",
    "org_id": "test",
    "pathname": "/docs/integrations/api-clients/python",
    "tab": {
      "pathname": "/docs/integrations",
      "title": "Integrations",
    },
    "title": "Python",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "puzzle",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.api__navigation_record",
    "org_id": "test",
    "pathname": "/api",
    "title": "API References",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "apiReference",
    "objectID": "test:test.com:root.uv.api.api.upload-api__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Upload API",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Upload",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.baseUpload__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/base-upload",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Direct uploads",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadStart__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/multipart-file-upload-start",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Start multipart upload",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadPart__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/multipart-file-upload-part",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Upload individual file parts",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadComplete__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/multipart-file-upload-complete",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Complete multipart upload",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fromURLUpload__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/from-url-upload",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Upload files from URLs",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fromURLUploadStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/from-url-upload-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check the status of a task to fetch/upload a file from a URL",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/upload",
        "title": "Upload",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fileUploadInfo__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/upload/file-upload-info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get information about an uploaded file",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/groups",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Groups",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/groups",
        "title": "Groups",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups.subpackage_groups.createFilesGroup__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/groups/create-files-group",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Create a file group",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/upload-api",
        "title": "Upload API",
      },
      {
        "pathname": "/api/upload-api/groups",
        "title": "Groups",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups.subpackage_groups.filesGroupInfo__navigation_record",
    "org_id": "test",
    "pathname": "/api/upload-api/groups/files-group-info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get information about a file group",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "apiReference",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "REST API v0.7",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.__package__.File metadata__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get file's metadata",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesList__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/files-list",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "List of files",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.storeFile__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/store-file",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Store file",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.deleteFileStorage__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/delete-file-storage",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete file",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.info__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File info",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesStoring__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/files-storing",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Batch file storing",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesDelete__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/files-delete",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Batch file delete",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.createLocalCopy__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/create-local-copy",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Copy file to local storage",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file",
        "title": "File",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.createRemoteCopy__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file/create-remote-copy",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Copy file to remote storage",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Add Ons",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionExecute__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute AWS Rekognition",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionExecutionStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check AWS Rekognition execution status",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionDetectModerationLabelsExecute__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute AWS Rekognition Moderation",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check AWS Rekognition Moderation execution status",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.ucClamavVirusScanExecute__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute ClamAV",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.ucClamavVirusScanExecutionStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check ClamAV execution status",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.removeBgExecute__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execute",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Execute Remove.bg",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/add-ons",
        "title": "Add Ons",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.removeBgExecutionStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execution-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Check Remove.bg execution status",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file-metadata",
        "title": "File Metadata",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.key__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata/key",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Get metadata key's value",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file-metadata",
        "title": "File Metadata",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.updateFileMetadataKey__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata/update-file-metadata-key",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Update metadata key's value",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/file-metadata",
        "title": "File Metadata",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.deleteFileMetadataKey__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/file-metadata/delete-file-metadata-key",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete metadata key",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Group",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/group",
        "title": "Group",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.groupsList__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group/groups-list",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "List of groups",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/group",
        "title": "Group",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.info__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group/info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Group info",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/group",
        "title": "Group",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.deleteGroup__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/group/delete-group",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete group",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_project__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/project",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Project",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/project",
        "title": "Project",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_project.subpackage_project.info__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/project/info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Project info",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Webhook",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.webhooksList__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/webhooks-list",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "List of webhooks",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.create__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/create",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Create webhook",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.updateWebhook__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/update-webhook",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Update webhook",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/webhook",
        "title": "Webhook",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.unsubscribe__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/webhook/unsubscribe",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Delete webhook",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Conversion",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvertInfo__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert-info",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Document info",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvert__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Convert document",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvertStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Document conversion job status",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.videoConvert__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/video-convert",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Convert video",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/rest-api-v-0-7",
        "title": "REST API v0.7",
      },
      {
        "pathname": "/api/rest-api-v-0-7/conversion",
        "title": "Conversion",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.videoConvertStatus__navigation_record",
    "org_id": "test",
    "pathname": "/api/rest-api-v-0-7/conversion/video-convert-status",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "Video conversion job status",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "apiReference",
    "objectID": "test:test.com:root.uv.api.api.url-api__navigation_record",
    "org_id": "test",
    "pathname": "/api/url-api",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "URL API",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation__navigation_record",
    "org_id": "test",
    "pathname": "/api/url-api/file-information",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File Information",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
      {
        "pathname": "/api/url-api/file-information",
        "title": "File Information",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation.subpackage_fileInformation.fileInfoJson__navigation_record",
    "org_id": "test",
    "pathname": "/api/url-api/file-information/file-info-json",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File info as JSON",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
      {
        "pathname": "/api/url-api/file-information",
        "title": "File Information",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation.subpackage_fileInformation.fileInfoJsonp__navigation_record",
    "org_id": "test",
    "pathname": "/api/url-api/file-information/file-info-jsonp",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File info as application/javascript",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileNames__navigation_record",
    "org_id": "test",
    "pathname": "/api/url-api/file-names",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File Names",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/api/url-api",
        "title": "URL API",
      },
      {
        "pathname": "/api/url-api/file-names",
        "title": "File Names",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileNames.subpackage_fileNames.fileWithName__navigation_record",
    "org_id": "test",
    "pathname": "/api/url-api/file-names/file-with-name",
    "tab": {
      "pathname": "/api",
      "title": "API References",
    },
    "title": "File with a custom name",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
]