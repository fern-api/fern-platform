[
  {
    "objectID": "test:test.com:root.uv.home.home.welcome-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/home",
    "pathname": "/home",
    "title": "🏠 Welcome",
    "breadcrumb": [],
    "tab": {
      "title": "Home",
      "pathname": "/home"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "The easiest way to use LLMs",
    "content": "BAML is a domain-specific language to generate structured outputs from LLMs -- with the best developer experience.\nWith BAML you can build reliable Agents, Chatbots with RAG, extract data from PDFs, and more."
  },
  {
    "objectID": "test:test.com:root.uv.home.home.welcome-a-small-sample-of-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/home",
    "pathname": "/home",
    "title": "A small sample of features:",
    "breadcrumb": [],
    "tab": {
      "title": "Home",
      "pathname": "/home"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#a-small-sample-of-features",
    "content": "An amazingly fast developer experience for prompting in the BAML VSCode playground\n\nFully type-safe outputs, even when streaming structured data (that means autocomplete!)\n\nFlexibility -- it works with any LLM, any language, and any schema.\n\nState-of-the-art structured outputs that even outperform OpenAI with their own models -- plus it works with OpenSource models.",
    "hierarchy": {
      "h0": {
        "title": "🏠 Welcome"
      },
      "h3": {
        "id": "a-small-sample-of-features",
        "title": "A small sample of features:"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.home.home.welcome-products-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/home",
    "pathname": "/home",
    "title": "Products",
    "breadcrumb": [],
    "tab": {
      "title": "Home",
      "pathname": "/home"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#products",
    "content": "Everything you need to know about how to get started with BAML. From installation to prompt engineering techniques.\n\n\nAn online interactive playground to playaround with BAML without any installations.\n\n\nExamples of prompts, projects, and more.\n\n\nLanguage docs on all BAML syntax. Quickly learn syntax with simple examples and code snippets.",
    "hierarchy": {
      "h0": {
        "title": "🏠 Welcome"
      },
      "h2": {
        "id": "products",
        "title": "Products"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.home.home.welcome-motivation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/home",
    "pathname": "/home",
    "title": "Motivation",
    "breadcrumb": [],
    "tab": {
      "title": "Home",
      "pathname": "/home"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#motivation",
    "content": "Prompts are more than just f-strings; they're actual functions with logic that can quickly become complex to organize, maintain, and test.\nCurrently, developers craft LLM prompts as if they're writing raw HTML and CSS in text files, lacking:\nType safety\n\nHot-reloading or previews\n\nLinting\n\n\nThe situation worsens when dealing with structured outputs. Since most prompts rely on Python and Pydantic, developers must execute their code and set up an entire Python environment just to test a minor prompt adjustment, or they have to setup a whole Python microservice just to call an LLM.\nBAML allows you to view and run prompts directly within your editor, similar to how Markdown Preview function -- no additional setup necessary, that interoperates with all your favorite languages and frameworks.\nJust as TSX/JSX provided the ideal abstraction for web development, BAML offers the perfect abstraction for prompt engineering. Watch our demo video to see it in action.",
    "hierarchy": {
      "h0": {
        "title": "🏠 Welcome"
      },
      "h2": {
        "id": "motivation",
        "title": "Motivation"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.home.home.welcome-comparisons-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/home",
    "pathname": "/home",
    "title": "Comparisons",
    "breadcrumb": [],
    "tab": {
      "title": "Home",
      "pathname": "/home"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#comparisons",
    "content": "Here's our in-depth comparison with a couple of popular frameworks:\nBAML vs Pydantic\n\nBAML vs Marvin",
    "hierarchy": {
      "h0": {
        "title": "🏠 Welcome"
      },
      "h2": {
        "id": "comparisons",
        "title": "Comparisons"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.what-is-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/what-is-baml",
    "pathname": "/guide/introduction/what-is-baml",
    "icon": "fa-regular fa-question-circle",
    "title": "What is BAML?",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The best way to understand BAML and its developer experience is to see it live in a demo (see below)."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.what-is-baml-demo-video-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/what-is-baml",
    "pathname": "/guide/introduction/what-is-baml",
    "icon": "fa-regular fa-question-circle",
    "title": "Demo video",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#demo-video",
    "content": "Here we write a BAML function definition, and then call it from a Python script.",
    "hierarchy": {
      "h0": {
        "title": "What is BAML?"
      },
      "h3": {
        "id": "demo-video",
        "title": "Demo video"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.what-is-baml-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/what-is-baml",
    "pathname": "/guide/introduction/what-is-baml",
    "icon": "fa-regular fa-question-circle",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples",
    "content": "Interactive NextJS app with streaming\n\nStarter boilerplates for Python, Typescript, Ruby, etc.",
    "hierarchy": {
      "h0": {
        "title": "What is BAML?"
      },
      "h3": {
        "id": "examples",
        "title": "Examples"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.what-is-baml-high-level-developer-flow-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/what-is-baml",
    "pathname": "/guide/introduction/what-is-baml",
    "icon": "fa-regular fa-question-circle",
    "title": "High-level Developer Flow",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#high-level-developer-flow",
    "content": "Write a BAML function definition\nHere you can run tests in the VSCode Playground.\nGenerate baml_client from those .baml files.\nThis is auto-generated code with all boilerplate to call the LLM endpoint, parse the output, fix broken JSON, and handle errors.\n\n\nCall your function in any language\nwith type-safety, autocomplete, retry-logic, robust JSON parsing, etc..\n\n\nContinue on to the Installation Guides for your language to setup BAML in a few minutes!\nYou don't need to migrate 100% of your LLM code to BAML in one go! It works along-side any existing LLM framework.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "main.baml",
        "code": "class WeatherAPI {\n  city string @description(\"the user's city\")\n  timeOfDay string @description(\"As an ISO8601 timestamp\")\n}\n\nfunction UseTool(user_message: string) -> WeatherAPI {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Extract.... {# we will explain the rest in the guides #}\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI\n\ndef main():\n    weather_info = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(weather_info)\n    assert isinstance(weather_info, WeatherAPI)\n    print(f\"City: {weather_info.city}\")\n    print(f\"Time of Day: {weather_info.timeOfDay}\")\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const weatherInfo = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(weatherInfo)\n  assert(weatherInfo instanceof WeatherAPI)\n  console.log(`City: ${weatherInfo.city}`)\n  console.log(`Time of Day: ${weatherInfo.timeOfDay}`)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  weather_info = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts weather_info\n  raise unless weather_info.is_a?(Baml::Types::WeatherAPI)\n  puts \"City: #{weather_info.city}\"\n  puts \"Time of Day: #{weather_info.timeOfDay}\"\nend"
      },
      {
        "lang": "python",
        "meta": "Other Languages",
        "code": "# read the installation guide for other languages!"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI\n\ndef main():\n    weather_info = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(weather_info)\n    assert isinstance(weather_info, WeatherAPI)\n    print(f\"City: {weather_info.city}\")\n    print(f\"Time of Day: {weather_info.timeOfDay}\")\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const weatherInfo = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(weatherInfo)\n  assert(weatherInfo instanceof WeatherAPI)\n  console.log(`City: ${weatherInfo.city}`)\n  console.log(`Time of Day: ${weatherInfo.timeOfDay}`)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  weather_info = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts weather_info\n  raise unless weather_info.is_a?(Baml::Types::WeatherAPI)\n  puts \"City: #{weather_info.city}\"\n  puts \"Time of Day: #{weather_info.timeOfDay}\"\nend"
      },
      {
        "lang": "python",
        "meta": "Other Languages",
        "code": "# read the installation guide for other languages!"
      },
      {
        "lang": "baml",
        "meta": "main.baml",
        "code": "class WeatherAPI {\n  city string @description(\"the user's city\")\n  timeOfDay string @description(\"As an ISO8601 timestamp\")\n}\n\nfunction UseTool(user_message: string) -> WeatherAPI {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Extract.... {# we will explain the rest in the guides #}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What is BAML?"
      },
      "h3": {
        "id": "high-level-developer-flow",
        "title": "High-level Developer Flow"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.baml_src-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/baml_src",
    "pathname": "/guide/introduction/baml_src",
    "icon": "fa-regular fa-folder",
    "title": "What is baml_src?",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "baml_src is where you keep all your BAML files, and where all the prompt-related code lives. It must be named baml_src for our tooling to pick it up, but it can live wherever you want.\nIt helps keep your project organized, and makes it easy to separate prompt engineering from the rest of your code.\n\n\nSome things to note:\nAll declarations within this directory are accessible across all files contained in the baml_src folder.\n\nYou can have multiple files, and even nest subdirectories.\n\n\nYou don't need to worry about including this directory when deploying your code. See: Deploying"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.baml_client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/baml_client",
    "pathname": "/guide/introduction/baml_client",
    "icon": "fa-regular fa-folder-gear",
    "title": "What is baml_client?",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import b\nresume_info = b.ExtractResume(\"....some text...\")"
      }
    ],
    "content": "baml_client is the code that gets generated from your BAML files that transforms your BAML prompts into the same equivalent function in your language, with validated type-safe outputs.\n\n\nThis has all the boilerplate to:\ncall the LLM endpoint with the right parameters,\n\nparse the output,\n\nfix broken JSON (if any)\n\nreturn the result in a nice typed object.\n\nhandle errors\n\n\nIn Python, your BAML types get converted to Pydantic models. In Typescript, they get converted to TypeScript types, and so on. BAML acts like a universal type system that can be used in any language."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.introduction.baml_client-generating-baml_client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/introduction/baml_client",
    "pathname": "/guide/introduction/baml_client",
    "icon": "fa-regular fa-folder-gear",
    "title": "Generating baml_client",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/guide/introduction"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#generating-baml_client",
    "content": "Refer to the Installation guides for how to set this up for your language, and how to generate it.\nBut at a high-level, you just include a generator block in any of your BAML files.\n\n\nThe baml_client transforms a BAML function into the same equivalent function in your language,",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "Python",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"sync\"\n    \n    // Version of runtime to generate code for (should match installed baml-py version)\n    version \"0.54.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "TypeScript",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n    \n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.54.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "Ruby (beta)",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"ruby/sorbet\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "OpenAPI",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"rest/openapi\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n\n    // 'baml-cli generate' will run this after generating openapi.yaml, to generate your OpenAPI client\n    // This command will be run from within $output_dir\n    on_generate \"npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g OPENAPI_CLIENT_TYPE -o .\"\n}"
      },
      {
        "lang": "baml",
        "meta": "Python",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"sync\"\n    \n    // Version of runtime to generate code for (should match installed baml-py version)\n    version \"0.54.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "TypeScript",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n    \n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.54.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "Ruby (beta)",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"ruby/sorbet\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "OpenAPI",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"rest/openapi\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n\n    // 'baml-cli generate' will run this after generating openapi.yaml, to generate your OpenAPI client\n    // This command will be run from within $output_dir\n    on_generate \"npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g OPENAPI_CLIENT_TYPE -o .\"\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What is baml_client?"
      },
      "h3": {
        "id": "generating-baml_client",
        "title": "Generating baml_client"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.vs-code-extension-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/vs-code-extension",
    "pathname": "/guide/installation-editors/vs-code-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "VSCode Extension",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "We provide a BAML VSCode extension:     https://marketplace.visualstudio.com/items?itemName=Boundary.baml-extension\nFeature Supported \nSyntax highlighting for BAML files ✅ \nCode snippets for BAML ✅ \nLLM playground for testing BAML functions ✅ \nJump to definition for BAML files ✅ \nJump to definition between Python/TS files and BAML files ✅ \nAuto generate baml_client on save ✅ \nBAML formatter ❌"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.vs-code-extension-opening-baml-playground-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/vs-code-extension",
    "pathname": "/guide/installation-editors/vs-code-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "Opening BAML Playground",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#opening-baml-playground",
    "content": "Once you open a .baml file, in VSCode, you should see a small button over every BAML function: Open Playground.\n\n\nOr type BAML Playground in the VSCode Command Bar (CMD + Shift + P or CTRL + Shift + P) to open the playground.",
    "hierarchy": {
      "h0": {
        "title": "VSCode Extension"
      },
      "h2": {
        "id": "opening-baml-playground",
        "title": "Opening BAML Playground"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.vs-code-extension-setting-env-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/vs-code-extension",
    "pathname": "/guide/installation-editors/vs-code-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "Setting Env Variables",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setting-env-variables",
    "content": "Click on the Settings button in top right of the playground and set the environment variables.\nIt should have an indicator saying how many unset variables are there.\n\n\nThe playground should persist the environment variables between closing and opening VSCode.\n\n\nYou can set environment variables lazily. If anything is unset you'll get an error when you run the function.\n\n\nEnvironment Variables are stored in VSCode's local storage! We don't save any additional data to disk, or send them across the network.",
    "hierarchy": {
      "h0": {
        "title": "VSCode Extension"
      },
      "h2": {
        "id": "setting-env-variables",
        "title": "Setting Env Variables"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.vs-code-extension-running-tests-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/vs-code-extension",
    "pathname": "/guide/installation-editors/vs-code-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "Running Tests",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#running-tests",
    "content": "Click on the Run All Tests button in the playground.\n\nPress the ▶️ button next to an individual test case to run that just that test case.",
    "hierarchy": {
      "h0": {
        "title": "VSCode Extension"
      },
      "h2": {
        "id": "running-tests",
        "title": "Running Tests"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.vs-code-extension-switching-functions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/vs-code-extension",
    "pathname": "/guide/installation-editors/vs-code-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "Switching Functions",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#switching-functions",
    "content": "The playground will automatically switch to the function you're currently editing.\nTo manually change it, click on the current function name in the playground (next to the dropdown) and search for your desired function.",
    "hierarchy": {
      "h0": {
        "title": "VSCode Extension"
      },
      "h2": {
        "id": "switching-functions",
        "title": "Switching Functions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.vs-code-extension-switching-test-cases-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/vs-code-extension",
    "pathname": "/guide/installation-editors/vs-code-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "Switching Test Cases",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#switching-test-cases",
    "content": "The test case with the highlighted background is the currently rendered test case. Clicking on a different test case will render that test case.\n\n\nYou can toggle between seeing the results of all test cases or all test cases for the current function.",
    "hierarchy": {
      "h0": {
        "title": "VSCode Extension"
      },
      "h2": {
        "id": "switching-test-cases",
        "title": "Switching Test Cases"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.cursor-extension-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/cursor-extension",
    "pathname": "/guide/installation-editors/cursor-extension",
    "icon": "fa-brands fa-microsoft",
    "title": "Cursor",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Refer to the Cursor Extension Installation Guide to install the extension in Cursor.\n\n\nYou may need to update BAML extension manually using the process above. Auto-update does not seem to be working well for many extensions in Cursor."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-editors.others-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-editors/others",
    "pathname": "/guide/installation-editors/others",
    "icon": "fa-brands fa-microsoft",
    "title": "Others",
    "breadcrumb": [
      {
        "title": "Installation: Editors",
        "pathname": "/guide/installation-editors"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "We don't currently have any tier support for any other editors.\nJetBrains IDEs\n\nHelix\n\nZed\n\nVim\n\nEmacs\n\nSublime Text\n\nAtom\n\n\nSince the extension is a language server, we can technically pull out the language server and syntax highlighter and support any editor supporting the language server protocol.\nIf you're interested in contributing to the project and supporting another editor, please reach out.\nAn alternative is to edit your files in our Playground, and copy the code into your editor, but we recommend using VSCode to edit BAML files for now."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-language.python-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-language/python",
    "pathname": "/guide/installation-language/python",
    "icon": "fa-brands fa-python",
    "title": "Python",
    "breadcrumb": [
      {
        "title": "Installation: Language",
        "pathname": "/guide/installation-language"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "json",
        "code": "{\n  \"python.analysis.typeCheckingMode\": \"basic\"\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"python.analysis.typeCheckingMode\": \"basic\"\n}"
      },
      {
        "lang": "bash",
        "meta": "pip",
        "code": "pip install baml-py"
      },
      {
        "lang": "bash",
        "meta": "poetry",
        "code": "poetry add baml-py"
      },
      {
        "lang": "bash",
        "meta": "uv",
        "code": "uv add baml-py"
      },
      {
        "lang": "bash",
        "meta": "pip",
        "code": "pip install baml-py"
      },
      {
        "lang": "bash",
        "meta": "poetry",
        "code": "poetry add baml-py"
      },
      {
        "lang": "bash",
        "meta": "uv",
        "code": "uv add baml-py"
      },
      {
        "lang": "bash",
        "meta": "pip",
        "code": "baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "poetry",
        "code": "poetry run baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "uv",
        "code": "uv run baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "pip",
        "code": "baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "poetry",
        "code": "poetry run baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "uv",
        "code": "uv run baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "pip",
        "code": "baml-cli generate"
      },
      {
        "lang": "bash",
        "meta": "poetry",
        "code": "poetry run baml-cli generate"
      },
      {
        "lang": "bash",
        "meta": "uv",
        "code": "uv run baml-cli generate"
      },
      {
        "lang": "bash",
        "meta": "pip",
        "code": "baml-cli generate"
      },
      {
        "lang": "bash",
        "meta": "poetry",
        "code": "poetry run baml-cli generate"
      },
      {
        "lang": "bash",
        "meta": "uv",
        "code": "uv run baml-cli generate"
      },
      {
        "lang": "python",
        "meta": "main.py ",
        "code": "from baml_client.sync_client import b\nfrom baml_client.types import Resume\n\ndef example(raw_resume: str) -> Resume: \n  # BAML's internal parser guarantees ExtractResume\n  # to be always return a Resume type\n  response = b.ExtractResume(raw_resume)\n  return response\n\ndef example_stream(raw_resume: str) -> Resume:\n  stream = b.stream.ExtractResume(raw_resume)\n  for msg in stream:\n    print(msg) # This will be a PartialResume type\n  \n  # This will be a Resume type\n  final = stream.get_final_response()\n\n  return final"
      },
      {
        "lang": "python",
        "meta": "async_main.py",
        "code": "from baml_client.async_client import b\nfrom baml_client.types import Resume\n\nasync def example(raw_resume: str) -> Resume: \n  # BAML's internal parser guarantees ExtractResume\n  # to be always return a Resume type\n  response = await b.ExtractResume(raw_resume)\n  return response\n\nasync def example_stream(raw_resume: str) -> Resume:\n  stream = b.stream.ExtractResume(raw_resume)\n  async for msg in stream:\n    print(msg) # This will be a PartialResume type\n  \n  # This will be a Resume type\n  final = stream.get_final_response()\n\n  return final"
      },
      {
        "lang": "python",
        "meta": "main.py ",
        "code": "from baml_client.sync_client import b\nfrom baml_client.types import Resume\n\ndef example(raw_resume: str) -> Resume: \n  # BAML's internal parser guarantees ExtractResume\n  # to be always return a Resume type\n  response = b.ExtractResume(raw_resume)\n  return response\n\ndef example_stream(raw_resume: str) -> Resume:\n  stream = b.stream.ExtractResume(raw_resume)\n  for msg in stream:\n    print(msg) # This will be a PartialResume type\n  \n  # This will be a Resume type\n  final = stream.get_final_response()\n\n  return final"
      },
      {
        "lang": "python",
        "meta": "async_main.py",
        "code": "from baml_client.async_client import b\nfrom baml_client.types import Resume\n\nasync def example(raw_resume: str) -> Resume: \n  # BAML's internal parser guarantees ExtractResume\n  # to be always return a Resume type\n  response = await b.ExtractResume(raw_resume)\n  return response\n\nasync def example_stream(raw_resume: str) -> Resume:\n  stream = b.stream.ExtractResume(raw_resume)\n  async for msg in stream:\n    print(msg) # This will be a PartialResume type\n  \n  # This will be a Resume type\n  final = stream.get_final_response()\n\n  return final"
      }
    ],
    "content": "You can check out this repo:\nhttps://github.com/BoundaryML/baml-examples/tree/main/python-fastapi-starterTo set up BAML with Python do the following:\n\n\nInstall BAML VSCode/Cursor Extension\nhttps://marketplace.visualstudio.com/items?itemName=boundary.baml-extension\nsyntax highlighting\n\ntesting playground\n\nprompt previews\n\n\n\n\nIn your VSCode User Settings, highly recommend adding this to get better autocomplete for python in general, not just BAML.\nInstall BAML\n\n\nAdd BAML to your existing project\nThis will give you some starter BAML code in a baml_src directory.\n\n\nGenerate the baml_client python module from .baml files\nOne of the files in your baml_src directory will have a generator block. The next commmand will auto-generate the baml_client directory, which will have auto-generated python code to call your BAML functions.\nAny types defined in .baml files will be converted into Pydantic models in the baml_client directory.\n\n\nSee What is baml_client to learn more about how this works.\n\n\n\n\nIf you set up the VSCode extension, it will automatically run baml-cli generate on saving a BAML file.\nUse a BAML function in Python!\n\n\nIf baml_client doesn't exist, make sure to run the previous step!"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-language.python-baml-with-jupyter-notebooks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-language/python",
    "pathname": "/guide/installation-language/python",
    "icon": "fa-brands fa-python",
    "title": "BAML with Jupyter Notebooks",
    "breadcrumb": [
      {
        "title": "Installation: Language",
        "pathname": "/guide/installation-language"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#baml-with-jupyter-notebooks",
    "content": "You can use the baml_client in a Jupyter notebook.\nOne of the common problems is making sure your code changes are picked up by the notebook without having to restart the whole kernel (and re-run all the cells)\nTo make sure your changes in .baml files are reflected in your notebook you must do these steps:\n\n\nSetup the autoreload extension\nThis will make sure to reload imports, such as baml_client's \"b\" object before every cell runs.\nImport baml_client module in your notebook\nNote it's different from how we import in python.\nUsually we import things as\nfrom baml_client import b, and we can call our functions using b, but the %autoreload notebook extension does not work well with from...import statements.\nCall BAML functions using the module name as a prefix\nNow your changes in .baml files are reflected in your notebook automatically, without needing to restart the Jupyter kernel.\n\n\nIf you want to keep using the from baml_client import b style, you'll just need to re-import it everytime you regenerate the baml_client.\n\n\nPylance will complain about any schema changes you make in .baml files. You can ignore these errors. If you want it to pick up your new types, you'll need to restart the kernel.\nThis auto-reload approach works best if you're only making changes to the prompts.\nYou're all set! Continue on to the Deployment Guides for your language to learn how to deploy your BAML code or check out the Interactive Examples to see more examples.",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "cell0",
        "code": "%load_ext autoreload\n%autoreload 2"
      },
      {
        "lang": "python",
        "meta": "cell1",
        "code": "# Assuming your baml_client is inside a dir called app/\nimport app.baml_client as client # you can name this \"llm\" or \"baml\" or whatever you want"
      },
      {
        "lang": "python",
        "meta": "cell2",
        "code": "raw_resume = \"Here's some resume text\"\nclient.b.ExtractResume(raw_resume)"
      },
      {
        "lang": "python",
        "meta": "cell0",
        "code": "%load_ext autoreload\n%autoreload 2"
      },
      {
        "lang": "python",
        "meta": "cell1",
        "code": "# Assuming your baml_client is inside a dir called app/\nimport app.baml_client as client # you can name this \"llm\" or \"baml\" or whatever you want"
      },
      {
        "lang": "python",
        "meta": "cell2",
        "code": "raw_resume = \"Here's some resume text\"\nclient.b.ExtractResume(raw_resume)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Python"
      },
      "h2": {
        "id": "baml-with-jupyter-notebooks",
        "title": "BAML with Jupyter Notebooks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-language.typescript-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-language/typescript",
    "pathname": "/guide/installation-language/typescript",
    "icon": "fa-brands fa-js",
    "title": "Typescript",
    "breadcrumb": [
      {
        "title": "Installation: Language",
        "pathname": "/guide/installation-language"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "bash",
        "meta": "npm",
        "code": "npm install @boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "pnpm",
        "code": "pnpm add @boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "yarn",
        "code": "yarn add @boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "deno",
        "code": "deno install npm:@boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "npm",
        "code": "npm install @boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "pnpm",
        "code": "pnpm add @boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "yarn",
        "code": "yarn add @boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "deno",
        "code": "deno install npm:@boundaryml/baml"
      },
      {
        "lang": "bash",
        "meta": "npm",
        "code": "npx baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "pnpm",
        "code": "pnpx baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "yarn",
        "code": "yarn baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "deno",
        "code": "dpx baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "npm",
        "code": "npx baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "pnpm",
        "code": "pnpx baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "yarn",
        "code": "yarn baml-cli init"
      },
      {
        "lang": "bash",
        "meta": "deno",
        "code": "dpx baml-cli init"
      },
      {
        "lang": "bash",
        "code": "npx baml-cli generate"
      },
      {
        "lang": "json",
        "meta": "package.json",
        "code": "{\n  \"scripts\": {\n    // Add a new command\n    \"baml-generate\": \"baml-cli generate\",\n    // Always call baml-generate on every build.\n    \"build\": \"npm run baml-generate && tsc --build\",\n  }\n}"
      },
      {
        "lang": "typescript",
        "meta": "index.ts",
        "code": "import {b} from \"baml_client\"\nimport type {Resume} from \"baml_client/types\"\n\nasync function Example(raw_resume: string): Resume {\n  // BAML's internal parser guarantees ExtractResume\n  // to be always return a Resume type\n  const response = await b.ExtractResume(raw_resume);\n  return response;\n}\n\nasync function ExampleStream(raw_resume: string): Resume {\n  const stream = b.stream.ExtractResume(raw_resume);\n  for await (const msg of stream) {\n    console.log(msg) // This will be a Partial<Resume> type\n  }\n\n  // This is guaranteed to be a Resume type.\n  return await stream.get_final_response();\n}"
      },
      {
        "lang": "typescript",
        "meta": "sync_example.ts",
        "code": "import {b} from \"baml_client/sync_client\"\nimport type {Resume} from \"baml_client/types\"\n\nfunction Example(raw_resume: string): Resume {\n  // BAML's internal parser guarantees ExtractResume\n  // to be always return a Resume type\n  const response = b.ExtractResume(raw_resume);\n  return response;\n}\n\n// Streaming is not available in the sync_client.\n"
      },
      {
        "lang": "typescript",
        "meta": "index.ts",
        "code": "import {b} from \"baml_client\"\nimport type {Resume} from \"baml_client/types\"\n\nasync function Example(raw_resume: string): Resume {\n  // BAML's internal parser guarantees ExtractResume\n  // to be always return a Resume type\n  const response = await b.ExtractResume(raw_resume);\n  return response;\n}\n\nasync function ExampleStream(raw_resume: string): Resume {\n  const stream = b.stream.ExtractResume(raw_resume);\n  for await (const msg of stream) {\n    console.log(msg) // This will be a Partial<Resume> type\n  }\n\n  // This is guaranteed to be a Resume type.\n  return await stream.get_final_response();\n}"
      },
      {
        "lang": "typescript",
        "meta": "sync_example.ts",
        "code": "import {b} from \"baml_client/sync_client\"\nimport type {Resume} from \"baml_client/types\"\n\nfunction Example(raw_resume: string): Resume {\n  // BAML's internal parser guarantees ExtractResume\n  // to be always return a Resume type\n  const response = b.ExtractResume(raw_resume);\n  return response;\n}\n\n// Streaming is not available in the sync_client.\n"
      },
      {
        "lang": "bash",
        "code": "npx baml-cli generate"
      },
      {
        "lang": "json",
        "meta": "package.json",
        "code": "{\n  \"scripts\": {\n    // Add a new command\n    \"baml-generate\": \"baml-cli generate\",\n    // Always call baml-generate on every build.\n    \"build\": \"npm run baml-generate && tsc --build\",\n  }\n}"
      }
    ],
    "content": "You can check out this repo: https://github.com/BoundaryML/baml-examples/tree/main/nextjs-starterTo set up BAML with Typescript do the following:\n\n\nInstall BAML VSCode/Cursor Extension\nhttps://marketplace.visualstudio.com/items?itemName=boundary.baml-extension\nsyntax highlighting\n\ntesting playground\n\nprompt previews\n\n\nInstall BAML\n\n\nAdd BAML to your existing project\nThis will give you some starter BAML code in a baml_src directory.\n\n\nGenerate the baml_client typescript package from .baml files\nOne of the files in your baml_src directory will have a generator block. This tells BAML how to generate the baml_client directory, which will have auto-generated typescript code to call your BAML functions.\nYou can modify your package.json so you have a helper prefix in front of your build command.\nSee What is baml_src to learn more about how this works.\n\n\n\n\nIf you set up the VSCode extension, it will automatically run baml-cli generate on saving a BAML file.\nUse a BAML function in Typescript!\n\n\nIf baml_client doesn't exist, make sure to run the previous step!"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-language.ruby-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-language/ruby",
    "pathname": "/guide/installation-language/ruby",
    "icon": "fa-regular fa-gem",
    "title": "Ruby",
    "breadcrumb": [
      {
        "title": "Installation: Language",
        "pathname": "/guide/installation-language"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "bash",
        "meta": "bundle",
        "code": "bundle add baml sorbet-runtime"
      },
      {
        "lang": "bash",
        "code": "bundle exec baml-cli init"
      },
      {
        "lang": "bash",
        "code": "bundle exec baml-cli generate"
      },
      {
        "lang": "ruby",
        "meta": "main.rb",
        "code": "require_relative \"baml_client/client\"\n\ndef example(raw_resume)\n    # r is an instance of Baml::Types::Resume, defined in baml_client/types\n    r = Baml.Client.ExtractResume(resume: raw_resume)\n\n    puts \"ExtractResume response:\"\n    puts r.inspect\nend\n\ndef example_stream(raw_resume)\n    stream = Baml.Client.stream.ExtractResume(resume: raw_resume)\n\n    stream.each do |msg|\n        # msg is an instance of Baml::PartialTypes::Resume\n        # defined in baml_client/partial_types\n        puts msg.inspect\n    end\n\n    stream.get_final_response\nend\n\nexample 'Grace Hopper created COBOL'\nexample_stream 'Grace Hopper created COBOL'"
      },
      {
        "lang": "ruby",
        "meta": "main.rb",
        "code": "require_relative \"baml_client/client\"\n\ndef example(raw_resume)\n    # r is an instance of Baml::Types::Resume, defined in baml_client/types\n    r = Baml.Client.ExtractResume(resume: raw_resume)\n\n    puts \"ExtractResume response:\"\n    puts r.inspect\nend\n\ndef example_stream(raw_resume)\n    stream = Baml.Client.stream.ExtractResume(resume: raw_resume)\n\n    stream.each do |msg|\n        # msg is an instance of Baml::PartialTypes::Resume\n        # defined in baml_client/partial_types\n        puts msg.inspect\n    end\n\n    stream.get_final_response\nend\n\nexample 'Grace Hopper created COBOL'\nexample_stream 'Grace Hopper created COBOL'"
      },
      {
        "lang": "bash",
        "meta": "bundle",
        "code": "bundle add baml sorbet-runtime"
      },
      {
        "lang": "bash",
        "code": "bundle exec baml-cli init"
      },
      {
        "lang": "bash",
        "code": "bundle exec baml-cli generate"
      }
    ],
    "content": "You can check out this repo: https://github.com/BoundaryML/baml-examples/tree/main/ruby-exampleTo set up BAML with Ruby do the following:\n\n\nInstall BAML VSCode Extension\nhttps://marketplace.visualstudio.com/items?itemName=boundary.baml-extension\nsyntax highlighting\n\ntesting playground\n\nprompt previews\n\n\nInstall BAML\nAdd BAML to your existing project\nThis will give you some starter BAML code in a baml_src directory.\nGenerate Ruby code from .baml files\n`\nSee What is baml_src to learn more about how this works.\n\n\nAs fun as writing BAML is, we want you be able to leverage BAML with existing ruby modules. This command gives you a ruby module that is a type-safe interface to every BAML function.\n\n\nOur VSCode extension automatically runs this command when you save a BAML file.\nUse a BAML function in Ruby!\n\n\nIf baml_client doesn't exist, make sure to run the previous step!"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-language.rest-api-other-languages-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-language/rest-api-other-languages",
    "pathname": "/guide/installation-language/rest-api-other-languages",
    "icon": "fa-regular fa-network-wired",
    "title": "REST API (other languages)",
    "breadcrumb": [
      {
        "title": "Installation: Language",
        "pathname": "/guide/installation-language"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "brew install npm openapi-generator\n# 'npm' will install npx\n# 'openapi-generator' will install both Java and openapi-generator-cli"
      },
      {
        "lang": "bash",
        "code": "brew install npm openapi-generator\n# 'npm' will install npx\n# 'openapi-generator' will install both Java and openapi-generator-cli"
      },
      {
        "lang": "bash",
        "code": "apt install npm default-jdk -y\n# 'npm' will install npx; 'default-jdk' will install java"
      },
      {
        "lang": "bash",
        "code": "apt install npm default-jdk -y\n# 'npm' will install npx; 'default-jdk' will install java"
      },
      {
        "lang": "bash",
        "code": "dnf install npm java-21-openjdk -y\n# dnf is the successor to yum"
      },
      {
        "lang": "bash",
        "code": "dnf install npm java-21-amazon-corretto -y\n# 'npm' will install npx\n# 'java-21-amazon-corretto' will install java"
      },
      {
        "lang": "bash",
        "code": "curl -sL https://rpm.nodesource.com/setup_16.x | bash -\nyum install nodejs -y\n# 'nodejs' will install npx\namazon-linux-extras install java-openjdk11 -y\n# 'java-openjdk11' will install java"
      },
      {
        "lang": "bash",
        "code": "dnf install npm java-21-openjdk -y\n# dnf is the successor to yum"
      },
      {
        "lang": "bash",
        "code": "dnf install npm java-21-amazon-corretto -y\n# 'npm' will install npx\n# 'java-21-amazon-corretto' will install java"
      },
      {
        "lang": "bash",
        "code": "curl -sL https://rpm.nodesource.com/setup_16.x | bash -\nyum install nodejs -y\n# 'nodejs' will install npx\namazon-linux-extras install java-openjdk11 -y\n# 'java-openjdk11' will install java"
      },
      {
        "lang": "powershell",
        "code": "npx -version\njava -version"
      },
      {
        "lang": "powershell",
        "code": "npx -version\njava -version"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type csharp"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type csharp"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type cpp-restsdk"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type cpp-restsdk"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type go"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type go"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type java"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type java"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type php"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type php"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type ruby"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type ruby"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type rust"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type rust"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type $OPENAPI_CLIENT_TYPE"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type $OPENAPI_CLIENT_TYPE"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml dev --preview"
      },
      {
        "lang": "go",
        "meta": "main.go",
        "code": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n  baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n\tcfg := baml.NewConfiguration()\n\tb := baml.NewAPIClient(cfg).DefaultAPI\n\textractResumeRequest := baml.ExtractResumeRequest{\n\t\tResume: \"Ada Lovelace (@gmail.com) was an English mathematician and writer\",\n\t}\n\tresp, r, err := b.ExtractResume(context.Background()).ExtractResumeRequest(extractResumeRequest).Execute()\n\tif err != nil {\n\t\tfmt.Printf(\"Error when calling b.ExtractResume: %v\\n\", err)\n\t\tfmt.Printf(\"Full HTTP response: %v\\n\", r)\n\t\treturn\n\t}\n\tlog.Printf(\"Response from server: %v\\n\", resp)\n}"
      },
      {
        "lang": "go",
        "meta": "main.go",
        "code": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n  baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n\tcfg := baml.NewConfiguration()\n\tb := baml.NewAPIClient(cfg).DefaultAPI\n\textractResumeRequest := baml.ExtractResumeRequest{\n\t\tResume: \"Ada Lovelace (@gmail.com) was an English mathematician and writer\",\n\t}\n\tresp, r, err := b.ExtractResume(context.Background()).ExtractResumeRequest(extractResumeRequest).Execute()\n\tif err != nil {\n\t\tfmt.Printf(\"Error when calling b.ExtractResume: %v\\n\", err)\n\t\tfmt.Printf(\"Full HTTP response: %v\\n\", r)\n\t\treturn\n\t}\n\tlog.Printf(\"Response from server: %v\\n\", resp)\n}"
      },
      {
        "lang": "xml",
        "meta": "pom.xml",
        "code": "<dependency>\n  <groupId>org.openapitools</groupId>\n  <artifactId>openapi-java-client</artifactId>\n  <version>0.1.0</version>\n  <scope>compile</scope>\n</dependency>"
      },
      {
        "lang": "kotlin",
        "meta": "settings.gradle.kts",
        "code": "repositories {\n    mavenCentral()\n    mavenLocal()\n}\n\ndependencies {\n    implementation(\"org.openapitools:openapi-java-client:0.1.0\")\n}"
      },
      {
        "lang": "xml",
        "meta": "pom.xml",
        "code": "<dependency>\n  <groupId>org.openapitools</groupId>\n  <artifactId>openapi-java-client</artifactId>\n  <version>0.1.0</version>\n  <scope>compile</scope>\n</dependency>"
      },
      {
        "lang": "kotlin",
        "meta": "settings.gradle.kts",
        "code": "repositories {\n    mavenCentral()\n    mavenLocal()\n}\n\ndependencies {\n    implementation(\"org.openapitools:openapi-java-client:0.1.0\")\n}"
      },
      {
        "lang": "xml",
        "meta": "pom.xml",
        "code": "<build>\n    <plugins>\n        <plugin>\n            <groupId>org.openapitools</groupId>\n            <artifactId>openapi-generator-maven-plugin</artifactId>\n            <version>7.8.0</version> <!-- Use the latest stable version -->\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>generate</goal>\n                    </goals>\n                    <configuration>\n                        <inputSpec>${project.basedir}/baml_client/openapi.yaml</inputSpec>\n                        <generatorName>baml</generatorName> <!-- or another generator name, e.g. 'kotlin' or 'spring' -->\n                        <output>${project.build.directory}/generated-sources/openapi</output>\n                        <apiPackage>com.boundaryml.baml_client.api</apiPackage>\n                        <modelPackage>com.boundaryml.baml_client.model</modelPackage>\n                        <invokerPackage>com.boundaryml.baml_client</invokerPackage>\n                        <java8>true</java8>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>"
      },
      {
        "lang": "kotlin",
        "meta": "settings.gradle.kts",
        "code": "plugins {\n    id(\"org.openapi.generator\") version \"7.8.0\"\n}\n\nopenApiGenerate {\n    generatorName.set(\"java\") // Change to 'kotlin', 'spring', etc. if needed\n    inputSpec.set(\"${projectDir}/baml_client/openapi.yaml\")\n    outputDir.set(\"$buildDir/generated-sources/openapi\")\n    apiPackage.set(\"com.boundaryml.baml_client.api\")\n    modelPackage.set(\"com.boundaryml.baml_client.model\")\n    invokerPackage.set(\"com.boundaryml.baml_client\")\n    additionalProperties.set(mapOf(\"java8\" to \"true\"))\n}\n\nsourceSets[\"main\"].java {\n    srcDir(\"$buildDir/generated-sources/openapi/src/main/java\")\n}\n\ntasks.named(\"compileJava\") {\n    dependsOn(\"openApiGenerate\")\n}"
      },
      {
        "lang": "xml",
        "meta": "pom.xml",
        "code": "<build>\n    <plugins>\n        <plugin>\n            <groupId>org.openapitools</groupId>\n            <artifactId>openapi-generator-maven-plugin</artifactId>\n            <version>7.8.0</version> <!-- Use the latest stable version -->\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>generate</goal>\n                    </goals>\n                    <configuration>\n                        <inputSpec>${project.basedir}/baml_client/openapi.yaml</inputSpec>\n                        <generatorName>baml</generatorName> <!-- or another generator name, e.g. 'kotlin' or 'spring' -->\n                        <output>${project.build.directory}/generated-sources/openapi</output>\n                        <apiPackage>com.boundaryml.baml_client.api</apiPackage>\n                        <modelPackage>com.boundaryml.baml_client.model</modelPackage>\n                        <invokerPackage>com.boundaryml.baml_client</invokerPackage>\n                        <java8>true</java8>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>"
      },
      {
        "lang": "kotlin",
        "meta": "settings.gradle.kts",
        "code": "plugins {\n    id(\"org.openapi.generator\") version \"7.8.0\"\n}\n\nopenApiGenerate {\n    generatorName.set(\"java\") // Change to 'kotlin', 'spring', etc. if needed\n    inputSpec.set(\"${projectDir}/baml_client/openapi.yaml\")\n    outputDir.set(\"$buildDir/generated-sources/openapi\")\n    apiPackage.set(\"com.boundaryml.baml_client.api\")\n    modelPackage.set(\"com.boundaryml.baml_client.model\")\n    invokerPackage.set(\"com.boundaryml.baml_client\")\n    additionalProperties.set(mapOf(\"java8\" to \"true\"))\n}\n\nsourceSets[\"main\"].java {\n    srcDir(\"$buildDir/generated-sources/openapi/src/main/java\")\n}\n\ntasks.named(\"compileJava\") {\n    dependsOn(\"openApiGenerate\")\n}"
      },
      {
        "lang": "Java",
        "code": "import com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\n// NOTE: baml_client/README.md will suggest importing from models.* - that is wrong.\n// See https://github.com/OpenAPITools/openapi-generator/issues/19431 for more details.\nimport com.boundaryml.baml_client.model.*;\nimport com.boundaryml.baml_client.api.DefaultApi;\n\npublic class Example {\n  public static void main(String[] args) {\n    ApiClient defaultClient = Configuration.getDefaultApiClient();\n    DefaultApi apiInstance = new DefaultApi(defaultClient);\n    ExtractResumeRequest extractResumeRequest = new ExtractResumeRequest(); // ExtractResumeRequest | \n    try {\n      Resume result = apiInstance.extractResume(extractResumeRequest);\n      System.out.println(result);\n    } catch (ApiException e) {\n      System.err.println(\"Exception when calling DefaultApi#extractResume\");\n      System.err.println(\"Status code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getResponseBody());\n      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n}\n"
      },
      {
        "lang": "Java",
        "code": "import com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\n// NOTE: baml_client/README.md will suggest importing from models.* - that is wrong.\n// See https://github.com/OpenAPITools/openapi-generator/issues/19431 for more details.\nimport com.boundaryml.baml_client.model.*;\nimport com.boundaryml.baml_client.api.DefaultApi;\n\npublic class Example {\n  public static void main(String[] args) {\n    ApiClient defaultClient = Configuration.getDefaultApiClient();\n    DefaultApi apiInstance = new DefaultApi(defaultClient);\n    ExtractResumeRequest extractResumeRequest = new ExtractResumeRequest(); // ExtractResumeRequest | \n    try {\n      Resume result = apiInstance.extractResume(extractResumeRequest);\n      System.out.println(result);\n    } catch (ApiException e) {\n      System.err.println(\"Exception when calling DefaultApi#extractResume\");\n      System.err.println(\"Status code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getResponseBody());\n      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n}\n"
      },
      {
        "lang": "json",
        "meta": "composer.json",
        "code": "    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"baml_client\"\n        }\n    ],\n    \"require\": {\n        \"boundaryml/baml-client\": \"*@dev\"\n    }"
      },
      {
        "lang": "PHP",
        "code": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$apiInstance = new BamlClient\\Api\\DefaultApi(\n    new GuzzleHttp\\Client()\n);\n$extract_resume_request = new BamlClient\\Model\\ExtractResumeRequest();\n$extract_resume_request->setResume(\"Marie Curie was a Polish and naturalised-French physicist and chemist who conducted pioneering research on radioactivity\");\n\ntry {\n    $result = $apiInstance->extractResume($extract_resume_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DefaultApi->extractResume: ', $e->getMessage(), PHP_EOL;\n}"
      },
      {
        "lang": "json",
        "meta": "composer.json",
        "code": "    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"baml_client\"\n        }\n    ],\n    \"require\": {\n        \"boundaryml/baml-client\": \"*@dev\"\n    }"
      },
      {
        "lang": "PHP",
        "code": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$apiInstance = new BamlClient\\Api\\DefaultApi(\n    new GuzzleHttp\\Client()\n);\n$extract_resume_request = new BamlClient\\Model\\ExtractResumeRequest();\n$extract_resume_request->setResume(\"Marie Curie was a Polish and naturalised-French physicist and chemist who conducted pioneering research on radioactivity\");\n\ntry {\n    $result = $apiInstance->extractResume($extract_resume_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DefaultApi->extractResume: ', $e->getMessage(), PHP_EOL;\n}"
      },
      {
        "lang": "ruby",
        "meta": "app.rb",
        "code": "require 'baml_client'\nrequire 'pp'\n\napi_client = BamlClient::ApiClient.new\nb = BamlClient::DefaultApi.new(api_client)\n\nextract_resume_request = BamlClient::ExtractResumeRequest.new(\n  resume: <<~RESUME\n    John Doe\n\n    Education\n    - University of California, Berkeley\n    - B.S. in Computer Science\n    - graduated 2020\n\n    Skills\n    - Python\n    - Java\n    - C++\n  RESUME\n)\n\nbegin\n  result = b.extract_resume(extract_resume_request)\n  pp result\n\n  edu0 = result.education[0]\n  puts \"Education: #{edu0.school}, #{edu0.degree}, #{edu0.year}\"\nrescue BamlClient::ApiError => e\n  puts \"Error when calling DefaultApi#extract_resume\"\n  pp e\nend"
      },
      {
        "lang": "ruby",
        "meta": "app.rb",
        "code": "require 'baml_client'\nrequire 'pp'\n\napi_client = BamlClient::ApiClient.new\nb = BamlClient::DefaultApi.new(api_client)\n\nextract_resume_request = BamlClient::ExtractResumeRequest.new(\n  resume: <<~RESUME\n    John Doe\n\n    Education\n    - University of California, Berkeley\n    - B.S. in Computer Science\n    - graduated 2020\n\n    Skills\n    - Python\n    - Java\n    - C++\n  RESUME\n)\n\nbegin\n  result = b.extract_resume(extract_resume_request)\n  pp result\n\n  edu0 = result.education[0]\n  puts \"Education: #{edu0.school}, #{edu0.degree}, #{edu0.year}\"\nrescue BamlClient::ApiError => e\n  puts \"Error when calling DefaultApi#extract_resume\"\n  pp e\nend"
      },
      {
        "lang": "bash",
        "code": "cargo watch --delay 1 -- cargo build"
      },
      {
        "lang": "bash",
        "code": "cargo watch --delay 1 -- cargo build"
      },
      {
        "lang": "toml",
        "meta": "Cargo.toml",
        "code": "[dependencies]\nbaml-client = { path = \"./baml_client\" }"
      },
      {
        "lang": "rust",
        "code": "use baml_client::models::ExtractResumeRequest;\nuse baml_client::apis::default_api as b;\n\n#[tokio::main]\nasync fn main() {\n    let config = baml_client::apis::configuration::Configuration::default();\n\n    let resp = b::extract_resume(&config, ExtractResumeRequest {\n        resume: \"Tony Hoare is a British computer scientist who has made foundational contributions to programming languages, algorithms, operating systems, formal verification, and concurrent computing.\".to_string(),\n    }).await.unwrap();\n\n    println!(\"{:#?}\", resp);\n}"
      },
      {
        "lang": "toml",
        "meta": "Cargo.toml",
        "code": "[dependencies]\nbaml-client = { path = \"./baml_client\" }"
      },
      {
        "lang": "rust",
        "code": "use baml_client::models::ExtractResumeRequest;\nuse baml_client::apis::default_api as b;\n\n#[tokio::main]\nasync fn main() {\n    let config = baml_client::apis::configuration::Configuration::default();\n\n    let resp = b::extract_resume(&config, ExtractResumeRequest {\n        resume: \"Tony Hoare is a British computer scientist who has made foundational contributions to programming languages, algorithms, operating systems, formal verification, and concurrent computing.\".to_string(),\n    }).await.unwrap();\n\n    println!(\"{:#?}\", resp);\n}"
      },
      {
        "lang": "bash",
        "code": "npx @boundaryml/baml dev --preview"
      }
    ],
    "content": "Requires BAML version >=0.55\n\n\nThis feature is a preview feature and may change. Please provide feedback either\nin Discord or on GitHub so that\nwe can stabilize the feature and keep you updated!\nBAML allows you to expose your BAML functions as RESTful APIs:\n\n\nWe integrate with OpenAPI (universal API definitions), so you can get typesafe client libraries for free!\n\n\nInstall BAML VSCode Extension\nhttps://marketplace.visualstudio.com/items?itemName=boundary.baml-extension\nsyntax highlighting\n\ntesting playground\n\nprompt previews\n\n\nInstall NPX + OpenAPI\n\n\n\n\n\n\nOpenAPI requires default-jdk\n\n\nOpenAPI requires Java\nAmazon Linux 2023:\nAmazon Linux 2:\n\n\nTo install npx and java (for OpenAPI):\nUse the Node.js installer to install npx (default installer settings are fine).\n\nRun npm install -g npm@latest to update npx (there is currently an issue with the default install of npx on Windows where it doesn't work out of the box).\n\nRun the Adoptium OpenJDK .msi installer (install the JDK; default installer settings are fine).\n\n\nYou can verify that npx and java are installed by running:\n\n\nTo install npx, use the Node.js installer.\nTo install java (for OpenAPI), use the Adoptium OpenJDK packages.\nAdd BAML to your existing project\nThis will give you some starter BAML code in a baml_src directory.\n\n\n\n\n\n\n\n\nOpenAPI supports 5 different C++ client types;\nany of them will work with BAML.\n\n\n\nNotice that on_generate has been initialized for you to:\nrun the OpenAPI generator to generate a Java client library, and also\n\nrun mvn clean install to install the generated client library to your\nlocal Maven repository\n\n\n\n\nIf you only use Maven through an IDE (e.g. IntelliJ IDEA), you should\nremove && mvn clean install from the generated on_generate command.\n\n\n\n\n\n\n\n\nAs long as there's an OpenAPI client generator that works with your stack,\nyou can use it with BAML. Check out the full list in the OpenAPI docs.\nStart the BAML development server\nThis will do four things:\nserve your BAML functions over a RESTful interface on localhost:2024\n\ngenerate an OpenAPI schema in baml_client/openapi.yaml\n\nrun openapi-generator -g $OPENAPI_CLIENT_TYPE in baml_client directory to\ngenerate an OpenAPI client for you to use\n\nre-run the above steps whenever you modify any .baml files\n\n\n\n\nBAML-over-REST is currently a preview feature. Please provide feedback\neither in Discord or on GitHub\nso that we can stabilize the feature and keep you updated!\nUse a BAML function in any language!\nopenapi-generator will generate a README with instructions for installing\nand using your client; we've included snippets for some of the most popular\nlanguages below. Check out\nbaml-examples for example\nprojects with instructions for running them.\n\n\nWe've tested the below listed OpenAPI clients, but not all of them. If you run\ninto issues with any of the OpenAPI clients, please let us know, either in\nDiscord or by commenting on\nGitHub so that we can either help you out\nor fix it!\n\n\n\n\nRun this with go run main.go:\n\n\nFirst, add the OpenAPI-generated client to your project.\n\n\n\n\nYou can use the default on_generate command, which will tell baml dev to\ninstall the OpenAPI-generated client into your local Maven repository by running\nmvn clean install every time you save a change to a BAML file.\nTo depend on the client in your local Maven repo, you can use these configs:\n\n\n\n\nYou'll probably want to comment out on_generate and instead use either the OpenAPI Maven plugin or OpenAPI Gradle plugin to build your OpenAPI client.\n\n\nThen, copy this code into wherever your main function is:\n\n\n\n\nThe PHP OpenAPI generator doesn't support OpenAPI's oneOf type, which is\nwhat we map BAML union types to. Please let us know if this is an issue for\nyou, and you need help working around it.\nFirst, add the OpenAPI-generated client to your project:\nYou can now use this code to call a BAML function:\n\n\nUse ruby -Ilib/baml_client app.rb to run this:\n\n\n\n\nIf you're using cargo watch -- cargo build and seeing build failures because it can't find\nthe generated baml_client, try increasing the delay on cargo watch to 1 second like so:\nFirst, add the OpenAPI-generated client to your project:\nYou can now use cargo run:"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.installation-language.next-js-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/installation-language/next-js",
    "pathname": "/guide/installation-language/next-js",
    "icon": "fa-brands fa-react",
    "title": "Next.js Integration",
    "breadcrumb": [
      {
        "title": "Installation: Language",
        "pathname": "/guide/installation-language"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "JS",
        "code": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: [\"@boundaryml/baml\"],\n  },\n  webpack: (config, { dev, isServer, webpack, nextRuntime }) => {\n    config.module.rules.push({\n      test: /\\.node$/,\n      use: [\n        {\n          loader: \"nextjs-node-loader\",\n          options: {\n            outputPath: config.output.path,\n          },\n        },\n      ],\n    });\n\n    return config;\n  },\n};\n\nexport default nextConfig;"
      },
      {
        "lang": "typescript",
        "code": "import { createStreamableValue, StreamableValue as BaseStreamableValue } from \"ai/rsc\";\nimport { BamlStream } from \"@boundaryml/baml\";\nimport { b } from \"@/baml_client\"; // You can change the path of this to wherever your baml_client is located.\n\n\n// ------------------------------\n// Helper functions\n// ------------------------------\n\n/**\n * Type alias for defining a StreamableValue based on a BamlStream.\n * It captures either a partial or final result depending on the stream state.\n */\ntype StreamableValue<T extends BamlStream<any, any>> =\n  | { partial: T extends BamlStream<infer StreamRet, any> ? StreamRet : never }\n  | { final: T extends BamlStream<any, infer Ret> ? Ret : never };\n\n/**\n * Helper function to manage and handle a BamlStream.\n * It consumes the stream, updates the streamable value for each partial event,\n * and finalizes the stream when complete.\n *\n * @param bamlStream - The BamlStream to be processed.\n * @returns A promise that resolves with an object containing the BaseStreamableValue.\n */\nexport async function streamHelper<T extends BamlStream<any, any>>(\n  bamlStream: T,\n): Promise<{\n  object: BaseStreamableValue<StreamableValue<T>>;\n}> {\n  const stream = createStreamableValue<StreamableValue<T>>();\n\n  // Asynchronous function to process the BamlStream events\n  (async () => {\n    try {\n      // Iterate through the stream and update the stream value with partial data\n      for await (const event of bamlStream) {\n        stream.update({ partial: event });\n      }\n\n      // Obtain the final response once all events are processed\n      const response = await bamlStream.getFinalResponse();\n      stream.done({ final: response });\n    } catch (err) {\n      // Handle any errors during stream processing\n      stream.error(err);\n    }\n  })();\n\n  return { object: stream.value };\n}\n\n/**\n * Utility function to create a streamable function from a BamlStream-producing function.\n * This function returns an asynchronous function that manages the streaming process.\n *\n * @param func - A function that produces a BamlStream when called.\n * @returns An asynchronous function that returns a BaseStreamableValue for the stream.\n */\nexport function makeStreamable<\n  BamlStreamFunc extends (...args: any) => BamlStream<any, any>,\n>(\n  func: BamlStreamFunc\n): (...args: Parameters<BamlStreamFunc>) => Promise<{\n  object: BaseStreamableValue<StreamableValue<ReturnType<BamlStreamFunc>>>;\n}> {\n  return async (...args) => {\n    const boundFunc = func.bind(b.stream);\n    const stream = boundFunc(...args);\n    return streamHelper(stream);\n  };\n}\n"
      },
      {
        "lang": "typescript",
        "code": "import { makeStreamable } from \"../_baml_utils/streamableObjects\";\n\n\nexport const extractResume = makeStreamable(b.stream.ExtractResume);"
      },
      {
        "lang": "typescript",
        "code": "import { useState, useEffect } from \"react\";\nimport { readStreamableValue, StreamableValue } from \"ai/rsc\";\n\n/**\n * A hook that streams data from a server action. The server action must return a StreamableValue.\n * See the example actiimport { useState, useEffect } from \"react\";\nimport { readStreamableValue, StreamableValue } from \"ai/rsc\";\n\n/**\n * A hook that streams data from a server action. The server action must return a StreamableValue.\n * See the example action in app/actions/streamable_objects.tsx\n *  **/\nexport function useStream<PartialRet, Ret, P extends any[]>(\n  serverAction: (...args: P) => Promise<{ object: StreamableValue<{ partial: PartialRet } | { final: Ret }, any> }>\n) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [partialData, setPartialData] = useState<PartialRet | undefined>(undefined); // Initialize data state\n  const [streamResult, setData] = useState<Ret  | undefined>(undefined); // full non-partial data\n\n  const mutate = async (\n    ...params: Parameters<typeof serverAction>\n  ): Promise<Ret | undefined> => {\n    console.log(\"mutate\", params);\n    setIsLoading(true);\n    setIsError(false);\n    setError(null);\n\n    try {\n      const { object } = await serverAction(...params);\n      const asyncIterable = readStreamableValue(object);\n\n      for await (const value of asyncIterable) {\n        if (value !== undefined) {\n\n          // could also add a callback here.\n          // if (options?.onData) {\n          //   options.onData(value as T);\n          // }\n          console.log(\"value\", value);\n          if (\"partial\" in value) {\n            setPartialData(value.partial); // Update data state with the latest value\n          } else if (\"final\" in value) {\n            setData(value.final); // Update data state with the latest value\n            setIsComplete(true);\n            return value.final;\n          }\n        }\n      }\n\n      // // If it completes, it means it's the full data.\n      // return streamedData;\n    } catch (err) {\n      console.log(\"error\", err);\n\n      setIsError(true);\n      setError(new Error(JSON.stringify(err) ?? \"An error occurred\"));\n      return undefined;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // If you use the \"data\" property, your component will re-render when the data gets updated.\n  return { data: streamResult, partialData, isLoading, isComplete, isError, error, mutate };\n}\n"
      },
      {
        "lang": "tsx",
        "code": "\"use client\";\nimport {\n  extractResume,\n  extractUnstructuredResume,\n} from \"../../actions/streamable_objects\";\n// import types from baml files like this:\nimport { Resume } from \"@/baml_client\";\n\nexport default function Home() {\n  // you can also rename these fields by using \":\", like how we renamed partialData to \"partialResume\"\n  // `mutate` is a function that will start the stream. It takes in the same arguments as the BAML function.\n  const { data: completedData, partialData: partialResume, isLoading, isError, error, mutate } = useStream(extractResume);\n\n  return (\n    <div>\n      <h1>BoundaryML Next.js Example</h1>\n      \n      <button onClick={() => mutate(\"Some resume text\")}>Stream BAML</button>\n      {isLoading && <p>Loading...</p>}\n      {isError && <p>Error: {error?.message}</p>}\n      {partialData && <pre>{JSON.stringify(partialData, null, 2)}</pre>}\n      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}\n    </div>\n  );\n}"
      },
      {
        "lang": "JS",
        "code": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: [\"@boundaryml/baml\"],\n  },\n  webpack: (config, { dev, isServer, webpack, nextRuntime }) => {\n    config.module.rules.push({\n      test: /\\.node$/,\n      use: [\n        {\n          loader: \"nextjs-node-loader\",\n          options: {\n            outputPath: config.output.path,\n          },\n        },\n      ],\n    });\n\n    return config;\n  },\n};\n\nexport default nextConfig;"
      },
      {
        "lang": "typescript",
        "code": "import { createStreamableValue, StreamableValue as BaseStreamableValue } from \"ai/rsc\";\nimport { BamlStream } from \"@boundaryml/baml\";\nimport { b } from \"@/baml_client\"; // You can change the path of this to wherever your baml_client is located.\n\n\n// ------------------------------\n// Helper functions\n// ------------------------------\n\n/**\n * Type alias for defining a StreamableValue based on a BamlStream.\n * It captures either a partial or final result depending on the stream state.\n */\ntype StreamableValue<T extends BamlStream<any, any>> =\n  | { partial: T extends BamlStream<infer StreamRet, any> ? StreamRet : never }\n  | { final: T extends BamlStream<any, infer Ret> ? Ret : never };\n\n/**\n * Helper function to manage and handle a BamlStream.\n * It consumes the stream, updates the streamable value for each partial event,\n * and finalizes the stream when complete.\n *\n * @param bamlStream - The BamlStream to be processed.\n * @returns A promise that resolves with an object containing the BaseStreamableValue.\n */\nexport async function streamHelper<T extends BamlStream<any, any>>(\n  bamlStream: T,\n): Promise<{\n  object: BaseStreamableValue<StreamableValue<T>>;\n}> {\n  const stream = createStreamableValue<StreamableValue<T>>();\n\n  // Asynchronous function to process the BamlStream events\n  (async () => {\n    try {\n      // Iterate through the stream and update the stream value with partial data\n      for await (const event of bamlStream) {\n        stream.update({ partial: event });\n      }\n\n      // Obtain the final response once all events are processed\n      const response = await bamlStream.getFinalResponse();\n      stream.done({ final: response });\n    } catch (err) {\n      // Handle any errors during stream processing\n      stream.error(err);\n    }\n  })();\n\n  return { object: stream.value };\n}\n\n/**\n * Utility function to create a streamable function from a BamlStream-producing function.\n * This function returns an asynchronous function that manages the streaming process.\n *\n * @param func - A function that produces a BamlStream when called.\n * @returns An asynchronous function that returns a BaseStreamableValue for the stream.\n */\nexport function makeStreamable<\n  BamlStreamFunc extends (...args: any) => BamlStream<any, any>,\n>(\n  func: BamlStreamFunc\n): (...args: Parameters<BamlStreamFunc>) => Promise<{\n  object: BaseStreamableValue<StreamableValue<ReturnType<BamlStreamFunc>>>;\n}> {\n  return async (...args) => {\n    const boundFunc = func.bind(b.stream);\n    const stream = boundFunc(...args);\n    return streamHelper(stream);\n  };\n}\n"
      },
      {
        "lang": "typescript",
        "code": "import { makeStreamable } from \"../_baml_utils/streamableObjects\";\n\n\nexport const extractResume = makeStreamable(b.stream.ExtractResume);"
      },
      {
        "lang": "typescript",
        "code": "import { useState, useEffect } from \"react\";\nimport { readStreamableValue, StreamableValue } from \"ai/rsc\";\n\n/**\n * A hook that streams data from a server action. The server action must return a StreamableValue.\n * See the example actiimport { useState, useEffect } from \"react\";\nimport { readStreamableValue, StreamableValue } from \"ai/rsc\";\n\n/**\n * A hook that streams data from a server action. The server action must return a StreamableValue.\n * See the example action in app/actions/streamable_objects.tsx\n *  **/\nexport function useStream<PartialRet, Ret, P extends any[]>(\n  serverAction: (...args: P) => Promise<{ object: StreamableValue<{ partial: PartialRet } | { final: Ret }, any> }>\n) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [partialData, setPartialData] = useState<PartialRet | undefined>(undefined); // Initialize data state\n  const [streamResult, setData] = useState<Ret  | undefined>(undefined); // full non-partial data\n\n  const mutate = async (\n    ...params: Parameters<typeof serverAction>\n  ): Promise<Ret | undefined> => {\n    console.log(\"mutate\", params);\n    setIsLoading(true);\n    setIsError(false);\n    setError(null);\n\n    try {\n      const { object } = await serverAction(...params);\n      const asyncIterable = readStreamableValue(object);\n\n      for await (const value of asyncIterable) {\n        if (value !== undefined) {\n\n          // could also add a callback here.\n          // if (options?.onData) {\n          //   options.onData(value as T);\n          // }\n          console.log(\"value\", value);\n          if (\"partial\" in value) {\n            setPartialData(value.partial); // Update data state with the latest value\n          } else if (\"final\" in value) {\n            setData(value.final); // Update data state with the latest value\n            setIsComplete(true);\n            return value.final;\n          }\n        }\n      }\n\n      // // If it completes, it means it's the full data.\n      // return streamedData;\n    } catch (err) {\n      console.log(\"error\", err);\n\n      setIsError(true);\n      setError(new Error(JSON.stringify(err) ?? \"An error occurred\"));\n      return undefined;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // If you use the \"data\" property, your component will re-render when the data gets updated.\n  return { data: streamResult, partialData, isLoading, isComplete, isError, error, mutate };\n}\n"
      },
      {
        "lang": "tsx",
        "code": "\"use client\";\nimport {\n  extractResume,\n  extractUnstructuredResume,\n} from \"../../actions/streamable_objects\";\n// import types from baml files like this:\nimport { Resume } from \"@/baml_client\";\n\nexport default function Home() {\n  // you can also rename these fields by using \":\", like how we renamed partialData to \"partialResume\"\n  // `mutate` is a function that will start the stream. It takes in the same arguments as the BAML function.\n  const { data: completedData, partialData: partialResume, isLoading, isError, error, mutate } = useStream(extractResume);\n\n  return (\n    <div>\n      <h1>BoundaryML Next.js Example</h1>\n      \n      <button onClick={() => mutate(\"Some resume text\")}>Stream BAML</button>\n      {isLoading && <p>Loading...</p>}\n      {isError && <p>Error: {error?.message}</p>}\n      {partialData && <pre>{JSON.stringify(partialData, null, 2)}</pre>}\n      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}\n    </div>\n  );\n}"
      }
    ],
    "content": "BAML can be used with Vercel's AI SDK to stream BAML functions to your UI.\nThe latest example code is found in our NextJS starter, but this tutorial will guide you on how to add BAML step-by-step.\nSee the live demo\n\n\nYou will need to use Server Actions, from the App Router, for this tutorial. You can still stream BAML functions from Route Handlers however.\n\n\nInstall BAML, and Generate a BAML client for TypeScript\nFollow the TS installation guide\n\nInstall the VSCode extension and Save a baml file to generate the client (or use npx baml-cli generate).\n\n\nUpdate next.config.mjs\n@boundaryml/baml uses a native node addon to run the BAML functions. You need to tell NextJS to use the loader for these files.\nCreate some helper utilities to stream BAML functions\nLet's add some helpers to export our baml functions as streamable server actions. See the last line in this file, where we export the extractResume function.\nIn app/utils/streamableObject.tsx add the following code:\nExport your BAML functions to streamable server actions\nIn app/actions/extract.tsx add the following code:\nCreate a hook to use the streamable functions in React Components\nThis hook will work like react-query, but for BAML functions.\nIt will give you partial data, the loading status, and whether the stream was completed.\nIn app/_hooks/useStream.ts add:\nStream your BAML function in a component\nIn app/page.tsx you can use the hook to stream the BAML function and render the result in real-time.\nAnd now you're all set!\nIf you have issues with your environment variables not loading, you may want to use dotenv-cli to load your env vars before the nextjs process starts:\ndotenv -- npm run dev"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.environment-variables",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/environment-variables",
    "pathname": "/guide/development/environment-variables",
    "icon": "fa-regular fa-cogs",
    "title": "Set Environment Variables",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.environment-variables-environment-variables-in-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/environment-variables",
    "pathname": "/guide/development/environment-variables",
    "icon": "fa-regular fa-cogs",
    "title": "Environment Variables in BAML",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#environment-variables-in-baml",
    "content": "Sometimes you'll see environment variables used in BAML, like in clients:\nTo set environment variables:\n\n\n\n\nOnce you open a .baml file, in VSCode, you should see a small button over every BAML function: Open Playground.\nThen you should be able to set environment variables in the settings tab.\n\n\nOr type BAML Playground in the VSCode Command Bar (CMD + Shift + P or CTRL + Shift + P) to open the playground.\n\n\nBAML will expect these to be set already in your program before you import the baml_client in Python/ TS / etc.\nAny of the following strategies for setting env vars are compatible with BAML:\nsetting them in your shell before running your program\n\nin your Dockerfile\n\nin your next.config.js\n\nin your Kubernetes manifest\n\nfrom secrets-store.csi.k8s.io\n\nfrom a secrets provider such as Infisical / Doppler\n\nfrom a .env file (using dotenv cli)\n\nusing account credentials for ephemeral token generation (e.g. Vertex AI Auth Tokens)\n\n\n\n\n\n\nRequires BAML Version 0.57+\nIf you don't want BAML to try to auto-load your env vars, you can call manually reset_baml_env_vars\nwith the current environment variables.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "\nclient<llm> GPT4o {\n  provider baml-openai-chat\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n  }\n}"
      },
      {
        "lang": "bash",
        "code": "export MY_SUPER_SECRET_API_KEY=\"...\"\npython my_program_using_baml.py"
      },
      {
        "lang": "bash",
        "code": "export MY_SUPER_SECRET_API_KEY=\"...\"\npython my_program_using_baml.py"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "\nfrom baml_client import b\nfrom baml_client import reset_baml_env_vars\nimport os\nimport dotenv\n\ndotenv.load_dotenv()\nreset_baml_env_vars(dict(os.environ))"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import dotenv from 'dotenv'\n// Wait to import the BAML client until after loading environment variables\nimport { b, resetBamlEnvVars } from 'baml-client'\n\ndotenv.config()\nresetBamlEnvVars(process.env)"
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "require 'dotenv/load'\n\n# Wait to import the BAML client until after loading environment variables\n# reset_baml_env_vars is not yet implemented in the Ruby client\nrequire 'baml_client'"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "\nfrom baml_client import b\nfrom baml_client import reset_baml_env_vars\nimport os\nimport dotenv\n\ndotenv.load_dotenv()\nreset_baml_env_vars(dict(os.environ))"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import dotenv from 'dotenv'\n// Wait to import the BAML client until after loading environment variables\nimport { b, resetBamlEnvVars } from 'baml-client'\n\ndotenv.config()\nresetBamlEnvVars(process.env)"
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "require 'dotenv/load'\n\n# Wait to import the BAML client until after loading environment variables\n# reset_baml_env_vars is not yet implemented in the Ruby client\nrequire 'baml_client'"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Set Environment Variables"
      },
      "h2": {
        "id": "environment-variables-in-baml",
        "title": "Environment Variables in BAML"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.environment-variables-dynamically-setting-llm-api-keys-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/environment-variables",
    "pathname": "/guide/development/environment-variables",
    "icon": "fa-regular fa-cogs",
    "title": "Dynamically setting LLM API Keys",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamically-setting-llm-api-keys",
    "content": "You can set the API key for an LLM dynamically by passing in the key as a header or as a parameter (depending on the provider), using the ClientRegistry.",
    "hierarchy": {
      "h0": {
        "title": "Set Environment Variables"
      },
      "h2": {
        "id": "dynamically-setting-llm-api-keys",
        "title": "Dynamically setting LLM API Keys"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.terminal-logs-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/terminal-logs",
    "pathname": "/guide/development/terminal-logs",
    "icon": "fa-regular fa-file-lines",
    "title": "Terminal Logs",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "# default is warn\nBAML_LOG=info"
      },
      {
        "lang": "sh",
        "code": "BOUNDARY_MAX_LOG_CHUNK_CHARS=3000"
      }
    ],
    "content": "You can add logging to determine what the BAML runtime is doing when it calls LLM endpoints and parses responses.\nTo enable logging, set the BAML_LOG environment variable:\nLevel Description \nerror Fatal errors by BAML \nwarn Logs any time a function fails (includes LLM calling failures, parsing failures) \ninfo Logs every call to a function (including prompt, raw response, and parsed response) \ndebug Requests and detailed parsing errors (warning: may be a lot of logs) \ntrace Everything and more \noff No logging \n\nExample log:\n\n\n\n\nSince >0.54.0:\nTo truncate each log entry to a certain length, set the BOUNDARY_MAX_LOG_CHUNK_CHARS environment variable:\nThis will truncate each part in a log entry to 3000 characters."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.upgrade-baml-versions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/upgrade-baml-versions",
    "pathname": "/guide/development/upgrade-baml-versions",
    "icon": "fa-regular fa-circle-arrow-up",
    "title": "Upgrading BAML / Fixing Version Mismatches",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "generators.baml",
        "code": "generator TypescriptGenerator {\n    output_type \"typescript\"\n    ....\n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.62.0\"\n}"
      },
      {
        "lang": "sh",
        "meta": "pip",
        "code": "pip install --upgrade baml-py"
      },
      {
        "lang": "sh",
        "meta": "npm",
        "code": "npm install @boundaryml/baml@latest"
      },
      {
        "lang": "sh",
        "meta": "ruby",
        "code": "gem install baml"
      },
      {
        "lang": "sh",
        "meta": "pip",
        "code": "pip install --upgrade baml-py"
      },
      {
        "lang": "sh",
        "meta": "npm",
        "code": "npm install @boundaryml/baml@latest"
      },
      {
        "lang": "sh",
        "meta": "ruby",
        "code": "gem install baml"
      }
    ],
    "content": "Remember that the generated baml_client code is generated by your baml_py / @boundaryml/baml package dependency (using baml-cli generate), but can also be generated by the VSCode extension when you save a BAML file.\nTo upgrade BAML versions:\nUpdate the generator clause in your generators.baml file (or wherever you have it defined) to the new version. If you ran baml-cli init, one has already been generated for you!\n\n\nUpdate your baml_py  / @boundaryml/baml package dependency to the same version.\n\n\n\n\nUpdate VSCode BAML extension to point to the same version. Read here for how to keep VSCode in sync with your baml_py / @boundaryml/baml package dependency: VSCode BAML Extension reference\n\n\nYou only need to do this for minor version upgrades (e.g., 0.54.0 -> 0.62.0), not patch versions (e.g., 0.62.0 -> 0.62.1)."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.upgrade-baml-versions-troubleshooting-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/upgrade-baml-versions",
    "pathname": "/guide/development/upgrade-baml-versions",
    "icon": "fa-regular fa-circle-arrow-up",
    "title": "Troubleshooting",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#troubleshooting",
    "content": "See the VSCode BAML Extension reference for more information on how to prevent version mismatches.",
    "hierarchy": {
      "h0": {
        "title": "Upgrading BAML / Fixing Version Mismatches"
      },
      "h2": {
        "id": "troubleshooting",
        "title": "Troubleshooting"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.aws-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/aws",
    "pathname": "/guide/development/deploying/aws",
    "icon": "fa-brands fa-aws",
    "title": "AWS",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "You can use SST to define the Lambda configuration and deploy it.\nThe example below builds the BAML x86_64 rust binaries into a Lambda layer and uses the layer in the Lambda function.\nExample Node + SST Project\nLet us know if you want to deploy a python BAML project on AWS. Our example project is coming soon."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.aws-current-limitations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/aws",
    "pathname": "/guide/development/deploying/aws",
    "icon": "fa-brands fa-aws",
    "title": "Current limitations",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#current-limitations",
    "content": "The BAML binaries only support the NodeJS 20.x runtime (or a runtime using Amazon Linux 2023). Let us know if you need a different runtime version.",
    "hierarchy": {
      "h0": {
        "title": "AWS"
      },
      "h3": {
        "id": "current-limitations",
        "title": "Current limitations"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.next-js-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/next-js",
    "pathname": "/guide/development/deploying/next-js",
    "icon": "fa-brands fa-react",
    "title": "NextJS",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "JS",
        "code": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: [\"@boundaryml/baml\"],\n  },\n  webpack: (config, { dev, isServer, webpack, nextRuntime }) => {\n    config.module.rules.push({\n      test: /\\.node$/,\n      use: [\n        {\n          loader: \"nextjs-node-loader\",\n          options: {\n            outputPath: config.output.path,\n          },\n        },\n      ],\n    });\n\n    return config;\n  },\n};\n\nexport default nextConfig;"
      },
      {
        "lang": "json",
        "code": " \"scripts\": {\n    \"dev\": \"BAML_LOG=info next dev\",\n    \"build\": \"pnpm generate && next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"generate\": \"baml-cli generate --from ./baml_src\"\n  },"
      }
    ],
    "content": "To deploy a NextJS with BAML, take a look at the starter template:\nhttps://github.com/BoundaryML/baml-examples/tree/main/nextjs-starter\nAll you need is to modify the nextjs.config.mjs to allow BAML to run properly:\nand change your package.json to build the baml client automatically (and enable logging in dev mode if you want):"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.docker-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/docker",
    "pathname": "/guide/development/deploying/docker",
    "icon": "fa-brands fa-docker",
    "title": "Docker",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "dockerfile",
        "meta": "python Dockerfile",
        "code": "RUN baml-cli generate --from path-to-baml_src"
      },
      {
        "lang": "dockerfile",
        "meta": "TypeScript Dockerfile",
        "code": "# Do this early on in the dockerfile script before transpiling to JS\nRUN npx baml-cli generate --from path-to-baml_src"
      },
      {
        "lang": "dockerfile",
        "meta": "Ruby Dockerfile",
        "code": "RUN bundle add baml\nRUN bundle exec baml-cli generate --from path/to/baml_src"
      },
      {
        "lang": "dockerfile",
        "meta": "python Dockerfile",
        "code": "RUN baml-cli generate --from path-to-baml_src"
      },
      {
        "lang": "dockerfile",
        "meta": "TypeScript Dockerfile",
        "code": "# Do this early on in the dockerfile script before transpiling to JS\nRUN npx baml-cli generate --from path-to-baml_src"
      },
      {
        "lang": "dockerfile",
        "meta": "Ruby Dockerfile",
        "code": "RUN bundle add baml\nRUN bundle exec baml-cli generate --from path/to/baml_src"
      }
    ],
    "content": "When you develop with BAML, the BAML VScode extension generates a baml_client directory (on every save) with all the generated code you need to use your AI functions in your application.\nWe recommend you add baml_client to your .gitignore file to avoid committing generated code to your repository, and re-generate the client code when you build and deploy your application.\nYou could commit the generated code if you're starting out to not deal with this, just make sure the VSCode extension version matches your baml package dependency version (e.g. baml-py for python and @boundaryml/baml for TS) so there are no compatibility issues.\nTo build your client you can use the following command. See also baml-cli generate:"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.docker-rest-api-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/docker-rest-api",
    "pathname": "/guide/development/deploying/docker-rest-api",
    "icon": "fa-brands fa-docker",
    "title": "OpenAPI",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "This feature was added in: v0.55.0.\n\n\nThis page assumes you've gone through the OpenAPI quickstart.\nTo deploy BAML as a RESTful API, you'll need to do three things:\nhost your BAML functions in a Docker container\n\nupdate your app to call it\n\nrun BAML and your app side-by-side using docker-compose\n\n\nRead on to learn how to do this with docker-compose.\n\n\nYou can also run baml-cli in a subprocess from your app directly, and we\nmay recommend this approach in the future. Please let us know if you'd\nlike to see instructions for doing so, and in what language, by asking in\n[Discord][discord] or [on the GitHub issue][openapi-feedback-github-issue]."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.docker-rest-api-host-your-baml-functions-in-a-docker-container-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/docker-rest-api",
    "pathname": "/guide/development/deploying/docker-rest-api",
    "icon": "fa-brands fa-docker",
    "title": "Host your BAML functions in a Docker container",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#host-your-baml-functions-in-a-docker-container",
    "content": "In the directory containing your baml_src/ directory, create a\nbaml.Dockerfile to host your BAML functions in a Docker container:\n\n\nBAML-over-HTTP is currently a preview feature. Please provide feedback either\nin [Discord][discord] or on [GitHub][openapi-feedback-github-issue] so that\nwe can stabilize the feature and keep you updated!\n\n\n\n\nAssuming you intend to run your own application in a container, we recommend\nusing docker-compose to run your app and BAML-over-HTTP side-by-side:\n\n\nTo call the BAML server from your laptop (i.e. the host machine), you must use\nlocalhost:2024. You may only reach it as baml-over-http:2024 from within\nanother Docker container.\n\n\nIf you don't care about using docker-compose, you can just run:\nTo verify for yourself that BAML-over-HTTP is up and running, you can run:",
    "code_snippets": [
      {
        "lang": "docker",
        "meta": "title=\"baml.Dockerfile\"",
        "code": "FROM node:20\n\nWORKDIR /app\nCOPY baml_src/ .\n\n# If you want to pin to a specific version (which we recommend):\n# RUN npm install -g @boundaryml/baml@VERSION\nRUN npm install -g @boundaryml/baml\n\nCMD baml-cli serve --preview --port 2024"
      },
      {
        "lang": "bash",
        "code": "docker compose up --build --force-recreate"
      },
      {
        "lang": "yaml",
        "meta": "title=\"docker-compose.yaml\"",
        "code": "services:\n  baml-over-http:\n    build:\n      # This will build baml.Dockerfile when you run docker-compose up\n      context: .\n      dockerfile: baml.Dockerfile\n    healthcheck:\n      test: [ \"CMD\", \"curl\", \"-f\", \"http://localhost:2024/_debug/ping\" ]\n      interval: 1s\n      timeout: 100ms\n      retries: 3\n    # This allows you to 'curl localhost:2024/_debug/ping' from your machine,\n    # i.e. the Docker host\n    ports:\n      - \"2024:2024\"\n\n  debug-container:\n    image: amazonlinux:latest\n    depends_on:\n      # Wait until the baml-over-http healthcheck passes to start this container\n      baml-over-http:\n        condition: service_healthy\n    command: \"curl -v http://baml-over-http:2024/_debug/ping\""
      },
      {
        "lang": "bash",
        "code": "docker compose up --build --force-recreate"
      },
      {
        "lang": "yaml",
        "meta": "title=\"docker-compose.yaml\"",
        "code": "services:\n  baml-over-http:\n    build:\n      # This will build baml.Dockerfile when you run docker-compose up\n      context: .\n      dockerfile: baml.Dockerfile\n    healthcheck:\n      test: [ \"CMD\", \"curl\", \"-f\", \"http://localhost:2024/_debug/ping\" ]\n      interval: 1s\n      timeout: 100ms\n      retries: 3\n    # This allows you to 'curl localhost:2024/_debug/ping' from your machine,\n    # i.e. the Docker host\n    ports:\n      - \"2024:2024\"\n\n  debug-container:\n    image: amazonlinux:latest\n    depends_on:\n      # Wait until the baml-over-http healthcheck passes to start this container\n      baml-over-http:\n        condition: service_healthy\n    command: \"curl -v http://baml-over-http:2024/_debug/ping\""
      },
      {
        "lang": "bash",
        "code": "docker build -t baml-over-http -f baml.Dockerfile .\ndocker run -p 2024:2024 baml-over-http"
      },
      {
        "lang": "bash",
        "code": "docker build -t baml-over-http -f baml.Dockerfile .\ndocker run -p 2024:2024 baml-over-http"
      },
      {
        "lang": "bash",
        "code": "curl http://localhost:2024/_debug/ping"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "OpenAPI"
      },
      "h2": {
        "id": "host-your-baml-functions-in-a-docker-container",
        "title": "Host your BAML functions in a Docker container"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.docker-rest-api-update-your-app-to-call-it-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/docker-rest-api",
    "pathname": "/guide/development/deploying/docker-rest-api",
    "icon": "fa-brands fa-docker",
    "title": "Update your app to call it",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update-your-app-to-call-it",
    "content": "Update your code to use BOUNDARY_ENDPOINT, if set, as the endpoint for your BAML functions.\nIf you plan to use Boundary Cloud to host your BAML functions, you should also update it to use BOUNDARY_API_KEY.",
    "code_snippets": [
      {
        "lang": "go",
        "code": "import (\n    \"os\"\n    baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n    cfg := baml.NewConfiguration()\n    if boundaryEndpoint := os.Getenv(\"BOUNDARY_ENDPOINT\"); boundaryEndpoint != \"\" {\n        cfg.BasePath = boundaryEndpoint\n    }\n    if boundaryApiKey := os.Getenv(\"BOUNDARY_API_KEY\"); boundaryApiKey != \"\" {\n        cfg.DefaultHeader[\"Authorization\"] = \"Bearer \" + boundaryApiKey\n    }\n    b := baml.NewAPIClient(cfg).DefaultAPI\n    // Use `b` to make API calls\n}"
      },
      {
        "lang": "go",
        "code": "import (\n    \"os\"\n    baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n    cfg := baml.NewConfiguration()\n    if boundaryEndpoint := os.Getenv(\"BOUNDARY_ENDPOINT\"); boundaryEndpoint != \"\" {\n        cfg.BasePath = boundaryEndpoint\n    }\n    if boundaryApiKey := os.Getenv(\"BOUNDARY_API_KEY\"); boundaryApiKey != \"\" {\n        cfg.DefaultHeader[\"Authorization\"] = \"Bearer \" + boundaryApiKey\n    }\n    b := baml.NewAPIClient(cfg).DefaultAPI\n    // Use `b` to make API calls\n}"
      },
      {
        "lang": "java",
        "code": "import com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\nimport com.boundaryml.baml_client.api.DefaultApi;\nimport com.boundaryml.baml_client.auth.*;\n\npublic class ApiExample {\n    public static void main(String[] args) {\n        ApiClient apiClient = Configuration.getDefaultApiClient();\n\n        String boundaryEndpoint = System.getenv(\"BOUNDARY_ENDPOINT\");\n        if (boundaryEndpoint != null && !boundaryEndpoint.isEmpty()) {\n            apiClient.setBasePath(boundaryEndpoint);\n        }\n\n        String boundaryApiKey = System.getenv(\"BOUNDARY_API_KEY\");\n        if (boundaryApiKey != null && !boundaryApiKey.isEmpty()) {\n            apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + boundaryApiKey);\n        }\n\n        DefaultApi apiInstance = new DefaultApi(apiClient);\n        // Use `apiInstance` to make API calls\n    }\n}"
      },
      {
        "lang": "java",
        "code": "import com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\nimport com.boundaryml.baml_client.api.DefaultApi;\nimport com.boundaryml.baml_client.auth.*;\n\npublic class ApiExample {\n    public static void main(String[] args) {\n        ApiClient apiClient = Configuration.getDefaultApiClient();\n\n        String boundaryEndpoint = System.getenv(\"BOUNDARY_ENDPOINT\");\n        if (boundaryEndpoint != null && !boundaryEndpoint.isEmpty()) {\n            apiClient.setBasePath(boundaryEndpoint);\n        }\n\n        String boundaryApiKey = System.getenv(\"BOUNDARY_API_KEY\");\n        if (boundaryApiKey != null && !boundaryApiKey.isEmpty()) {\n            apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + boundaryApiKey);\n        }\n\n        DefaultApi apiInstance = new DefaultApi(apiClient);\n        // Use `apiInstance` to make API calls\n    }\n}"
      },
      {
        "lang": "php",
        "code": "require_once(__DIR__ . '/vendor/autoload.php');\n\n$config = BamlClient\\Configuration::getDefaultConfiguration();\n\n$boundaryEndpoint = getenv('BOUNDARY_ENDPOINT');\n$boundaryApiKey = getenv('BOUNDARY_API_KEY');\n\nif ($boundaryEndpoint) {\n    $config->setHost($boundaryEndpoint);\n}\n\nif ($boundaryApiKey) {\n    $config->setAccessToken($boundaryApiKey);\n}\n\n$apiInstance = new OpenAPI\\Client\\Api\\DefaultApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// Use `$apiInstance` to make API calls"
      },
      {
        "lang": "php",
        "code": "require_once(__DIR__ . '/vendor/autoload.php');\n\n$config = BamlClient\\Configuration::getDefaultConfiguration();\n\n$boundaryEndpoint = getenv('BOUNDARY_ENDPOINT');\n$boundaryApiKey = getenv('BOUNDARY_API_KEY');\n\nif ($boundaryEndpoint) {\n    $config->setHost($boundaryEndpoint);\n}\n\nif ($boundaryApiKey) {\n    $config->setAccessToken($boundaryApiKey);\n}\n\n$apiInstance = new OpenAPI\\Client\\Api\\DefaultApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// Use `$apiInstance` to make API calls"
      },
      {
        "lang": "ruby",
        "code": "require 'baml_client'\n\napi_client = BamlClient::ApiClient.new\n\nboundary_endpoint = ENV['BOUNDARY_ENDPOINT']\nif boundary_endpoint\n  api_client.host = boundary_endpoint\nend\n\nboundary_api_key = ENV['BOUNDARY_API_KEY']\nif boundary_api_key\n  api_client.default_headers['Authorization'] = \"Bearer #{boundary_api_key}\"\nend\nb = BamlClient::DefaultApi.new(api_client)\n# Use `b` to make API calls"
      },
      {
        "lang": "ruby",
        "code": "require 'baml_client'\n\napi_client = BamlClient::ApiClient.new\n\nboundary_endpoint = ENV['BOUNDARY_ENDPOINT']\nif boundary_endpoint\n  api_client.host = boundary_endpoint\nend\n\nboundary_api_key = ENV['BOUNDARY_API_KEY']\nif boundary_api_key\n  api_client.default_headers['Authorization'] = \"Bearer #{boundary_api_key}\"\nend\nb = BamlClient::DefaultApi.new(api_client)\n# Use `b` to make API calls"
      },
      {
        "lang": "rust",
        "code": "let mut config = baml_client::apis::configuration::Configuration::default();\nif let Some(base_path) = std::env::var(\"BOUNDARY_ENDPOINT\").ok() {\n    config.base_path = base_path;\n}\nif let Some(api_key) = std::env::var(\"BOUNDARY_API_KEY\").ok() {\n    config.bearer_access_token = Some(api_key);\n}\n// Use `config` to make API calls"
      },
      {
        "lang": "rust",
        "code": "let mut config = baml_client::apis::configuration::Configuration::default();\nif let Some(base_path) = std::env::var(\"BOUNDARY_ENDPOINT\").ok() {\n    config.base_path = base_path;\n}\nif let Some(api_key) = std::env::var(\"BOUNDARY_API_KEY\").ok() {\n    config.bearer_access_token = Some(api_key);\n}\n// Use `config` to make API calls"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "OpenAPI"
      },
      "h2": {
        "id": "update-your-app-to-call-it",
        "title": "Update your app to call it"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.docker-rest-api-run-your-app-with-docker-compose-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/docker-rest-api",
    "pathname": "/guide/development/deploying/docker-rest-api",
    "icon": "fa-brands fa-docker",
    "title": "Run your app with docker-compose",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#run-your-app-with-docker-compose",
    "content": "Replace debug-container with the Dockerfile for your app in the\ndocker-compose.yaml file:\nAdditionally, you'll want to make sure that you generate the BAML client at\nimage build time, because baml_client/ should not be checked into your repo.\nThis means that in the CI workflow you use to push your Docker images, you'll\nwant to do something like this:",
    "code_snippets": [
      {
        "lang": "yaml",
        "code": "services:\n  baml-over-http:\n    build:\n      context: .\n      dockerfile: baml.Dockerfile\n    networks:\n      - my-app-network\n    healthcheck:\n      test: [ \"CMD\", \"curl\", \"-f\", \"http://localhost:2024/_debug/ping\" ]\n      interval: 1s\n      timeout: 100ms\n      retries: 3\n    ports:\n      - \"2024:2024\"\n\n  my-app:\n    build:\n      context: .\n      dockerfile: my-app.Dockerfile\n    depends_on:\n      baml-over-http:\n        condition: service_healthy\n    environment:\n      - BAML_ENDPOINT=http://baml-over-http:2024\n\n  debug-container:\n    image: amazonlinux:latest\n    depends_on:\n      baml-over-http:\n        condition: service_healthy\n    command: sh -c 'curl -v \"$${BAML_ENDPOINT}/_debug/ping\"'\n    environment:\n      - BAML_ENDPOINT=http://baml-over-http:2024"
      },
      {
        "lang": "yaml",
        "meta": ".github/workflows/build-image.yaml",
        "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build the BAML client\n        run: |\n          set -eux\n          npx @boundaryml/baml generate\n          docker build -t my-app ."
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "OpenAPI"
      },
      "h2": {
        "id": "run-your-app-with-docker-compose",
        "title": "Run your app with docker-compose"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.development.deploying.docker-rest-api-optional-secure-your-baml-functions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/development/deploying/docker-rest-api",
    "pathname": "/guide/development/deploying/docker-rest-api",
    "icon": "fa-brands fa-docker",
    "title": "(Optional) Secure your BAML functions",
    "breadcrumb": [
      {
        "title": "Development",
        "pathname": "/guide/development"
      },
      {
        "title": "Deploying",
        "pathname": "/guide/development/deploying"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#optional-secure-your-baml-functions",
    "content": "To secure your BAML server, you can also set a password on it using the\nBAML_PASSWORD environment variable:\n\n\n\n\n\n\nThis will require incoming requests to attach your specified password as\nauthorization metadata. You can verify this by confirming that this returns 403\nForbidden:\nIf you attach your password to the request, you'll see that it now returns 200 OK:\n\n\n\n\n\n\n\n\nBAML_PASSWORD will secure all endpoints except /_debug/ping, so that you\ncan always debug the reachability of your BAML server.",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "BAML_PASSWORD=sk-baml-your-secret-password \\\n  baml-cli serve --preview --port 2024"
      },
      {
        "lang": "bash",
        "code": "BAML_PASSWORD=sk-baml-your-secret-password \\\n  baml-cli serve --preview --port 2024"
      },
      {
        "lang": "docker",
        "code": "FROM node:20\n\nWORKDIR /app\nRUN npm install -g @boundaryml/baml\nCOPY baml_src/ .\n\nENV BAML_PASSWORD=sk-baml-your-secret-password\nCMD baml-cli serve --preview --port 2024"
      },
      {
        "lang": "docker",
        "code": "FROM node:20\n\nWORKDIR /app\nRUN npm install -g @boundaryml/baml\nCOPY baml_src/ .\n\nENV BAML_PASSWORD=sk-baml-your-secret-password\nCMD baml-cli serve --preview --port 2024"
      },
      {
        "lang": "bash",
        "code": "curl -v \"http://localhost:2024/_debug/status\""
      },
      {
        "lang": "bash",
        "code": "export BAML_PASSWORD=sk-baml-your-secret-password\ncurl \"http://baml:${BAML_PASSWORD}@localhost:2024/_debug/status\""
      },
      {
        "lang": "bash",
        "code": "export BAML_PASSWORD=sk-baml-your-secret-password\ncurl \"http://baml:${BAML_PASSWORD}@localhost:2024/_debug/status\""
      },
      {
        "lang": "bash",
        "code": "export BAML_PASSWORD=sk-baml-your-secret-password\ncurl \"http://localhost:2024/_debug/status\" -H \"X-BAML-API-KEY: ${BAML_PASSWORD}\""
      },
      {
        "lang": "bash",
        "code": "export BAML_PASSWORD=sk-baml-your-secret-password\ncurl \"http://localhost:2024/_debug/status\" -H \"X-BAML-API-KEY: ${BAML_PASSWORD}\""
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "OpenAPI"
      },
      "h2": {
        "id": "optional-secure-your-baml-functions",
        "title": "(Optional) Secure your BAML functions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.prompting-with-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/prompting-with-baml",
    "pathname": "/guide/baml-basics/prompting-with-baml",
    "icon": "fa-solid fa-terminal",
    "title": "Prompting in BAML",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "We recommend reading the installation instructions first\nBAML functions are special definitions that get converted into real code (Python, TS, etc) that calls LLMs. Think of them as a way to define AI-powered functions that are type-safe and easy to use in your application."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.prompting-with-baml-what-baml-functions-actually-do-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/prompting-with-baml",
    "pathname": "/guide/baml-basics/prompting-with-baml",
    "icon": "fa-solid fa-terminal",
    "title": "What BAML Functions Actually Do",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#what-baml-functions-actually-do",
    "content": "When you write a BAML function like this:\nBAML converts it into code that:\nTakes your input (resume_text)\n\nSends a request to OpenAI's GPT-4 API with your prompt.\n\nParses the JSON response into your Resume type\n\nReturns a type-safe object you can use in your code",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "function ExtractResume(resume_text: string) -> Resume {\n  client \"openai/gpt-4o\"\n  // The prompt uses Jinja syntax.. more on this soon.\n  prompt #\"\n     Extract info from this text.\n\n    {# special macro to print the output schema + instructions #}\n    {{ ctx.output_format }}\n\n    Resume:\n    ---\n    {{ resume_text }}\n    ---\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Prompting in BAML"
      },
      "h3": {
        "id": "what-baml-functions-actually-do",
        "title": "What BAML Functions Actually Do"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.prompting-with-baml-prompt-preview--seeing-the-curl-request-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/prompting-with-baml",
    "pathname": "/guide/baml-basics/prompting-with-baml",
    "icon": "fa-solid fa-terminal",
    "title": "Prompt Preview + seeing the CURL request",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#prompt-preview--seeing-the-curl-request",
    "content": "For maximum transparency, you can see the API request BAML makes to the LLM provider using the VSCode extension.\nBelow you can see the Prompt Preview, where you see the full rendered prompt (once you add a test case):\n\n\nNote how the {{ ctx.output_format }} macro is replaced with the output schema instructions.\nThe Playground will also show you the Raw CURL request (if you click on the \"curl\" checkbox):\n\n\n\n\nAlways include the {{ ctx.output_format }} macro in your prompt. This injects your output schema into the prompt, which helps the LLM output the right thing. You can also customize what it prints.\nOne of our design philosophies is to never hide the prompt from you. You control and can always see the entire prompt.",
    "hierarchy": {
      "h0": {
        "title": "Prompting in BAML"
      },
      "h3": {
        "id": "prompt-preview--seeing-the-curl-request",
        "title": "Prompt Preview + seeing the CURL request"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.prompting-with-baml-calling-the-function-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/prompting-with-baml",
    "pathname": "/guide/baml-basics/prompting-with-baml",
    "icon": "fa-solid fa-terminal",
    "title": "Calling the function",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#calling-the-function",
    "content": "Recall that BAML will generate a baml_client directory in the language of your choice using the parameters in your generator config. This contains the function and types you defined.\nNow we can call the function, which will make a request to the LLM and return the Resume object:\n\n\n\n\nDo not modify any code inside baml_client, as it's autogenerated.",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "python",
        "code": "# Import the baml client (We call it `b` for short)\nfrom baml_client import b\n# Import the Resume type, which is now a Pydantic model!\nfrom baml_client.types import Resume \n\ndef main():\nresume_text = \"\"\"Jason Doe\\nPython, Rust\\nUniversity of California, Berkeley, B.S.\\nin Computer Science, 2020\\nAlso an expert in Tableau, SQL, and C++\\n\"\"\"\n\n    # this function comes from the autogenerated \"baml_client\".\n    # It calls the LLM you specified and handles the parsing.\n    resume = b.ExtractResume(resume_text)\n\n    # Fully type-checked and validated!\n    assert isinstance(resume, Resume)\n"
      },
      {
        "lang": "typescript",
        "meta": "typescript",
        "code": "import b from 'baml_client'\nimport { Resume } from 'baml_client/types'\n\nasync function main() {\n  const resume_text = `Jason Doe\\nPython, Rust\\nUniversity of California, Berkeley, B.S.\\nin Computer Science, 2020\\nAlso an expert in Tableau, SQL, and C++`\n\n  // this function comes from the autogenerated \"baml_client\".\n  // It calls the LLM you specified and handles the parsing.\n  const resume = await b.ExtractResume(resume_text)\n\n  // Fully type-checked and validated!\n  resume.name === 'Jason Doe'\n  if (resume instanceof Resume) {\n    console.log('resume is a Resume')\n  }\n}"
      },
      {
        "lang": "ruby",
        "meta": "ruby",
        "code": "\nrequire_relative \"baml_client/client\"\nb = Baml.Client\n\n# Note this is not async\nres = b.TestFnNamedArgsSingleClass(\n    myArg: Baml::Types::Resume.new(\n        key: \"key\",\n        key_two: true,\n        key_three: 52,\n    )\n)"
      },
      {
        "lang": "python",
        "meta": "python",
        "code": "# Import the baml client (We call it `b` for short)\nfrom baml_client import b\n# Import the Resume type, which is now a Pydantic model!\nfrom baml_client.types import Resume \n\ndef main():\nresume_text = \"\"\"Jason Doe\\nPython, Rust\\nUniversity of California, Berkeley, B.S.\\nin Computer Science, 2020\\nAlso an expert in Tableau, SQL, and C++\\n\"\"\"\n\n    # this function comes from the autogenerated \"baml_client\".\n    # It calls the LLM you specified and handles the parsing.\n    resume = b.ExtractResume(resume_text)\n\n    # Fully type-checked and validated!\n    assert isinstance(resume, Resume)\n"
      },
      {
        "lang": "typescript",
        "meta": "typescript",
        "code": "import b from 'baml_client'\nimport { Resume } from 'baml_client/types'\n\nasync function main() {\n  const resume_text = `Jason Doe\\nPython, Rust\\nUniversity of California, Berkeley, B.S.\\nin Computer Science, 2020\\nAlso an expert in Tableau, SQL, and C++`\n\n  // this function comes from the autogenerated \"baml_client\".\n  // It calls the LLM you specified and handles the parsing.\n  const resume = await b.ExtractResume(resume_text)\n\n  // Fully type-checked and validated!\n  resume.name === 'Jason Doe'\n  if (resume instanceof Resume) {\n    console.log('resume is a Resume')\n  }\n}"
      },
      {
        "lang": "ruby",
        "meta": "ruby",
        "code": "\nrequire_relative \"baml_client/client\"\nb = Baml.Client\n\n# Note this is not async\nres = b.TestFnNamedArgsSingleClass(\n    myArg: Baml::Types::Resume.new(\n        key: \"key\",\n        key_two: true,\n        key_three: 52,\n    )\n)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Prompting in BAML"
      },
      "h2": {
        "id": "calling-the-function",
        "title": "Calling the function"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.prompting-with-baml-next-steps-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/prompting-with-baml",
    "pathname": "/guide/baml-basics/prompting-with-baml",
    "icon": "fa-solid fa-terminal",
    "title": "Next steps",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#next-steps",
    "content": "Checkout PromptFiddle to see various interactive BAML function examples or view the example prompts\nRead the next guide to learn more about choosing different LLM providers and running tests in the VSCode extension.\n\n\n\n\nUse any provider or open-source model\n\n\nTest your functions in the VSCode extension\n\n\nDefine user or assistant roles in your prompts\n\n\nUse function calling or tools in your prompts",
    "hierarchy": {
      "h0": {
        "title": "Prompting in BAML"
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.switching-ll-ms-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/switching-llms",
    "pathname": "/guide/baml-basics/switching-llms",
    "icon": "fa-regular fa-random",
    "title": "Switching LLMs",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "BAML Supports getting structured output from all major providers as well as all OpenAI-API compatible open-source models. See LLM Providers Reference for how to set each one up.\n\n\nBAML can help you get structured output from any Open-Source model, with better performance than other techniques, even when it's not officially supported via a Tool-Use API (like o1-preview) or fine-tuned for it! Read more about how BAML does this."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.switching-ll-ms-using-client-providermodel-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/switching-llms",
    "pathname": "/guide/baml-basics/switching-llms",
    "icon": "fa-regular fa-random",
    "title": "Using client \"<provider>/<model>\"",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#using-client-providermodel",
    "content": "Using openai/model-name or anthropic/model-name will assume you have the ANTHROPIC_API_KEY or OPENAI_API_KEY environment variables set.",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "function MakeHaiku(topic: string) -> string {\n  client \"openai/gpt-4o\" // or anthropic/claude-3-5-sonnet-20240620\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Switching LLMs"
      },
      "h3": {
        "id": "using-client-providermodel",
        "title": "Using client \"<provider>/<model>\""
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.switching-ll-ms-using-a-named-client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/switching-llms",
    "pathname": "/guide/baml-basics/switching-llms",
    "icon": "fa-regular fa-random",
    "title": "Using a named client",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#using-a-named-client",
    "content": "Use this if you are using open-source models or need customization\nThe longer form uses a named client, and supports adding any parameters supported by the provider or changing the temperature, top_p, etc.\nConsult the provider documentation for a list of supported providers\nand models, the default options, and setting retry policies.\n\n\nIf you want to specify which client to use at runtime, in your Python/TS/Ruby code,\nyou can use the client registry to do so.\nThis can come in handy if you're trying to, say, send 10% of your requests to a\ndifferent model.",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai\"\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n    // other params like temperature, top_p, etc.\n    temperature 0.0\n    base_url \"https://my-custom-endpoint.com/v1\"\n    // add headers\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n\n}\n\nfunction MakeHaiku(topic: string) -> string {\n  client MyClient\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Switching LLMs"
      },
      "h3": {
        "id": "using-a-named-client",
        "title": "Using a named client"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.testing-functions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/testing-functions",
    "pathname": "/guide/baml-basics/testing-functions",
    "icon": "fa-regular fa-vial",
    "title": "Testing functions",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "enum Category {\n    Refund\n    CancelOrder\n    TechnicalSupport\n    AccountIssue\n    Question\n}\n\nfunction ClassifyMessage(input: string) -> Category {\n  client GPT4Turbo\n  prompt #\"\n    ... truncated ...\n  \"#\n}\n\ntest Test1 {\n  functions [ClassifyMessage]\n  args {\n    // input is the first argument of ClassifyMessage\n    input \"Can't access my account using my usual login credentials, and each attempt results in an error message stating 'Invalid username or password.' I have tried resetting my password using the 'Forgot Password' link, but I haven't received the promised password reset email.\"\n  }\n}"
      }
    ],
    "content": "You can test your BAML functions in the VSCode Playground by adding a test snippet into a BAML file:\nSee the interactive examples\nThe BAML playground will give you a starting snippet to copy that will match your function signature.\n\n\nBAML doesn't use colons : between key-value pairs except in function parameters."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.testing-functions-complex-object-inputs-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/testing-functions",
    "pathname": "/guide/baml-basics/testing-functions",
    "icon": "fa-regular fa-vial",
    "title": "Complex object inputs",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#complex-object-inputs",
    "content": "Objects are injected as dictionaries",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "class Message {\n  user string\n  content string\n}\n\nfunction ClassifyMessage(messages: Messages[]) -> Category {\n...\n}\n\ntest Test1 {\n  functions [ClassifyMessage]\n  args {\n    messages [\n      {\n        user \"hey there\"\n        // multi-line string using the #\"...\"# syntax\n        content #\"\n          You can also add a multi-line\n          string with the hashtags\n          Instead of ugly json with \\n\n        \"#\n      }\n    ]\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Testing functions"
      },
      "h2": {
        "id": "complex-object-inputs",
        "title": "Complex object inputs"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.testing-functions-test-image-inputs-in-the-playground-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/testing-functions",
    "pathname": "/guide/baml-basics/testing-functions",
    "icon": "fa-regular fa-vial",
    "title": "Test Image Inputs in the Playground",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#test-image-inputs-in-the-playground",
    "content": "For a function that takes an image as input, like so:\nYou can define test cases using image files, URLs, or base64 strings.\n\n\n\n\n\n\nCommitting a lot of images into your repository can make it slow to clone and\npull your repository. If you expect to commit >500MiB of images, please read\nGitHub's size limit documentation and consider setting\nup large file storage.\n\n\nThe path to the image file, relative to the directory containing the current BAML file.\nImage files must be somewhere in baml_src/.\n\n\nThe mime-type of the image. If not set, and the provider expects a mime-type\nto be provided, BAML will try to infer it based on first, the file extension,\nand second, the contents of the file.\n\n\n\n\nThe publicly accessible URL from which the image may be downloaded.\n\n\nThe mime-type of the image. If not set, and the provider expects a mime-type\nto be provided, BAML will try to infer it based on the contents of the file.\n\n\n\n\nThe base64-encoded image data.\n\n\nThe mime-type of the image. If not set, and the provider expects a mime-type\nto be provided, BAML will try to infer it based on the contents of the file.\nIf base64 is a data URL, this field will be ignored.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "function MyFunction(myImage: image) -> string {\n  client GPT4o\n  prompt #\"\n    Describe this image: {{myImage}}\n  \"#\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myImage {\n      file \"../path/to/image.png\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myImage {\n      file \"../path/to/image.png\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myImage {\n      url \"https....\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myImage {\n      url \"https....\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  args {\n    myImage {\n      base64 \"base64string\"\n      media_type \"image/png\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  args {\n    myImage {\n      base64 \"base64string\"\n      media_type \"image/png\"\n    }\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Testing functions"
      },
      "h2": {
        "id": "test-image-inputs-in-the-playground",
        "title": "Test Image Inputs in the Playground"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.testing-functions-test-audio-inputs-in-the-playground-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/testing-functions",
    "pathname": "/guide/baml-basics/testing-functions",
    "icon": "fa-regular fa-vial",
    "title": "Test Audio Inputs in the Playground",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#test-audio-inputs-in-the-playground",
    "content": "For a function that takes audio as input, like so:\nYou can define test cases using audio files, URLs, or base64 strings.\n\n\n\n\n\n\nCommitting a lot of audio files into your repository can make it slow to clone and\npull your repository. If you expect to commit >500MiB of audio, please read\n[GitHub's size limit documentation][github-large-files] and consider setting\nup [large file storage][github-lfs].\n\n\nThe path to the audio file, relative to the directory containing the current BAML file.\naudio files must be somewhere in baml_src/.\n\n\nThe mime-type of the audio. If not set, and the provider expects a mime-type\nto be provided, BAML will try to infer it based on first, the file extension,\nand second, the contents of the file.\n\n\n\n\nThe publicly accessible URL from which the audio may be downloaded.\n\n\nThe mime-type of the audio. If not set, and the provider expects a mime-type\nto be provided, BAML will try to infer it based on the contents of the file.\n\n\n\n\nThe base64-encoded audio data.\n\n\nThe mime-type of the audio. If not set, and the provider expects a mime-type\nto be provided, BAML will try to infer it based on the contents of the file.\nIf base64 is a data URL, this field will be ignored.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "function MyFunction(myAudio: audio) -> string {\n  client GPT4o\n  prompt #\"\n    Describe this audio: {{myAudio}}\n  \"#\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myAudio {\n      file \"../path/to/audio.mp3\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myAudio {\n      file \"../path/to/audio.mp3\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myAudio {\n      url \"https....\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  functions [MyFunction]\n  args {\n    myAudio {\n      url \"https....\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  args {\n    myAudio {\n      base64 \"base64string\"\n      media_type \"audio/mp3\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "test Test1 {\n  args {\n    myAudio {\n      base64 \"base64string\"\n      media_type \"audio/mp3\"\n    }\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Testing functions"
      },
      "h2": {
        "id": "test-audio-inputs-in-the-playground",
        "title": "Test Audio Inputs in the Playground"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.testing-functions-assertions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/testing-functions",
    "pathname": "/guide/baml-basics/testing-functions",
    "icon": "fa-regular fa-vial",
    "title": "Assertions",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#assertions",
    "content": "This is coming soon! We'll be supporting assertions in test cases. For now -- when you run a test you'll only see errors parsing the output into the right schema, or LLM-provider errors.",
    "hierarchy": {
      "h0": {
        "title": "Testing functions"
      },
      "h2": {
        "id": "assertions",
        "title": "Assertions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.streaming-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/streaming",
    "pathname": "/guide/baml-basics/streaming",
    "icon": "fa-regular fa-faucet",
    "title": "Streaming",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "code": "{\"items\": [{\"name\": \"Appl\n{\"items\": [{\"name\": \"Apple\", \"quantity\": 2, \"price\": 1.\n{\"items\": [{\"name\": \"Apple\", \"quantity\": 2, \"price\": 1.50}], \"total_cost\":\n{\"items\": [{\"name\": \"Apple\", \"quantity\": 2, \"price\": 1.50}], \"total_cost\": 3.00} # Completed"
      },
      {
        "lang": "rust",
        "code": "class ReceiptItem {\n  name string\n  description string?\n  quantity int\n  price float\n}\n\nclass ReceiptInfo {\n    items ReceiptItem[]\n    total_cost float?\n}\n\nfunction ExtractReceiptInfo(email: string) -> ReceiptInfo {\n  client GPT4o\n  prompt #\"\n    Given the receipt below:\n\n    {{ email }}\n\n    {{ ctx.output_format }}\n  \"#\n}"
      },
      {
        "lang": "rust",
        "code": "class ReceiptItem {\n  name string\n  description string?\n  quantity int\n  price float\n}\n\nclass ReceiptInfo {\n    items ReceiptItem[]\n    total_cost float?\n}\n\nfunction ExtractReceiptInfo(email: string) -> ReceiptInfo {\n  client GPT4o\n  prompt #\"\n    Given the receipt below:\n\n    {{ email }}\n\n    {{ ctx.output_format }}\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "main.py",
        "code": "import asyncio\nfrom baml_client import b, partial_types, types\n\n# Using a stream:\ndef example1(receipt: str):\n    stream = b.stream.ExtractReceiptInfo(receipt)\n\n    # partial is a Partial type with all Optional fields\n    for partial in stream:\n        print(f\"partial: parsed {len(partial.items)} items (object: {partial})\")\n\n    # final is the full, original, validated ReceiptInfo type\n    final = stream.get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\n# Using only get_final_response() of a stream\n#\n# In this case, you should just use b.ExtractReceiptInfo(receipt) instead,\n# which is slightly faster and more efficient.\ndef example2(receipt: str):\n    final = b.stream.ExtractReceiptInfo(receipt).get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\n# Using the async client:\nasync def example3(receipt: str):\n    # Note the import of the async client\n    from baml_client.async_client import b\n    stream = b.stream.ExtractReceiptInfo(receipt)\n    async for partial in stream:\n        print(f\"partial: parsed {len(partial.items)} items (object: {partial})\")\n\n    final = await stream.get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\nreceipt = \"\"\"\n04/14/2024 1:05 pm\n\nTicket: 220000082489\nRegister: Shop Counter\nEmployee: Connor\nCustomer: Sam\nItem\t#\tPrice\nGuide leash (1 Pair) uni UNI\n1\t$34.95\nThe Index Town Walls\n1\t$35.00\nBoot Punch\n3\t$60.00\nSubtotal\t$129.95\nTax ($129.95 @ 9%)\t$11.70\nTotal Tax\t$11.70\nTotal\t$141.65\n\"\"\"\n\nif __name__ == '__main__':\n    asyncio.run(example1(receipt))\n    asyncio.run(example2(receipt))\n    asyncio.run(example3(receipt))"
      },
      {
        "lang": "python",
        "meta": "main.py",
        "code": "import asyncio\nfrom baml_client import b, partial_types, types\n\n# Using a stream:\ndef example1(receipt: str):\n    stream = b.stream.ExtractReceiptInfo(receipt)\n\n    # partial is a Partial type with all Optional fields\n    for partial in stream:\n        print(f\"partial: parsed {len(partial.items)} items (object: {partial})\")\n\n    # final is the full, original, validated ReceiptInfo type\n    final = stream.get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\n# Using only get_final_response() of a stream\n#\n# In this case, you should just use b.ExtractReceiptInfo(receipt) instead,\n# which is slightly faster and more efficient.\ndef example2(receipt: str):\n    final = b.stream.ExtractReceiptInfo(receipt).get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\n# Using the async client:\nasync def example3(receipt: str):\n    # Note the import of the async client\n    from baml_client.async_client import b\n    stream = b.stream.ExtractReceiptInfo(receipt)\n    async for partial in stream:\n        print(f\"partial: parsed {len(partial.items)} items (object: {partial})\")\n\n    final = await stream.get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\nreceipt = \"\"\"\n04/14/2024 1:05 pm\n\nTicket: 220000082489\nRegister: Shop Counter\nEmployee: Connor\nCustomer: Sam\nItem\t#\tPrice\nGuide leash (1 Pair) uni UNI\n1\t$34.95\nThe Index Town Walls\n1\t$35.00\nBoot Punch\n3\t$60.00\nSubtotal\t$129.95\nTax ($129.95 @ 9%)\t$11.70\nTotal Tax\t$11.70\nTotal\t$141.65\n\"\"\"\n\nif __name__ == '__main__':\n    asyncio.run(example1(receipt))\n    asyncio.run(example2(receipt))\n    asyncio.run(example3(receipt))"
      },
      {
        "lang": "ts",
        "meta": "main.ts",
        "code": "import { b } from './baml_client'\n\n// Using both async iteration and getFinalResponse() from a stream\nconst example1 = async (receipt: string) => {\n  const stream = b.stream.ExtractReceiptInfo(receipt)\n\n  // partial is a Partial type with all Optional fields\n  for await (const partial of stream) {\n    console.log(`partial: ${partial.items?.length} items (object: ${partial})`)\n  }\n\n  // final is the full, original, validated ReceiptInfo type\n  const final = await stream.getFinalResponse()\n  console.log(`final: ${final.items.length} items (object: ${final})`)\n}\n\n// Using only async iteration of a stream\nconst example2 = async (receipt: string) => {\n  for await (const partial of b.stream.ExtractReceiptInfo(receipt)) {\n    console.log(`partial: ${partial.items?.length} items (object: ${partial})`)\n  }\n}\n\n// Using only getFinalResponse() of a stream\n//\n// In this case, you should just use b.ExtractReceiptInfo(receipt) instead,\n// which is faster and more efficient.\nconst example3 = async (receipt: string) => {\n  const final = await b.stream.ExtractReceiptInfo(receipt).getFinalResponse()\n  console.log(`final: ${final.items.length} items (object: ${final})`)\n}\n\nconst receipt = `\n04/14/2024 1:05 pm\n\nTicket: 220000082489\nRegister: Shop Counter\nEmployee: Connor\nCustomer: Sam\nItem\t#\tPrice\nGuide leash (1 Pair) uni UNI\n1\t$34.95\nThe Index Town Walls\n1\t$35.00\nBoot Punch\n3\t$60.00\nSubtotal\t$129.95\nTax ($129.95 @ 9%)\t$11.70\nTotal Tax\t$11.70\nTotal\t$141.65\n`\n\nif (require.main === module) {\n  example1(receipt)\n  example2(receipt)\n  example3(receipt)\n}"
      },
      {
        "lang": "ts",
        "meta": "main.ts",
        "code": "import { b } from './baml_client'\n\n// Using both async iteration and getFinalResponse() from a stream\nconst example1 = async (receipt: string) => {\n  const stream = b.stream.ExtractReceiptInfo(receipt)\n\n  // partial is a Partial type with all Optional fields\n  for await (const partial of stream) {\n    console.log(`partial: ${partial.items?.length} items (object: ${partial})`)\n  }\n\n  // final is the full, original, validated ReceiptInfo type\n  const final = await stream.getFinalResponse()\n  console.log(`final: ${final.items.length} items (object: ${final})`)\n}\n\n// Using only async iteration of a stream\nconst example2 = async (receipt: string) => {\n  for await (const partial of b.stream.ExtractReceiptInfo(receipt)) {\n    console.log(`partial: ${partial.items?.length} items (object: ${partial})`)\n  }\n}\n\n// Using only getFinalResponse() of a stream\n//\n// In this case, you should just use b.ExtractReceiptInfo(receipt) instead,\n// which is faster and more efficient.\nconst example3 = async (receipt: string) => {\n  const final = await b.stream.ExtractReceiptInfo(receipt).getFinalResponse()\n  console.log(`final: ${final.items.length} items (object: ${final})`)\n}\n\nconst receipt = `\n04/14/2024 1:05 pm\n\nTicket: 220000082489\nRegister: Shop Counter\nEmployee: Connor\nCustomer: Sam\nItem\t#\tPrice\nGuide leash (1 Pair) uni UNI\n1\t$34.95\nThe Index Town Walls\n1\t$35.00\nBoot Punch\n3\t$60.00\nSubtotal\t$129.95\nTax ($129.95 @ 9%)\t$11.70\nTotal Tax\t$11.70\nTotal\t$141.65\n`\n\nif (require.main === module) {\n  example1(receipt)\n  example2(receipt)\n  example3(receipt)\n}"
      },
      {
        "lang": "ruby",
        "meta": "main.rb",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\n# Using both iteration and get_final_response() from a stream\ndef example1(receipt)\n  stream = $b.stream.ExtractReceiptInfo(receipt)\n\n  stream.each do |partial|\n    puts \"partial: #{partial.items&.length} items\"\n  end\n\n  final = stream.get_final_response\n  puts \"final: #{final.items.length} items\"\nend\n\n# Using only iteration of a stream\ndef example2(receipt)\n  $b.stream.ExtractReceiptInfo(receipt).each do |partial|\n    puts \"partial: #{partial.items&.length} items\"\n  end\nend\n\n# Using only get_final_response() of a stream\n#\n# In this case, you should just use BamlClient.ExtractReceiptInfo(receipt) instead,\n# which is faster and more efficient.\ndef example3(receipt)\n  final = $b.stream.ExtractReceiptInfo(receipt).get_final_response\n  puts \"final: #{final.items.length} items\"\nend\n\nreceipt = <<~RECEIPT\n  04/14/2024 1:05 pm\n\n  Ticket: 220000082489\n  Register: Shop Counter\n  Employee: Connor\n  Customer: Sam\n  Item  #  Price\n  Guide leash (1 Pair) uni UNI\n  1 $34.95\n  The Index Town Walls\n  1 $35.00\n  Boot Punch\n  3 $60.00\n  Subtotal $129.95\n  Tax ($129.95 @ 9%) $11.70\n  Total Tax $11.70\n  Total $141.65\nRECEIPT\n\nif __FILE__ == $0\n  example1(receipt)\n  example2(receipt)\n  example3(receipt)\nend"
      },
      {
        "lang": "ruby",
        "meta": "main.rb",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\n# Using both iteration and get_final_response() from a stream\ndef example1(receipt)\n  stream = $b.stream.ExtractReceiptInfo(receipt)\n\n  stream.each do |partial|\n    puts \"partial: #{partial.items&.length} items\"\n  end\n\n  final = stream.get_final_response\n  puts \"final: #{final.items.length} items\"\nend\n\n# Using only iteration of a stream\ndef example2(receipt)\n  $b.stream.ExtractReceiptInfo(receipt).each do |partial|\n    puts \"partial: #{partial.items&.length} items\"\n  end\nend\n\n# Using only get_final_response() of a stream\n#\n# In this case, you should just use BamlClient.ExtractReceiptInfo(receipt) instead,\n# which is faster and more efficient.\ndef example3(receipt)\n  final = $b.stream.ExtractReceiptInfo(receipt).get_final_response\n  puts \"final: #{final.items.length} items\"\nend\n\nreceipt = <<~RECEIPT\n  04/14/2024 1:05 pm\n\n  Ticket: 220000082489\n  Register: Shop Counter\n  Employee: Connor\n  Customer: Sam\n  Item  #  Price\n  Guide leash (1 Pair) uni UNI\n  1 $34.95\n  The Index Town Walls\n  1 $35.00\n  Boot Punch\n  3 $60.00\n  Subtotal $129.95\n  Tax ($129.95 @ 9%) $11.70\n  Total Tax $11.70\n  Total $141.65\nRECEIPT\n\nif __FILE__ == $0\n  example1(receipt)\n  example2(receipt)\n  example3(receipt)\nend"
      }
    ],
    "content": "BAML lets you stream in structured JSON output from LLMs as it comes in.\nIf you tried streaming in a JSON output from an LLM you'd see something like:\nBAML automatically fixes this partial JSON, and transforms all your types into Partial types with all Optional fields only during the stream.\n\n\nYou can check out more examples (including streaming in FastAPI and NextJS) in the BAML Examples repo.Lets stream the output of this function function ExtractReceiptInfo(email: string) -> ReceiptInfo for our example:\n\n\n\n\n\n\nBAML will generate b.stream.ExtractReceiptInfo() for you, which you can use like so:\n\n\nBAML will generate b.stream.ExtractReceiptInfo() for you, which you can use like so:\n\n\nBAML will generate Baml.Client.stream.ExtractReceiptInfo() for you,\nwhich you can use like so:\n\n\nStreaming is not yet supported via OpenAPI, but it will be coming soon!\n\n\nNumber fields are always streamed in only when the LLM completes them. E.g. if the final number is 129.95, you'll only see null or 129.95 instead of partial numbers like 1, 12, 129.9, etc."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.multi-modal-images-audio",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/multi-modal",
    "pathname": "/guide/baml-basics/multi-modal",
    "icon": "fa-regular fa-image",
    "title": "Multi-Modal (Images / Audio)",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.multi-modal-images-audio-multi-modal-input-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/multi-modal",
    "pathname": "/guide/baml-basics/multi-modal",
    "icon": "fa-regular fa-image",
    "title": "Multi-modal input",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#multi-modal-input",
    "content": "You can use audio or image input types in BAML prompts. Just create an input argument of that type and render it in the prompt.\nCheck the \"raw curl\" checkbox in the playground to see how BAML translates multi-modal input into the LLM Request body.\nSee how to test images in the playground.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "// \"image\" is a reserved keyword so we name the arg \"img\"\nfunction DescribeMedia(img: image) -> string {\n  client openai/gpt-4o\n  // Most LLM providers require images or audio to be sent as \"user\" messages.\n  prompt #\"\n    {{_.role(\"user\")}}\n    Describe this image: {{ img }}\n  \"#\n}\n\n// See the \"testing functions\" Guide for more on testing Multimodal functions\ntest Test {\n  args {\n    img {\n      url \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n    }\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Multi-Modal (Images / Audio)"
      },
      "h2": {
        "id": "multi-modal-input",
        "title": "Multi-modal input"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.multi-modal-images-audio-images-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/multi-modal",
    "pathname": "/guide/baml-basics/multi-modal",
    "icon": "fa-regular fa-image",
    "title": "Images",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#images",
    "content": "Calling a BAML function with an image input argument type (see image types)\nThe from_url and from_base64 methods create an Image object based on input type.",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Image\nfrom baml_client import b\n\nasync def test_image_input():\n  # from URL\n  res = await b.TestImageInput(\n      img=Image.from_url(\n          \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n      )\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = await b.TestImageInput(\n    img=Image.from_base64(\"image/png\", image_b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Image } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestImageInput(\n    Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png'),\n  )\n\n  // Base64\n  const image_b64 = \"iVB0R...\"\n  let res = await b.TestImageInput(\n    Image.fromBase64('image/png', image_b64),\n  )\n  "
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "we're working on it!"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Image\nfrom baml_client import b\n\nasync def test_image_input():\n  # from URL\n  res = await b.TestImageInput(\n      img=Image.from_url(\n          \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n      )\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = await b.TestImageInput(\n    img=Image.from_base64(\"image/png\", image_b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Image } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestImageInput(\n    Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png'),\n  )\n\n  // Base64\n  const image_b64 = \"iVB0R...\"\n  let res = await b.TestImageInput(\n    Image.fromBase64('image/png', image_b64),\n  )\n  "
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "we're working on it!"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Multi-Modal (Images / Audio)"
      },
      "h2": {
        "id": "calling-multimodal-baml-functions",
        "title": "Calling Multimodal BAML Functions"
      },
      "h4": {
        "id": "images",
        "title": "Images"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.multi-modal-images-audio-audio-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/multi-modal",
    "pathname": "/guide/baml-basics/multi-modal",
    "icon": "fa-regular fa-image",
    "title": "Audio",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#audio",
    "content": "Calling functions that have audio types. See audio types",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Audio\nfrom baml_client import b\n\nasync def run():\n  # from URL\n  res = await b.TestAudioInput(\n      img=Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64\n  b64 = \"iVBORw0K....\"\n  res = await b.TestAudioInput(\n    audio=Audio.from_base64(\"audio/ogg\", b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Audio } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestAudioInput(\n    Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg'),\n  )\n\n  // Base64\n  const audio_base64 = \"..\"\n  let res = await b.TestAudioInput(\n    Audio.fromBase64('audio/ogg', audio_base64),\n  )\n  "
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "we're working on it!"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Audio\nfrom baml_client import b\n\nasync def run():\n  # from URL\n  res = await b.TestAudioInput(\n      img=Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64\n  b64 = \"iVBORw0K....\"\n  res = await b.TestAudioInput(\n    audio=Audio.from_base64(\"audio/ogg\", b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Audio } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestAudioInput(\n    Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg'),\n  )\n\n  // Base64\n  const audio_base64 = \"..\"\n  let res = await b.TestAudioInput(\n    Audio.fromBase64('audio/ogg', audio_base64),\n  )\n  "
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "we're working on it!"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Multi-Modal (Images / Audio)"
      },
      "h2": {
        "id": "calling-multimodal-baml-functions",
        "title": "Calling Multimodal BAML Functions"
      },
      "h3": {
        "id": "audio",
        "title": "Audio"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.error-handling-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/error-handling",
    "pathname": "/guide/baml-basics/error-handling",
    "icon": "fa-regular fa-triangle-exclamation",
    "title": "Error Handling",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "When BAML raises an exception, it will be an instance of a subclass of BamlError. This allows you to catch all BAML-specific exceptions with a single except block."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.error-handling-bamlerror-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/error-handling",
    "pathname": "/guide/baml-basics/error-handling",
    "icon": "fa-regular fa-triangle-exclamation",
    "title": "BamlError",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bamlerror",
    "content": "Base class for all BAML exceptions.\n\n\nA human-readable error message.",
    "hierarchy": {
      "h0": {
        "title": "Error Handling"
      },
      "h2": {
        "id": "bamlerror",
        "title": "BamlError"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.error-handling-bamlinvalidargumenterror-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/error-handling",
    "pathname": "/guide/baml-basics/error-handling",
    "icon": "fa-regular fa-triangle-exclamation",
    "title": "BamlInvalidArgumentError",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bamlinvalidargumenterror",
    "content": "Subclass of BamlError.\nRaised when one or multiple arguments to a function are invalid.",
    "hierarchy": {
      "h0": {
        "title": "Error Handling"
      },
      "h2": {
        "id": "bamlerror",
        "title": "BamlError"
      },
      "h3": {
        "id": "bamlinvalidargumenterror",
        "title": "BamlInvalidArgumentError"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.error-handling-bamlclienterror-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/error-handling",
    "pathname": "/guide/baml-basics/error-handling",
    "icon": "fa-regular fa-triangle-exclamation",
    "title": "BamlClientError",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bamlclienterror",
    "content": "Subclass of BamlError.\nRaised when a client fails to return a valid response.\n\n\nIn the case of aggregate clients like fallback or those with retry_policy, only the last client's error is raised.",
    "hierarchy": {
      "h0": {
        "title": "Error Handling"
      },
      "h2": {
        "id": "bamlerror",
        "title": "BamlError"
      },
      "h3": {
        "id": "bamlclienterror",
        "title": "BamlClientError"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.error-handling-bamlclienthttperror-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/error-handling",
    "pathname": "/guide/baml-basics/error-handling",
    "icon": "fa-regular fa-triangle-exclamation",
    "title": "BamlClientHttpError",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bamlclienthttperror",
    "content": "Subclass of BamlClientError.\nRaised when the HTTP request made by a client fails with a non-200 status code.\n\n\nThe status code of the response.\nCommon status codes are:\n1: Other\n\n2: Other\n\n400: Bad Request\n\n401: Unauthorized\n\n403: Forbidden\n\n404: Not Found\n\n429: Too Many Requests\n\n500: Internal Server Error",
    "hierarchy": {
      "h0": {
        "title": "Error Handling"
      },
      "h2": {
        "id": "bamlerror",
        "title": "BamlError"
      },
      "h3": {
        "id": "bamlclienterror",
        "title": "BamlClientError"
      },
      "h4": {
        "id": "bamlclienthttperror",
        "title": "BamlClientHttpError"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.error-handling-bamlvalidationerror-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/error-handling",
    "pathname": "/guide/baml-basics/error-handling",
    "icon": "fa-regular fa-triangle-exclamation",
    "title": "BamlValidationError",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bamlvalidationerror",
    "content": "Subclass of BamlError.\nRaised when BAML fails to parse a string from the LLM into the specified object.\n\n\nThe raw text from the LLM that failed to parse into the expected return type of a function.\n\n\nThe parsing-related error message.\n\n\nThe original prompt that was sent to the LLM, formatted as a plain string. Images sent as base64-encoded strings are not serialized into this field.",
    "hierarchy": {
      "h0": {
        "title": "Error Handling"
      },
      "h2": {
        "id": "bamlerror",
        "title": "BamlError"
      },
      "h3": {
        "id": "bamlvalidationerror",
        "title": "BamlValidationError"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-basics.concurrent-calls-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-basics/concurrent-calls",
    "pathname": "/guide/baml-basics/concurrent-calls",
    "icon": "fa-regular fa-clock-rotate-left",
    "title": "Concurrent function calls",
    "breadcrumb": [
      {
        "title": "BAML Basics",
        "pathname": "/guide/baml-basics"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "enum Category {\n    Refund\n    CancelOrder\n    TechnicalSupport\n    AccountIssue\n    Question\n}\n\nfunction ClassifyMessage(input: string) -> Category {\n  client GPT4o\n  prompt #\"\n    Classify the following INPUT into ONE\n    of the following categories:\n\n    INPUT: {{ input }}\n\n    {{ ctx.output_format }}\n\n    Response:\n  \"#\n}"
      },
      {
        "lang": "baml",
        "code": "enum Category {\n    Refund\n    CancelOrder\n    TechnicalSupport\n    AccountIssue\n    Question\n}\n\nfunction ClassifyMessage(input: string) -> Category {\n  client GPT4o\n  prompt #\"\n    Classify the following INPUT into ONE\n    of the following categories:\n\n    INPUT: {{ input }}\n\n    {{ ctx.output_format }}\n\n    Response:\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "main.py",
        "code": "import asyncio\n\nfrom baml_client import b\nfrom baml_client.types import Category\n\nasync def main():\n    await asyncio.gather(\n        b.ClassifyMessage(\"I want to cancel my order\"),\n        b.ClassifyMessage(\"I want a refund\")\n    )\n\nif __name__ == '__main__':\n    asyncio.run(main())"
      },
      {
        "lang": "python",
        "meta": "main.py",
        "code": "import asyncio\n\nfrom baml_client import b\nfrom baml_client.types import Category\n\nasync def main():\n    await asyncio.gather(\n        b.ClassifyMessage(\"I want to cancel my order\"),\n        b.ClassifyMessage(\"I want a refund\")\n    )\n\nif __name__ == '__main__':\n    asyncio.run(main())"
      },
      {
        "lang": "ts",
        "meta": "main.ts",
        "code": "import { b } from './baml_client'\nimport { Category } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const category = await Promise.all(\n    b.ClassifyMessage('I want to cancel my order'),\n    b.ClassifyMessage('I want a refund'),\n  )\n}\n\nif (require.main === module) {\n  main()\n}\n"
      },
      {
        "lang": "ts",
        "meta": "main.ts",
        "code": "import { b } from './baml_client'\nimport { Category } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const category = await Promise.all(\n    b.ClassifyMessage('I want to cancel my order'),\n    b.ClassifyMessage('I want a refund'),\n  )\n}\n\nif (require.main === module) {\n  main()\n}\n"
      }
    ],
    "content": "We’ll use function ClassifyMessage(input: string) -> Category for our example:\n\n\n\n\n\n\nYou can make concurrent b.ClassifyMessage() calls like so:\n\n\nYou can make concurrent b.ClassifyMessage() calls like so:\n\n\nBAML Ruby (beta) does not currently support async/concurrent calls.\nPlease contact us if this is something you need."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.llm-client-registry-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/guide/baml-advanced/llm-client-registry",
    "icon": "fa-regular fa-gears",
    "title": "Client Registry",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "import os\nfrom baml_py import ClientRegistry\n\nasync def run():\n    cr = ClientRegistry()\n    # Creates a new client\n    cr.add_llm_client(name='MyAmazingClient', provider='openai', options={\n        \"model\": \"gpt-4o\",\n        \"temperature\": 0.7,\n        \"api_key\": os.environ.get('OPENAI_API_KEY')\n    })\n    # Sets MyAmazingClient as the primary client\n    cr.set_primary('MyAmazingClient')\n\n    # ExtractResume will now use MyAmazingClient as the calling client\n    res = await b.ExtractResume(\"...\", { \"client_registry\": cr })"
      },
      {
        "lang": "python",
        "code": "import os\nfrom baml_py import ClientRegistry\n\nasync def run():\n    cr = ClientRegistry()\n    # Creates a new client\n    cr.add_llm_client(name='MyAmazingClient', provider='openai', options={\n        \"model\": \"gpt-4o\",\n        \"temperature\": 0.7,\n        \"api_key\": os.environ.get('OPENAI_API_KEY')\n    })\n    # Sets MyAmazingClient as the primary client\n    cr.set_primary('MyAmazingClient')\n\n    # ExtractResume will now use MyAmazingClient as the calling client\n    res = await b.ExtractResume(\"...\", { \"client_registry\": cr })"
      },
      {
        "lang": "typescript",
        "code": "import { ClientRegistry } from '@boundaryml/baml'\n\nasync function run() {\n    const cr = new ClientRegistry()\n    // Creates a new client\n    cr.addLlmClient({ name: 'MyAmazingClient', provider: 'openai', options: {\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        api_key: process.env.OPENAI_API_KEY\n    }})\n    // Sets MyAmazingClient as the primary client\n    cr.setPrimary('MyAmazingClient')\n\n    // ExtractResume will now use MyAmazingClient as the calling client\n    const res = await b.ExtractResume(\"...\", { clientRegistry: cr })\n}"
      },
      {
        "lang": "typescript",
        "code": "import { ClientRegistry } from '@boundaryml/baml'\n\nasync function run() {\n    const cr = new ClientRegistry()\n    // Creates a new client\n    cr.addLlmClient({ name: 'MyAmazingClient', provider: 'openai', options: {\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        api_key: process.env.OPENAI_API_KEY\n    }})\n    // Sets MyAmazingClient as the primary client\n    cr.setPrimary('MyAmazingClient')\n\n    // ExtractResume will now use MyAmazingClient as the calling client\n    const res = await b.ExtractResume(\"...\", { clientRegistry: cr })\n}"
      },
      {
        "lang": "ruby",
        "code": "require_relative \"baml_client/client\"\n\ndef run\n  cr = Baml::ClientRegistry.new\n\n  # Creates a new client\n  cr.add_llm_client(\n    name: 'MyAmazingClient',\n    provider: 'openai',\n    options: {\n      model: 'gpt-4o',\n      temperature: 0.7,\n      api_key: ENV['OPENAI_API_KEY']\n    }\n  )\n\n  # Sets MyAmazingClient as the primary client\n  cr.set_primary('MyAmazingClient')\n\n  # ExtractResume will now use MyAmazingClient as the calling client\n  res = Baml.Client.extract_resume(input: '...', baml_options: { client_registry: cr })\nend\n\n# Call the asynchronous function\nrun"
      },
      {
        "lang": "ruby",
        "code": "require_relative \"baml_client/client\"\n\ndef run\n  cr = Baml::ClientRegistry.new\n\n  # Creates a new client\n  cr.add_llm_client(\n    name: 'MyAmazingClient',\n    provider: 'openai',\n    options: {\n      model: 'gpt-4o',\n      temperature: 0.7,\n      api_key: ENV['OPENAI_API_KEY']\n    }\n  )\n\n  # Sets MyAmazingClient as the primary client\n  cr.set_primary('MyAmazingClient')\n\n  # ExtractResume will now use MyAmazingClient as the calling client\n  res = Baml.Client.extract_resume(input: '...', baml_options: { client_registry: cr })\nend\n\n# Call the asynchronous function\nrun"
      },
      {
        "lang": "json",
        "code": "{\n    \"resume\": \"Vaibhav Gupta\",\n    \"__baml_options__\": {\n        \"client_registry\": {\n            \"clients\": [\n                {\n                    \"name\": \"OpenAI\",\n                    \"provider\": \"openai\",\n                    \"retry_policy\": null,\n                    \"options\": {\n                        \"model\": \"gpt-4o-mini\",\n                        \"api_key\": \"sk-...\"\n                    }\n                }\n            ],\n            \"primary\": \"OpenAI\"\n        }\n    }\n}"
      },
      {
        "lang": "sh",
        "code": "curl -X POST http://localhost:2024/call/ExtractResume \\\n    -H 'Content-Type: application/json' -d @body.json"
      },
      {
        "lang": "json",
        "code": "{\n    \"resume\": \"Vaibhav Gupta\",\n    \"__baml_options__\": {\n        \"client_registry\": {\n            \"clients\": [\n                {\n                    \"name\": \"OpenAI\",\n                    \"provider\": \"openai\",\n                    \"retry_policy\": null,\n                    \"options\": {\n                        \"model\": \"gpt-4o-mini\",\n                        \"api_key\": \"sk-...\"\n                    }\n                }\n            ],\n            \"primary\": \"OpenAI\"\n        }\n    }\n}"
      },
      {
        "lang": "sh",
        "code": "curl -X POST http://localhost:2024/call/ExtractResume \\\n    -H 'Content-Type: application/json' -d @body.json"
      }
    ],
    "content": "If you need to modify the model / parameters for an LLM client at runtime, you can modify the ClientRegistry for any specified function.\n\n\n\n\n\n\n\n\n\n\nThe API supports passing client registry as a field on __baml_options__ in the request body.\nExample request body:"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.llm-client-registry-clientregistry-interface-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/guide/baml-advanced/llm-client-registry",
    "icon": "fa-regular fa-gears",
    "title": "ClientRegistry Interface",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#clientregistry-interface",
    "content": "Note: ClientRegistry is imported from baml_py in Python and @boundaryml/baml in TypeScript, not baml_client.\nAs we mature ClientRegistry, we will add a more type-safe and ergonomic interface directly in baml_client. See Github issue #766.\nMethods use snake_case in Python and camelCase in TypeScript.",
    "hierarchy": {
      "h0": {
        "title": "Client Registry"
      },
      "h2": {
        "id": "clientregistry-interface",
        "title": "ClientRegistry Interface"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.llm-client-registry-add_llm_client--addllmclient-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/guide/baml-advanced/llm-client-registry",
    "icon": "fa-regular fa-gears",
    "title": "add_llm_client / addLlmClient",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#add_llm_client--addllmclient",
    "content": "A function to add an LLM client to the registry.\n\n\nThe name of the client.\n\n\nUsing the exact same name as a client also defined in .baml files overwrites the existing client whenever the ClientRegistry is used.\n\n\nThis configures which provider to use. The provider is responsible for handling the actual API calls to the LLM service. The provider is a required field.\nThe configuration modifies the URL request BAML runtime makes.\nProvider Name Docs Notes \nanthropic Anthropic  \naws-bedrock AWS Bedrock  \nazure-openai Azure OpenAI  \ngoogle-ai Google AI  \nopenai OpenAI  \nopenai-generic OpenAI (generic) Any model provider that supports an OpenAI-compatible API \nvertex-ai Vertex AI  \n\nWe also have some special providers that allow composing clients together:\nProvider Name Docs Notes \nfallback Fallback Used to chain models conditional on failures \nround-robin Round Robin Used to load balance \n\n\n\nThese vary per provider. Please see provider specific documentation for more\ninformation. Generally they are pass through options to the POST request made\nto the LLM.\n\n\nThe name of a retry policy that is already defined in a .baml file. See Retry Policies.",
    "hierarchy": {
      "h0": {
        "title": "Client Registry"
      },
      "h2": {
        "id": "clientregistry-interface",
        "title": "ClientRegistry Interface"
      },
      "h3": {
        "id": "add_llm_client--addllmclient",
        "title": "add_llm_client / addLlmClient"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.llm-client-registry-set_primary--setprimary-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/guide/baml-advanced/llm-client-registry",
    "icon": "fa-regular fa-gears",
    "title": "set_primary / setPrimary",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#set_primary--setprimary",
    "content": "This sets the client for the function to use. (i.e. replaces the client property in a function)\n\n\nThe name of the client to use.\nThis can be a new client that was added with add_llm_client or an existing client that is already in a .baml file.",
    "hierarchy": {
      "h0": {
        "title": "Client Registry"
      },
      "h2": {
        "id": "clientregistry-interface",
        "title": "ClientRegistry Interface"
      },
      "h3": {
        "id": "set_primary--setprimary",
        "title": "set_primary / setPrimary"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.dynamic-runtime-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/dynamic-runtime-types",
    "pathname": "/guide/baml-advanced/dynamic-runtime-types",
    "icon": "fa-solid fa-person-running",
    "title": "Dynamic Types - TypeBuilder",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Sometimes you have output schemas that change at runtime -- for example if\nyou have a list of Categories that you need to classify that come from a\ndatabase, or your schema is user-provided.\nTypeBuilder is used to create or modify dynamic types at runtime to achieve this."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.dynamic-runtime-types-dynamic-baml-enums-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/dynamic-runtime-types",
    "pathname": "/guide/baml-advanced/dynamic-runtime-types",
    "icon": "fa-solid fa-person-running",
    "title": "Dynamic BAML Enums",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamic-baml-enums",
    "content": "Imagine we want to make a categorizer prompt, but the list of categories to output come from a database.\nAdd @@dynamic to the class or enum definition to mark it as dynamic in BAML.\n\n\nImport the TypeBuilder from baml_client in your runtime code and modify Category. All dynamic types you\ndefine in BAML will be available as properties of TypeBuilder. Think of the\ntypebuilder as a registry of modified runtime types that the baml function will\nread from when building the output schema in the prompt.\n\n\n\n\n\n\n\n\n\n\n\n\nDynamic types are not yet supported when used via OpenAPI.\nPlease let us know if you want this feature, either via Discord or GitHub.",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "baml",
        "code": "enum Category {\n  VALUE1 // normal static enum values that don't change\n  VALUE2\n  @@dynamic // this enum can have more values added at runtime\n} \n\n// The Category enum can now be modified at runtime!\nfunction DynamicCategorizer(input: string) -> Category {\n  client GPT4\n  prompt #\"\n    Given a string, classify it into a category\n    {{ input }}\n     \n    {{ ctx.output_format }}\n  \"#\n}\n"
      },
      {
        "lang": "python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.Category.add_value('VALUE3')\n  tb.Category.add_value('VALUE4')\n  # Pass the typebuilder in the baml_options argument -- the last argument of the function.\n  res = await b.DynamicCategorizer(\"some input\", { \"tb\": tb })\n  # Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  print(res)\n"
      },
      {
        "lang": "python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.Category.add_value('VALUE3')\n  tb.Category.add_value('VALUE4')\n  # Pass the typebuilder in the baml_options argument -- the last argument of the function.\n  res = await b.DynamicCategorizer(\"some input\", { \"tb\": tb })\n  # Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  print(res)\n"
      },
      {
        "lang": "typescript",
        "code": "import TypeBuilder from '../baml_client/type_builder'\nimport {\n  b\n} from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.Category.addValue('VALUE3')\n  tb.Category.addValue('VALUE4')\n  const res = await b.DynamicCategorizer(\"some input\", { tb: tb })\n  // Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  console.log(res)\n}"
      },
      {
        "lang": "typescript",
        "code": "import TypeBuilder from '../baml_client/type_builder'\nimport {\n  b\n} from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.Category.addValue('VALUE3')\n  tb.Category.addValue('VALUE4')\n  const res = await b.DynamicCategorizer(\"some input\", { tb: tb })\n  // Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  console.log(res)\n}"
      },
      {
        "lang": "ruby",
        "code": "require_relative '../baml_client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.Category.add_value('VALUE3')\n  tb.Category.add_value('VALUE4')\n  res = Baml.Client.dynamic_categorizer(input: \"some input\", baml_options: {tb: tb})\n  # Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  puts res\nend"
      },
      {
        "lang": "ruby",
        "code": "require_relative '../baml_client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.Category.add_value('VALUE3')\n  tb.Category.add_value('VALUE4')\n  res = Baml.Client.dynamic_categorizer(input: \"some input\", baml_options: {tb: tb})\n  # Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  puts res\nend"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Dynamic Types - TypeBuilder"
      },
      "h3": {
        "id": "dynamic-baml-enums",
        "title": "Dynamic BAML Enums"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.dynamic-runtime-types-dynamic-baml-classes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/dynamic-runtime-types",
    "pathname": "/guide/baml-advanced/dynamic-runtime-types",
    "icon": "fa-solid fa-person-running",
    "title": "Dynamic BAML Classes",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamic-baml-classes",
    "content": "Now we'll add some properties to a User class at runtime using @@dynamic.\nWe can then modify the User schema at runtime. Since we marked User with @@dynamic, it'll be available as a property of TypeBuilder.",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "class User {\n  name string\n  age int\n  @@dynamic\n}\n\nfunction DynamicUserCreator(user_info: string) -> User {\n  client GPT4\n  prompt #\"\n    Extract the information from this chunk of text:\n    \"{{ user_info }}\"\n     \n    {{ ctx.output_format }}\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.User.add_property('email', tb.string())\n  tb.User.add_property('address', tb.string()).description(\"The user's address\")\n  res = await b.DynamicUserCreator(\"some user info\", { \"tb\": tb })\n  # Now res can have email and address fields\n  print(res)\n"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import TypeBuilder from '../baml_client/type_builder'\nimport {\n  b\n} from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.User.add_property('email', tb.string())\n  tb.User.add_property('address', tb.string()).description(\"The user's address\")\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res can have email and address fields\n  console.log(res)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.User.add_property('email', tb.string)\n  tb.User.add_property('address', tb.string).description(\"The user's address\")\n  \n  res = Baml.Client.dynamic_user_creator(input: \"some user info\", baml_options: {tb: tb})\n  # Now res can have email and address fields\n  puts res\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.User.add_property('email', tb.string())\n  tb.User.add_property('address', tb.string()).description(\"The user's address\")\n  res = await b.DynamicUserCreator(\"some user info\", { \"tb\": tb })\n  # Now res can have email and address fields\n  print(res)\n"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import TypeBuilder from '../baml_client/type_builder'\nimport {\n  b\n} from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.User.add_property('email', tb.string())\n  tb.User.add_property('address', tb.string()).description(\"The user's address\")\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res can have email and address fields\n  console.log(res)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.User.add_property('email', tb.string)\n  tb.User.add_property('address', tb.string).description(\"The user's address\")\n  \n  res = Baml.Client.dynamic_user_creator(input: \"some user info\", baml_options: {tb: tb})\n  # Now res can have email and address fields\n  puts res\nend"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Dynamic Types - TypeBuilder"
      },
      "h3": {
        "id": "dynamic-baml-classes",
        "title": "Dynamic BAML Classes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.dynamic-runtime-types-creating-new-dynamic-classes-or-enums-not-in-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/dynamic-runtime-types",
    "pathname": "/guide/baml-advanced/dynamic-runtime-types",
    "icon": "fa-solid fa-person-running",
    "title": "Creating new dynamic classes or enums not in BAML",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#creating-new-dynamic-classes-or-enums-not-in-baml",
    "content": "The previous examples showed how to modify existing types. Here we create a new Hobbies enum, and a new class called Address without having them defined in BAML.\nNote that you must attach the new types to the existing Return Type of your BAML function(in this case it's User).\n\n\nTypeBuilder provides methods for building different kinds of types:\nMethod Description Example \nstring() Creates a string type tb.string() \nint() Creates an integer type tb.int() \nfloat() Creates a float type tb.float() \nbool() Creates a boolean type tb.bool() \nlist() Makes a type into a list tb.string().list() \noptional() Makes a type optional tb.string().optional()",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client.async_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  hobbies_enum = tb.add_enum(\"Hobbies\")\n  hobbies_enum.add_value(\"Soccer\")\n  hobbies_enum.add_value(\"Reading\")\n\n  address_class = tb.add_class(\"Address\")\n  address_class.add_property(\"street\", tb.string()).description(\"The user's street address\")\n\n  tb.User.add_property(\"hobby\", hobbies_enum.type().optional())\n  tb.User.add_property(\"address\", address_class.type().optional())\n  res = await b.DynamicUserCreator(\"some user info\", {\"tb\": tb})\n  # Now res might have the hobby property, which can be Soccer or Reading\n  print(res)\n"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import TypeBuilder from '../baml_client/type_builder'\nimport { b } from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  const hobbiesEnum = tb.addEnum('Hobbies')\n  hobbiesEnum.addValue('Soccer')\n  hobbiesEnum.addValue('Reading')\n\n  const addressClass = tb.addClass('Address')\n  addressClass.addProperty('street', tb.string()).description(\"The user's street address\")\n\n\n  tb.User.addProperty('hobby', hobbiesEnum.type().optional())\n  tb.User.addProperty('address', addressClass.type())\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res might have the hobby property, which can be Soccer or Reading\n  console.log(res)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  hobbies_enum = tb.add_enum('Hobbies')\n  hobbies_enum.add_value('Soccer')\n  hobbies_enum.add_value('Reading')\n\n  address_class = tb.add_class('Address')\n  address_class.add_property('street', tb.string)\n\n  tb.User.add_property('hobby', hobbies_enum.type.optional)\n  tb.User.add_property('address', address_class.type.optional)\n  \n  res = Baml::Client.dynamic_user_creator(input: \"some user info\", baml_options: { tb: tb })\n  # Now res might have the hobby property, which can be Soccer or Reading\n  puts res\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client.async_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  hobbies_enum = tb.add_enum(\"Hobbies\")\n  hobbies_enum.add_value(\"Soccer\")\n  hobbies_enum.add_value(\"Reading\")\n\n  address_class = tb.add_class(\"Address\")\n  address_class.add_property(\"street\", tb.string()).description(\"The user's street address\")\n\n  tb.User.add_property(\"hobby\", hobbies_enum.type().optional())\n  tb.User.add_property(\"address\", address_class.type().optional())\n  res = await b.DynamicUserCreator(\"some user info\", {\"tb\": tb})\n  # Now res might have the hobby property, which can be Soccer or Reading\n  print(res)\n"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import TypeBuilder from '../baml_client/type_builder'\nimport { b } from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  const hobbiesEnum = tb.addEnum('Hobbies')\n  hobbiesEnum.addValue('Soccer')\n  hobbiesEnum.addValue('Reading')\n\n  const addressClass = tb.addClass('Address')\n  addressClass.addProperty('street', tb.string()).description(\"The user's street address\")\n\n\n  tb.User.addProperty('hobby', hobbiesEnum.type().optional())\n  tb.User.addProperty('address', addressClass.type())\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res might have the hobby property, which can be Soccer or Reading\n  console.log(res)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  hobbies_enum = tb.add_enum('Hobbies')\n  hobbies_enum.add_value('Soccer')\n  hobbies_enum.add_value('Reading')\n\n  address_class = tb.add_class('Address')\n  address_class.add_property('street', tb.string)\n\n  tb.User.add_property('hobby', hobbies_enum.type.optional)\n  tb.User.add_property('address', address_class.type.optional)\n  \n  res = Baml::Client.dynamic_user_creator(input: \"some user info\", baml_options: { tb: tb })\n  # Now res might have the hobby property, which can be Soccer or Reading\n  puts res\nend"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Dynamic Types - TypeBuilder"
      },
      "h3": {
        "id": "creating-new-dynamic-classes-or-enums-not-in-baml",
        "title": "Creating new dynamic classes or enums not in BAML"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.dynamic-runtime-types-building-dynamic-types-from-json-schema-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/dynamic-runtime-types",
    "pathname": "/guide/baml-advanced/dynamic-runtime-types",
    "icon": "fa-solid fa-person-running",
    "title": "Building dynamic types from JSON schema",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#building-dynamic-types-from-json-schema",
    "content": "We have a working implementation of this, but are waiting for a concrete use case to merge it.\nPlease chime in on the GitHub issue if this is\nsomething you'd like to use.",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "import pydantic\nfrom baml_client import b\n\nclass Person(pydantic.BaseModel):\n    last_name: list[str]\n    height: Optional[float] = pydantic.Field(description=\"Height in meters\")\n\ntb = TypeBuilder()\ntb.unstable_features.add_json_schema(Person.model_json_schema())\n\nres = await b.ExtractPeople(\n    \"My name is Harrison. My hair is black and I'm 6 feet tall. I'm pretty good around the hoop. I like giraffes.\",\n    {\"tb\": tb},\n)"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import 'z' from zod\nimport 'zodToJsonSchema' from zod-to-json-schema\nimport { b } from '../baml_client'\n\nconst personSchema = z.object({\n  animalLiked: z.object({\n    animal: z.string().describe('The animal mentioned, in singular form.'),\n  }),\n  hobbies: z.enum(['chess', 'sports', 'music', 'reading']).array(),\n  height: z.union([z.string(), z.number().int()]).describe('Height in meters'),\n})\n\nlet tb = new TypeBuilder()\ntb.unstableFeatures.addJsonSchema(zodToJsonSchema(personSchema, 'Person'))\n\nconst res = await b.ExtractPeople(\n  \"My name is Harrison. My hair is black and I'm 6 feet tall. I'm pretty good around the hoop. I like giraffes.\",\n  { tb },\n)"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.unstable_features.add_json_schema(...)\n\nres = Baml::Client.extract_people(\n  input: \"My name is Harrison. My hair is black and I'm 6 feet tall. I'm pretty good around the hoop. I like giraffes.\",\n  baml_options: { tb: tb }\n)\n\nputs res"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import pydantic\nfrom baml_client import b\n\nclass Person(pydantic.BaseModel):\n    last_name: list[str]\n    height: Optional[float] = pydantic.Field(description=\"Height in meters\")\n\ntb = TypeBuilder()\ntb.unstable_features.add_json_schema(Person.model_json_schema())\n\nres = await b.ExtractPeople(\n    \"My name is Harrison. My hair is black and I'm 6 feet tall. I'm pretty good around the hoop. I like giraffes.\",\n    {\"tb\": tb},\n)"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import 'z' from zod\nimport 'zodToJsonSchema' from zod-to-json-schema\nimport { b } from '../baml_client'\n\nconst personSchema = z.object({\n  animalLiked: z.object({\n    animal: z.string().describe('The animal mentioned, in singular form.'),\n  }),\n  hobbies: z.enum(['chess', 'sports', 'music', 'reading']).array(),\n  height: z.union([z.string(), z.number().int()]).describe('Height in meters'),\n})\n\nlet tb = new TypeBuilder()\ntb.unstableFeatures.addJsonSchema(zodToJsonSchema(personSchema, 'Person'))\n\nconst res = await b.ExtractPeople(\n  \"My name is Harrison. My hair is black and I'm 6 feet tall. I'm pretty good around the hoop. I like giraffes.\",\n  { tb },\n)"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.unstable_features.add_json_schema(...)\n\nres = Baml::Client.extract_people(\n  input: \"My name is Harrison. My hair is black and I'm 6 feet tall. I'm pretty good around the hoop. I like giraffes.\",\n  baml_options: { tb: tb }\n)\n\nputs res"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Dynamic Types - TypeBuilder"
      },
      "h3": {
        "id": "building-dynamic-types-from-json-schema",
        "title": "Building dynamic types from JSON schema"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.dynamic-runtime-types-testing-dynamic-types-in-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/dynamic-runtime-types",
    "pathname": "/guide/baml-advanced/dynamic-runtime-types",
    "icon": "fa-solid fa-person-running",
    "title": "Testing dynamic types in BAML",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#testing-dynamic-types-in-baml",
    "content": "This feature is coming soon! Let us know if you're interested in testing it out!\nYou can still write tests in Python, TypeScript, Ruby, etc in the meantime.",
    "hierarchy": {
      "h0": {
        "title": "Dynamic Types - TypeBuilder"
      },
      "h3": {
        "id": "testing-dynamic-types-in-baml",
        "title": "Testing dynamic types in BAML"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.reusing-prompt-snippets-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/reusing-prompt-snippets",
    "pathname": "/guide/baml-advanced/reusing-prompt-snippets",
    "icon": "fa-regular fa-repeat",
    "title": "Reusing Prompt Snippets",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "// Inject a list of \"system\" or \"user\" messages into the prompt.\n// Note the syntax -- there are no curlies. Just a string block.\ntemplate_string PrintMessages(messages: Message[]) #\"\n  {% for m in messages %}\n    {{ _.role(m.role) }}\n    {{ m.message }}\n  {% endfor %}\n\"#\n\nfunction ClassifyConversation(messages: Message[]) -> Category[] {\n  client GPT4Turbo\n  prompt #\"\n    Classify this conversation:\n    {{ PrintMessages(messages) }}\n\n    Use the following categories:\n    {{ ctx.output_format}}\n  \"#\n}"
      }
    ],
    "content": "Writing prompts requires a lot of string manipulation. BAML has a template_string to let you combine different string templates together. Under-the-hood they use jinja to evaluate the string and its inputs.\nTemplate Strings are functions that always return a string. They can be used to define reusable parts of a prompt, or to make the prompt more readable by breaking it into smaller parts.\nExample\nIn this example we can call the template_string PrintMessages to subdivide the prompt into \"user\" or \"system\" messages using _.role() (see message roles). This allows us to reuse the logic for printing messages in multiple prompts.\nYou can nest as many template strings inside each other and call them however many times you want.\n\n\nThe BAML linter may give you a warning when you use template strings due to a static analysis limitation. You can ignore this warning. If it renders in the playground, you're good!\nUse the playground preview to ensure your template string is being evaluated correctly!"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.prompt-caching-message-role-metadata-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/prompt-caching-message-role-metadata",
    "pathname": "/guide/baml-advanced/prompt-caching-message-role-metadata",
    "icon": "fa-regular fa-database",
    "title": "Prompt Caching / Message Role Metadata",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "curl",
        "meta": "{3,11} Anthropic Request",
        "code": "curl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"anthropic-beta: prompt-caching-2024-07-31\" \\\n  -d '{\n    \"model\": \"claude-3-5-sonnet-20241022\",\n    \"max_tokens\": 1024,\n    \"messages\": [\n       {\n        \"type\": \"text\", \n        \"text\": \"<the entire contents of Pride and Prejudice>\",\n        \"cache_control\": {\"type\": \"ephemeral\"}\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Analyze the major themes in Pride and Prejudice.\"\n      }\n    ]\n  }'"
      },
      {
        "lang": "baml",
        "meta": "{5-8} main.baml",
        "code": "client<llm> AnthropicClient {\n  provider \"anthropic\"\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    allowed_role_metadata [\"cache_control\"]\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "{2,6} main.baml",
        "code": "function AnalyzeBook(book: string) -> string {\n  client<llm> AnthropicClient\n  prompt #\"\n    {{ _.role(\"user\") }}\n    {{ book }}\n    {{ _.role(\"user\", cache_control={\"type\": \"ephemeral\"}) }}\n    Analyze the major themes in Pride and Prejudice.\n  \"#\n}"
      },
      {
        "lang": "baml",
        "meta": "{5-8} main.baml",
        "code": "client<llm> AnthropicClient {\n  provider \"anthropic\"\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    allowed_role_metadata [\"cache_control\"]\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "{2,6} main.baml",
        "code": "function AnalyzeBook(book: string) -> string {\n  client<llm> AnthropicClient\n  prompt #\"\n    {{ _.role(\"user\") }}\n    {{ book }}\n    {{ _.role(\"user\", cache_control={\"type\": \"ephemeral\"}) }}\n    Analyze the major themes in Pride and Prejudice.\n  \"#\n}"
      }
    ],
    "content": "Recall that an LLM request usually looks like this, where it sometimes has metadata in each message. In this case, Anthropic has a cache_control key.\nThis is nearly the same as this BAML code, minus the cache_control metadata:\nLet's add the cache-control metadata to each of our messges in BAML now.\nThere's just 2 steps:\n\n\nAllow role metadata and header in the client definition\nAdd the metadata to the messages\nWe have the \"allowed_role_metadata\" so that if you swap to other LLM clients, we don't accidentally forward the wrong metadata to the new provider API.\n\n\nRemember to check the \"raw curl\" checkbox in the VSCode Playground to see the exact request being sent!"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Validations",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "With custom type validations, you can set specific rules to ensure your data's\nvalue falls within an acceptable range.\nBAML provides two types of validations:\n@assert for strict validations. If a type fails an @assert validation, it\nwill not be returned in the response. If the failing assertion was part of the\ntop-level type, it will raise an exception. If it's part of a container, it\nwill be removed from the container.\n\n@check for non-exception-raising validations. Whether a @check passes or\nfails, the data will be returned. You can access the results of invidividual\nchecks in the response data."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-assertions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Assertions",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#assertions",
    "content": "Assertions are used to guarantee properties about a type or its components in a response.\nThey can be written directly as inline attributes next to the field\ndefinition or on the line following the field definition, or on a top-level type used\nin a function declaration.",
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "assertions",
        "title": "Assertions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-using-assert-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Using @assert",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#using-assert",
    "content": "BAML will raise an exception if a function returns a Foo where Foo.bar\nis not between 0 and 10.\nIf the function NextInt8 returns 128, BAML will raise an exception.\nAsserts may be applied to a whole class via @@assert.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Foo {\n  bar int @assert(between_0_and_10, {{ this > 0 and this < 10 }}) //this = Foo.bar value\n}\n\nfunction NextInt8(a: int) -> int @assert(ok_int8, {{ this >= -128 and this < 127 }}) {\n  client GPT4\n  prompt #\"Return the number after {{ a }}\"#\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Bar {\n  baz int\n  quux string\n  @@assert(length_limit, {{ this.quux|length < this.baz }})\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "assertions",
        "title": "Assertions"
      },
      "h3": {
        "id": "using-assert",
        "title": "Using @assert"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-using-assert-with-union-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Using @assert with Union Types",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#using-assert-with-union-types",
    "content": "Note that when using Unions, it is\ncrucial to specify where the @assert attribute is applied within the union\ntype, as it is not known until runtime which type the value will be.\nIn the above example, the @assert attribute is applied specifically to the\nint and string instances of the Union, rather than to the Foo.bar field\nas a whole.\nLikewise, the keyword this refers to the value of the type instance it is\ndirectly associated with (e.g., int or string).",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Foo {\n  bar (int @assert(positive, {{ this > 0 }}) | bool @assert(is_true, {{ this }}))\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "assertions",
        "title": "Assertions"
      },
      "h3": {
        "id": "using-assert-with-union-types",
        "title": "Using @assert with Union Types"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-chaining-assertions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Chaining Assertions",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#chaining-assertions",
    "content": "You can have multiple assertions on a single field by chaining multiple @assert attributes.\nIn this example, the asserts on bar and baz are equivalent.\nChained asserts are evaluated in order from left to right. If the first assert\nfails, the second assert will not be evaluated.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Foo {\n  bar int @assert(between_0_and_10, {{ this > 0 and this < 10 }})\n  baz int @assert(positive, {{ this > 0 }}) @assert(less_than_10, {{ this < 10 }})\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "chaining-assertions",
        "title": "Chaining Assertions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-writing-assertions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Writing Assertions",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#writing-assertions",
    "content": "Assertions are represented as Jinja expressions and can be used to validate\nvarious types of data. Possible constraints include checking the length of a\nstring, comparing two values, or verifying the presence of a substring with\nregular expressions.\nIn the future, we plan to support shorthand syntax for common assertions to make\nwriting them easier.\nFor now, see our Jinja cookbook / guide\nor the Minijinja filters docs\nfor more information on writing expressions.",
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "writing-assertions",
        "title": "Writing Assertions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-expression-keywords-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Expression keywords",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#expression-keywords",
    "content": "this refers to the value of the current field being validated.\n\n\nthis.field is used to refer to a specific field within the context of this.\nAccess nested fields of a data type by chaining the field names together with a . as shown below.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Resume {\n  name string\n  experience string[]\n\n}\n\nclass Person {\n  resume Resume @assert({{ this.experience|length > 0 }}, \"Nonzero experience\")\n  person_name name\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "writing-assertions",
        "title": "Writing Assertions"
      },
      "h3": {
        "id": "expression-keywords",
        "title": "Expression keywords"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-assertion-errors-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Assertion Errors",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#assertion-errors",
    "content": "When validations fail, your BAML function will raise a BamlValidationError\nexception, same as when parsing fails. You can catch this exception and handle\nit as you see fit.\nYou can define custom names for each assertion, which will be included\nin the exception for that failure case. If you don't define a custom name,\nBAML will display the body of the assert expression.\nIn this example, if the quote field is empty, BAML raises a\nBamlValidationError with the message \"exact_citation_not_found\". If the\nwebsite_link field does not contain \"https://\", it raises a\nBamlValidationError with the message invalid_link.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Citation {\n  //@assert(<name>, <expr>)\n  quote string @assert(exact_citation_found,\n\t  {{ this|length > 0 }}\n  )\n\n  website_link string @assert(valid_link,\n    {{ this|regex_match(\"https://\") }}\n  )\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import b\nfrom baml_client.types import Citation\n\ndef main():\n    try:\n        citation: Citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n        # Access the value of the quote field\n        quote = citation.quote\n        website_link = citation.website_link\n        print(f\"Quote: {quote} from {website_link}\")\n        \n    except BamlValidationError as e:\n        print(f\"Validation error: {str(e)}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n"
      },
      {
        "lang": "typescript",
        "meta": "Typescript",
        "code": "import { b, BamlValidationError } from './baml_client';\nimport { Citation } from './baml_client/types';\n\nconst main = () => {\n    try {\n        const citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\");\n        \n        const quote = citation.quote.value;\n        console.log(`Quote: ${quote}`);\n\n        const checks = citation.quote.checks;\n        console.log(`Check exact_citation_found: ${checks.exact_citation_found.status}`);\n        for (const check of get_checks(checks)) {\n            console.log(`Check ${check.name}: ${check.status}`);\n        }\n\n        const author = citation.author;\n        console.log(`Author: ${author}`);\n    } catch (e) {\n        if (e instanceof BamlValidationError) {\n            console.log(`Validation error: ${e}`);\n        } else {\n            console.error(e);\n        }\n    }\n};"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import b\nfrom baml_client.types import Citation\n\ndef main():\n    try:\n        citation: Citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n        # Access the value of the quote field\n        quote = citation.quote\n        website_link = citation.website_link\n        print(f\"Quote: {quote} from {website_link}\")\n        \n    except BamlValidationError as e:\n        print(f\"Validation error: {str(e)}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n"
      },
      {
        "lang": "typescript",
        "meta": "Typescript",
        "code": "import { b, BamlValidationError } from './baml_client';\nimport { Citation } from './baml_client/types';\n\nconst main = () => {\n    try {\n        const citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\");\n        \n        const quote = citation.quote.value;\n        console.log(`Quote: ${quote}`);\n\n        const checks = citation.quote.checks;\n        console.log(`Check exact_citation_found: ${checks.exact_citation_found.status}`);\n        for (const check of get_checks(checks)) {\n            console.log(`Check ${check.name}: ${check.status}`);\n        }\n\n        const author = citation.author;\n        console.log(`Author: ${author}`);\n    } catch (e) {\n        if (e instanceof BamlValidationError) {\n            console.log(`Validation error: ${e}`);\n        } else {\n            console.error(e);\n        }\n    }\n};"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "assertion-errors",
        "title": "Assertion Errors"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-checks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Checks",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#checks",
    "content": "@check attributes add validations without raising exceptions if they fail.\nTypes with @check attributes allow the validations to be inspected at\nruntime.\n\n\nThe following example uses both @check and @assert. If line_number fails its\n@assert, no Citation will be returned by GetCitation(). However,\nexact_citation_not_found can fail without interrupting the result. Because it\nwas a @check, client code can inspect the result of the check.\n\n\nYou can also chain multiple @check and @assert attributes on a single field.\n\n\n When using @check, all checks on the response data are evaluated even if\none fails. In contrast, with @assert, a failure will stop the parsing process\nand immediately raise an exception.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "( bar int @check(less_than_zero, {{ this < 0 }}) )[]"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "List[Checked[int, Dict[Literal[\"less_than_zero\"]]]]"
      },
      {
        "lang": "typescript",
        "meta": "Typescript",
        "code": "Checked<int,\"less_than_zero\">[]"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "List[Checked[int, Dict[Literal[\"less_than_zero\"]]]]"
      },
      {
        "lang": "typescript",
        "meta": "Typescript",
        "code": "Checked<int,\"less_than_zero\">[]"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Citation {\n  quote string @check(\n      exact_citation_match,\n\t  {{ this|length > 0 }}\n  )\n  line_number string @assert(\n    has_line_number\n    {{ this|length >= 0 }}\n  )\n}\n\nfunction GetCitation(full_text: string) -> Citation {\n  client GPT4 \n  prompt #\"\n    Generate a citation of the text below in MLA format:\n    {{full_text}}\n\n    {{ctx.output_format}}\n  \"#\n}\n"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import b\nfrom baml_client.types import Citation, get_checks\n\ndef main():\n    citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n    # Access the value of the quote field\n    quote = citation.quote.value \n    print(f\"Quote: {quote}\")\n\n    # Access a particular check.\n    quote_match_check = citation.quote.checks['exact_citation_match'].status\n    print(f\"Citation match status: {quote_match_check})\")\n\n    # Access each check and its status.\n    for check in get_checks(citation.quote.checks):\n        print(f\"Check {check.name}: {check.status}\")"
      },
      {
        "lang": "typescript",
        "meta": "Typescript",
        "code": "import { b, get_checks } from './baml_client'\nimport { Citation } from './baml_client/types'\n\nconst main = () => {\n    const citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n    // Access the value of the quote field\n    const quote = citation.quote.value\n    console.log(`Quote: ${quote}`)\n\n    // Access a particular check.\n    const quote_match_check = citation.quote.checks.exact_citation_match.status;\n    console.log(`Exact citation status: ${quote_match_check}`);\n\n    // Access each check and its status.\n    for (const check of get_checks(citation.quote.checks)) {\n        console.log(`Check: ${check.name}, Status: ${check.status}`)\n    }\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import b\nfrom baml_client.types import Citation, get_checks\n\ndef main():\n    citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n    # Access the value of the quote field\n    quote = citation.quote.value \n    print(f\"Quote: {quote}\")\n\n    # Access a particular check.\n    quote_match_check = citation.quote.checks['exact_citation_match'].status\n    print(f\"Citation match status: {quote_match_check})\")\n\n    # Access each check and its status.\n    for check in get_checks(citation.quote.checks):\n        print(f\"Check {check.name}: {check.status}\")"
      },
      {
        "lang": "typescript",
        "meta": "Typescript",
        "code": "import { b, get_checks } from './baml_client'\nimport { Citation } from './baml_client/types'\n\nconst main = () => {\n    const citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n    // Access the value of the quote field\n    const quote = citation.quote.value\n    console.log(`Quote: ${quote}`)\n\n    // Access a particular check.\n    const quote_match_check = citation.quote.checks.exact_citation_match.status;\n    console.log(`Exact citation status: ${quote_match_check}`);\n\n    // Access each check and its status.\n    for (const check of get_checks(citation.quote.checks)) {\n        console.log(`Check: ${check.name}, Status: ${check.status}`)\n    }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Foo {\n  bar string @check(bar_nonempty, {{ this|length > 0 }})\n  @assert(bar_no_foo, {{ this|contains(\"foo\") }})\n  @check(bar_no_fizzle, {{ this|contains(\"fizzle\") }})\n  @assert(bar_no_baz, {{ this|contains(\"baz\") }})\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "checks",
        "title": "Checks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.baml-advanced.validations-advanced-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/validations",
    "pathname": "/guide/baml-advanced/validations",
    "icon": "fa-regular fa-check-circle",
    "title": "Advanced Example",
    "breadcrumb": [
      {
        "title": "BAML Advanced",
        "pathname": "/guide/baml-advanced"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#advanced-example",
    "content": "The following example shows more complex minijinja expressions, see the\nMinijinja filters docs\nfor more information on available operators to use in your assertions.\n\n\nThe Book and Library classes below demonstrate how to validate a book's\ntitle, author, ISBN, publication year, genres, and a library's name and books.\nThe block-level assertion in the Library class ensures that all books have\nunique ISBNs.\nIn this example, we use a block-level @@assert to check a dependency across\na pair of fields.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Book {\n    title string @assert(this|length > 0)\n    author string @assert(this|length > 0)\n    isbn string @assert(\n        {{ this|regex_match(\"^(97(8|9))?\\d{9}(\\d|X)$\") }},\n        \"Invalid ISBN format\"\n    )\n    publication_year int @assert(valid_pub_year, {{ 1000 <= this <= 2100 }})\n    genres string[] @assert(valid_length, {{ 1 <= this|length <= 10 }})\n}\n\nclass Library {\n    name string\n    books Book[] @assert(nonempty_books, {{ this|length > 0 }})\n                 @assert(unique_isbn, {{ this|map(attribute='isbn')|unique()|length == this|length }} )\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Person {\n    name string @assert(valid_name, {{ this|length >= 2 }})\n    age int @assert(valid_age, {{ this >= 0 }})\n    address Address\n\n    @@assert(not_usa_minor, {{\n        this.age >= 18 or this.address.country != \"USA\",\n    }})\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Validations"
      },
      "h2": {
        "id": "advanced-example",
        "title": "Advanced Example"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.get-started-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/get-started",
    "pathname": "/guide/cloud/functions/get-started",
    "title": "Get Started",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Learn how to host your BAML code on Boundary Functions and call it over HTTP.\n\n\nThis is a preview feature, available starting with baml-cli v0.66.0.\n\n\nThe BAML language, compiler, and runtime will always be 100% free and\nopen-source: we will always allow you to run BAML functions directly in your\nown backends.\nBoundary Functions' goal is to make it even easier to host and run BAML\nfunctions, by adding support for features like rate limits, telemetry, and\nend-user feedback.\nBoundary Functions allows you to host your BAML functions on our infrastructure, exposing\none REST API endpoint per BAML function.\n\n\n\n\nThis guide will walk you through:\ncreating a Boundary Cloud account,\n\ndeploying your BAML code to Boundary Functions,\n\nsetting your API keys, and\n\ncalling your BAML functions.\n\n\nOnce you've deployed your BAML functions, you can use the OpenAPI client to\ncall them."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.get-started-get-started-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/get-started",
    "pathname": "/guide/cloud/functions/get-started",
    "title": "Get Started",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#get-started",
    "content": "First, create your account and organization at https://dashboard.boundaryml.com.\nThen, log in from your terminal:\nand run this command in your baml_src/ directory:\nThis will prompt you to create a new Boundary project, deploy your BAML code to it,\nand then point you to the dashboard, where you can set environment variables and\ncreate API keys to use to call your BAML functions.\n\n\n\n\nOnce you've set the environment variables you need (probably ANTHROPIC_API_KEY\nand/or OPENAI_API_KEY), you can call your BAML functions!\nIf you still have the ExtractResume function that your BAML project was created with,\nyou can use this command to test it out:\nCongratulations! You've gotten your first BAML functions working on Boundary Functions.",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "baml-cli login"
      },
      {
        "lang": "bash",
        "code": "baml-cli deploy"
      },
      {
        "lang": "bash",
        "code": "curl https://api2.boundaryml.com/v3/functions/prod/call/ExtractResume \\\n  -H \"Authorization: Bearer $BOUNDARY_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n{\n  \"resume\": \"\n    Grace Hopper\n    grace.hopper@example.com\n\n    Experience:\n    - Rear Admiral, US Navy\n    - Senior Programmer, Eckert-Mauchly Computer Corporation\n    - Associate Professor, Vassar College\n\n    Skills:\n    - COBOL\n    - Compiler development\n  \"\n}\nEOF"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Get Started"
      },
      "h2": {
        "id": "get-started",
        "title": "Get Started"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.get-started-local-development-and-testing-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/get-started",
    "pathname": "/guide/cloud/functions/get-started",
    "title": "Local development and testing",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#local-development-and-testing",
    "content": "To test your BAML functions locally, you can use baml-cli dev:\nwhich will allow you to call your functions at http://localhost:2024/call/<function_name> instead of\nhttps://api2.boundaryml.com/v3/functions/prod/call/<function_name> using the exact same curl command:",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "ANTHROPIC_API_KEY=... OPENAI_API_KEY=... baml-cli dev"
      },
      {
        "lang": "bash",
        "code": "curl http://localhost:2024/functions/prod/call/ExtractResume \\\n  -H \"Authorization: Bearer $BOUNDARY_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n{\n  \"resume\": \"\n    Grace Hopper\n    grace.hopper@example.com\n\n    Experience:\n    - Rear Admiral, US Navy\n    - Senior Programmer, Eckert-Mauchly Computer Corporation\n    - Associate Professor, Vassar College\n\n    Skills:\n    - COBOL\n    - Compiler development\n  \"\n}\nEOF"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Get Started"
      },
      "h2": {
        "id": "local-development-and-testing",
        "title": "Local development and testing"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.using-open-api-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/using-openapi",
    "pathname": "/guide/cloud/functions/using-openapi",
    "title": "Using OpenAPI",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Learn how to use your OpenAPI client to call your functions in Boundary Functions.\n\n\nThis page assumes you've already deployed your BAML code to Boundary Functions. If\nyou haven't done that yet, check out the guide for getting started.\n\n\nThis page assumes you're using an OpenAPI-generated BAML client. If you\nhaven't done that yet, check out the OpenAPI quickstart."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.using-open-api-create-an-api-key-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/using-openapi",
    "pathname": "/guide/cloud/functions/using-openapi",
    "title": "Create an API key",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#create-an-api-key",
    "content": "You can create API keys in the Boundary\nDashboard by going to the left sidebar and\nclicking on the key icon.\n\n\n\n\nOnce you've created a new key, update your application code to use it as BOUNDARY_API_KEY.",
    "hierarchy": {
      "h0": {
        "title": "Using OpenAPI"
      },
      "h2": {
        "id": "create-an-api-key",
        "title": "Create an API key"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.using-open-api-update-your-application-code-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/using-openapi",
    "pathname": "/guide/cloud/functions/using-openapi",
    "title": "Update your application code",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update-your-application-code",
    "content": "You also need to update your application code to use BOUNDARY_ENDPOINT and\nBOUNDARY_API_KEY, if set, when constructing the OpenAPI client.",
    "code_snippets": [
      {
        "lang": "go",
        "code": "import (\n    \"os\"\n    baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n    cfg := baml.NewConfiguration()\n    if boundaryEndpoint := os.Getenv(\"BOUNDARY_ENDPOINT\"); boundaryEndpoint != \"\" {\n        cfg.BasePath = boundaryEndpoint\n    }\n    if boundaryApiKey := os.Getenv(\"BOUNDARY_API_KEY\"); boundaryApiKey != \"\" {\n        cfg.DefaultHeader[\"Authorization\"] = \"Bearer \" + boundaryApiKey\n    }\n    b := baml.NewAPIClient(cfg).DefaultAPI\n    // Use `b` to make API calls\n}"
      },
      {
        "lang": "go",
        "code": "import (\n    \"os\"\n    baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n    cfg := baml.NewConfiguration()\n    if boundaryEndpoint := os.Getenv(\"BOUNDARY_ENDPOINT\"); boundaryEndpoint != \"\" {\n        cfg.BasePath = boundaryEndpoint\n    }\n    if boundaryApiKey := os.Getenv(\"BOUNDARY_API_KEY\"); boundaryApiKey != \"\" {\n        cfg.DefaultHeader[\"Authorization\"] = \"Bearer \" + boundaryApiKey\n    }\n    b := baml.NewAPIClient(cfg).DefaultAPI\n    // Use `b` to make API calls\n}"
      },
      {
        "lang": "java",
        "code": "import com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\nimport com.boundaryml.baml_client.api.DefaultApi;\nimport com.boundaryml.baml_client.auth.*;\n\npublic class ApiExample {\n    public static void main(String[] args) {\n        ApiClient apiClient = Configuration.getDefaultApiClient();\n\n        String boundaryEndpoint = System.getenv(\"BOUNDARY_ENDPOINT\");\n        if (boundaryEndpoint != null && !boundaryEndpoint.isEmpty()) {\n            apiClient.setBasePath(boundaryEndpoint);\n        }\n\n        String boundaryApiKey = System.getenv(\"BOUNDARY_API_KEY\");\n        if (boundaryApiKey != null && !boundaryApiKey.isEmpty()) {\n            apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + boundaryApiKey);\n        }\n\n        DefaultApi apiInstance = new DefaultApi(apiClient);\n        // Use `apiInstance` to make API calls\n    }\n}"
      },
      {
        "lang": "java",
        "code": "import com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\nimport com.boundaryml.baml_client.api.DefaultApi;\nimport com.boundaryml.baml_client.auth.*;\n\npublic class ApiExample {\n    public static void main(String[] args) {\n        ApiClient apiClient = Configuration.getDefaultApiClient();\n\n        String boundaryEndpoint = System.getenv(\"BOUNDARY_ENDPOINT\");\n        if (boundaryEndpoint != null && !boundaryEndpoint.isEmpty()) {\n            apiClient.setBasePath(boundaryEndpoint);\n        }\n\n        String boundaryApiKey = System.getenv(\"BOUNDARY_API_KEY\");\n        if (boundaryApiKey != null && !boundaryApiKey.isEmpty()) {\n            apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + boundaryApiKey);\n        }\n\n        DefaultApi apiInstance = new DefaultApi(apiClient);\n        // Use `apiInstance` to make API calls\n    }\n}"
      },
      {
        "lang": "php",
        "code": "require_once(__DIR__ . '/vendor/autoload.php');\n\n$config = BamlClient\\Configuration::getDefaultConfiguration();\n\n$boundaryEndpoint = getenv('BOUNDARY_ENDPOINT');\n$boundaryApiKey = getenv('BOUNDARY_API_KEY');\n\nif ($boundaryEndpoint) {\n    $config->setHost($boundaryEndpoint);\n}\n\nif ($boundaryApiKey) {\n    $config->setAccessToken($boundaryApiKey);\n}\n\n$apiInstance = new OpenAPI\\Client\\Api\\DefaultApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// Use `$apiInstance` to make API calls"
      },
      {
        "lang": "php",
        "code": "require_once(__DIR__ . '/vendor/autoload.php');\n\n$config = BamlClient\\Configuration::getDefaultConfiguration();\n\n$boundaryEndpoint = getenv('BOUNDARY_ENDPOINT');\n$boundaryApiKey = getenv('BOUNDARY_API_KEY');\n\nif ($boundaryEndpoint) {\n    $config->setHost($boundaryEndpoint);\n}\n\nif ($boundaryApiKey) {\n    $config->setAccessToken($boundaryApiKey);\n}\n\n$apiInstance = new OpenAPI\\Client\\Api\\DefaultApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// Use `$apiInstance` to make API calls"
      },
      {
        "lang": "ruby",
        "code": "require 'baml_client'\n\napi_client = BamlClient::ApiClient.new\n\nboundary_endpoint = ENV['BOUNDARY_ENDPOINT']\nif boundary_endpoint\n  api_client.host = boundary_endpoint\nend\n\nboundary_api_key = ENV['BOUNDARY_API_KEY']\nif boundary_api_key\n  api_client.default_headers['Authorization'] = \"Bearer #{boundary_api_key}\"\nend\nb = BamlClient::DefaultApi.new(api_client)\n# Use `b` to make API calls"
      },
      {
        "lang": "ruby",
        "code": "require 'baml_client'\n\napi_client = BamlClient::ApiClient.new\n\nboundary_endpoint = ENV['BOUNDARY_ENDPOINT']\nif boundary_endpoint\n  api_client.host = boundary_endpoint\nend\n\nboundary_api_key = ENV['BOUNDARY_API_KEY']\nif boundary_api_key\n  api_client.default_headers['Authorization'] = \"Bearer #{boundary_api_key}\"\nend\nb = BamlClient::DefaultApi.new(api_client)\n# Use `b` to make API calls"
      },
      {
        "lang": "rust",
        "code": "let mut config = baml_client::apis::configuration::Configuration::default();\nif let Some(base_path) = std::env::var(\"BOUNDARY_ENDPOINT\").ok() {\n    config.base_path = base_path;\n}\nif let Some(api_key) = std::env::var(\"BOUNDARY_API_KEY\").ok() {\n    config.bearer_access_token = Some(api_key);\n}\n// Use `config` to make API calls"
      },
      {
        "lang": "rust",
        "code": "let mut config = baml_client::apis::configuration::Configuration::default();\nif let Some(base_path) = std::env::var(\"BOUNDARY_ENDPOINT\").ok() {\n    config.base_path = base_path;\n}\nif let Some(api_key) = std::env::var(\"BOUNDARY_API_KEY\").ok() {\n    config.bearer_access_token = Some(api_key);\n}\n// Use `config` to make API calls"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Using OpenAPI"
      },
      "h2": {
        "id": "update-your-application-code",
        "title": "Update your application code"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.using-open-api-set-your-environment-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/using-openapi",
    "pathname": "/guide/cloud/functions/using-openapi",
    "title": "Set your environment variables",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#set-your-environment-variables",
    "content": "You can now set the following environment variables in your application:",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "BOUNDARY_API_KEY=...\nBOUNDARY_ENDPOINT=https://api2.boundaryml.com/v3/functions/prod/"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Using OpenAPI"
      },
      "h2": {
        "id": "set-your-environment-variables",
        "title": "Set your environment variables"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.using-open-api-call-your-functions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/using-openapi",
    "pathname": "/guide/cloud/functions/using-openapi",
    "title": "Call your functions",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#call-your-functions",
    "content": "You should now be able to call your deployed BAML functions using your OpenAPI client!",
    "hierarchy": {
      "h0": {
        "title": "Using OpenAPI"
      },
      "h2": {
        "id": "call-your-functions",
        "title": "Call your functions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.environment-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/environment-variables",
    "pathname": "/guide/cloud/functions/environment-variables",
    "title": "Environment Variables",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Learn how to use Boundary Functions Environment Variables, which are key-value pairs\nconfigured outside your source code.\nEnvironment variables are key-value pairs, configured outside your source code,\nand used to provide secrets for your deployed BAML functions, such as\nANTHROPIC_API_KEY and OPENAI_API_KEY.\nYou can set environment variables in the Boundary\nDashboard by going to the left sidebar and\nclicking on the cloud icon.\n\n\n\n\nChanges to environment variables will take effect immediately."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.functions.environment-variables-limits-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/cloud/functions/environment-variables",
    "pathname": "/guide/cloud/functions/environment-variables",
    "title": "Limits",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Functions",
        "pathname": "/guide/boundary-cloud/functions"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#limits",
    "content": "See Limits for more information.",
    "hierarchy": {
      "h0": {
        "title": "Environment Variables"
      },
      "h2": {
        "id": "limits",
        "title": "Limits"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.observability.tracking-usage-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/boundary-cloud/observability/tracking-usage",
    "pathname": "/guide/boundary-cloud/observability/tracking-usage",
    "icon": "fa-regular fa-bar-chart",
    "title": "Boundary Studio",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Observability",
        "pathname": "/guide/boundary-cloud/observability"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "export BOUNDARY_PROJECT_ID=project_uuid\nexport BOUNDARY_SECRET=your_token"
      }
    ],
    "content": "For the remaining of 2024, Boundary Studio is free for new accounts!\nBoundary Studio 2 will be released in 2025 with a new pricing model.\nTo enable observability with BAML, you'll first need to sign up for a Boundary Studio account.\nOnce you've signed up, you'll be able to create a new project and get your project token.\nThen simply add the following environment variables prior to running your application:\nThere you'll be able to see all the metrics and logs from your application including:\nCost\n\nFunction calls\n\nExecution time\n\nToken Usage\n\nPrompt Logs\n\nand more..."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.observability.tracking-usage-tracing-custom-events-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/boundary-cloud/observability/tracking-usage",
    "pathname": "/guide/boundary-cloud/observability/tracking-usage",
    "icon": "fa-regular fa-bar-chart",
    "title": "Tracing Custom Events",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Observability",
        "pathname": "/guide/boundary-cloud/observability"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#tracing-custom-events",
    "content": "BAML allows you to trace any function with the @trace decorator.\nThis will make the function's input and output show up in the Boundary dashboard. This works for any python function you define yourself. BAML LLM functions (or any other function declared in a .baml file) are already traced by default. Logs are only sent to the Dashboard if you setup your environment variables correctly.",
    "hierarchy": {
      "h0": {
        "title": "Boundary Studio"
      },
      "h2": {
        "id": "tracing-custom-events",
        "title": "Tracing Custom Events"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.observability.tracking-usage-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/boundary-cloud/observability/tracking-usage",
    "pathname": "/guide/boundary-cloud/observability/tracking-usage",
    "icon": "fa-regular fa-bar-chart",
    "title": "Example",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Observability",
        "pathname": "/guide/boundary-cloud/observability"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example",
    "content": "In the example below, we trace each of the two functions pre_process_text and full_analysis:\n\n\nThis allows us to see each function invocation, as well as all its children in the dashboard:\n\n\nSee running tests for more information on how to run this test.",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import baml\nfrom baml_client.types import Book, AuthorInfo\nfrom baml_client.tracing import trace\n\n# You can also add a custom name with trace(name=\"my_custom_name\")\n# By default, we use the function's name.\n@trace\ndef pre_process_text(text):\n    return text.replace(\"\\n\", \" \")\n\n\n@trace\nasync def full_analysis(book: Book):\n    sentiment = await baml.ClassifySentiment(\n        pre_process_text(book.content)\n    )\n    book_analysis = await baml.AnalyzeBook(book)\n    return book_analysis\n\n\n@trace\nasync def test_book1():\n    content = \"\"\"Before I could reply that he [Gatsby] was my neighbor...\n    \"\"\"\n    processed_content = pre_process_text(content)\n    return await full_analysis(\n        Book(\n            title=\"The Great Gatsby\",\n            author=AuthorInfo(firstName=\"F. Scott\", lastName=\"Fitzgerald\"),\n            content=processed_content,\n        ),\n    )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { baml } from 'baml_client';\nimport { Book, AuthorInfo } from 'baml_client/types';\nimport { traceSync, traceAsync } from 'baml_client/tracing';\n\nconst preProcessText = traceSync(function(text: string): Promise<string> {\n    return text.replace(/\\n/g, \" \");\n});\n\nconst fullAnalysis = traceAsync(async function(book: Book): Promise<any> {\n    const sentiment = await baml.ClassifySentiment(\n        preProcessText(book.content)\n    );\n    const bookAnalysis = await baml.AnalyzeBook(book);\n    return bookAnalysis;\n});\n\nconst testBook1 = traceAsync(async function(): Promise<any> {\n    const content = `Before I could reply that he [Gatsby] was my neighbor...`;\n    const processedContent = preProcessText(content);\n    return await fullAnalysis(\n        new Book(\n            \"The Great Gatsby\",\n            new AuthorInfo(\"F. Scott\", \"Fitzgerald\"),\n            processedContent\n        )\n    );\n});"
      },
      {
        "lang": "text",
        "meta": "Ruby",
        "code": "Tracing non-baml functions is not yet supported in Ruby."
      },
      {
        "lang": "text",
        "meta": "REST (OpenAPI)",
        "code": "Tracing non-baml functions is not yet supported in REST (OpenAPI)."
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client import baml\nfrom baml_client.types import Book, AuthorInfo\nfrom baml_client.tracing import trace\n\n# You can also add a custom name with trace(name=\"my_custom_name\")\n# By default, we use the function's name.\n@trace\ndef pre_process_text(text):\n    return text.replace(\"\\n\", \" \")\n\n\n@trace\nasync def full_analysis(book: Book):\n    sentiment = await baml.ClassifySentiment(\n        pre_process_text(book.content)\n    )\n    book_analysis = await baml.AnalyzeBook(book)\n    return book_analysis\n\n\n@trace\nasync def test_book1():\n    content = \"\"\"Before I could reply that he [Gatsby] was my neighbor...\n    \"\"\"\n    processed_content = pre_process_text(content)\n    return await full_analysis(\n        Book(\n            title=\"The Great Gatsby\",\n            author=AuthorInfo(firstName=\"F. Scott\", lastName=\"Fitzgerald\"),\n            content=processed_content,\n        ),\n    )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { baml } from 'baml_client';\nimport { Book, AuthorInfo } from 'baml_client/types';\nimport { traceSync, traceAsync } from 'baml_client/tracing';\n\nconst preProcessText = traceSync(function(text: string): Promise<string> {\n    return text.replace(/\\n/g, \" \");\n});\n\nconst fullAnalysis = traceAsync(async function(book: Book): Promise<any> {\n    const sentiment = await baml.ClassifySentiment(\n        preProcessText(book.content)\n    );\n    const bookAnalysis = await baml.AnalyzeBook(book);\n    return bookAnalysis;\n});\n\nconst testBook1 = traceAsync(async function(): Promise<any> {\n    const content = `Before I could reply that he [Gatsby] was my neighbor...`;\n    const processedContent = preProcessText(content);\n    return await fullAnalysis(\n        new Book(\n            \"The Great Gatsby\",\n            new AuthorInfo(\"F. Scott\", \"Fitzgerald\"),\n            processedContent\n        )\n    );\n});"
      },
      {
        "lang": "text",
        "meta": "Ruby",
        "code": "Tracing non-baml functions is not yet supported in Ruby."
      },
      {
        "lang": "text",
        "meta": "REST (OpenAPI)",
        "code": "Tracing non-baml functions is not yet supported in REST (OpenAPI)."
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Boundary Studio"
      },
      "h2": {
        "id": "tracing-custom-events",
        "title": "Tracing Custom Events"
      },
      "h3": {
        "id": "example",
        "title": "Example"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.boundary-cloud.observability.tracking-usage-adding-custom-tags-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/boundary-cloud/observability/tracking-usage",
    "pathname": "/guide/boundary-cloud/observability/tracking-usage",
    "icon": "fa-regular fa-bar-chart",
    "title": "Adding custom tags",
    "breadcrumb": [
      {
        "title": "Boundary Cloud",
        "pathname": "/guide/boundary-cloud"
      },
      {
        "title": "Observability",
        "pathname": "/guide/boundary-cloud/observability"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#adding-custom-tags",
    "content": "The dashboard view allows you to see custom tags for each of the function calls. This is useful for adding metadata to your traces and allow you to query your generated logs more easily.\nTo add a custom tag, you can import set_tags(..) as below:",
    "code_snippets": [
      {
        "lang": "python",
        "code": "from baml_client.tracing import set_tags, trace\nimport typing\n\n@trace\nasync def pre_process_text(text):\n    set_tags(userId=\"1234\")\n\n    # You can also create a dictionary and pass it in\n    tags_dict: typing.Dict[str, str] = {\"userId\": \"1234\"}\n    set_tags(**tags_dict) # \"**\" unpacks the dictionary\n    return text.replace(\"\\n\", \" \")"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Boundary Studio"
      },
      "h2": {
        "id": "tracing-custom-events",
        "title": "Tracing Custom Events"
      },
      "h3": {
        "id": "adding-custom-tags",
        "title": "Adding custom tags"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-marvin-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-marvin",
    "pathname": "/guide/comparisons/baml-vs-marvin",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Comparing Marvin",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "import pydantic\n\nclass Location(pydantic.BaseModel):\n    city: str\n    state: str\n\nmarvin.extract(\"I moved from NY to CHI\", target=Location)"
      },
      {
        "lang": "python",
        "code": "marvin.extract(\n    \"I paid $10 for 3 tacos and got a dollar and 25 cents back.\",\n    target=float,\n    instructions=\"Only extract money\"\n)\n\n#  [10.0, 1.25]"
      },
      {
        "lang": "python",
        "code": "from enum import Enum\nimport marvin\n\nclass RequestType(Enum):\n    SUPPORT = \"support request\"\n    ACCOUNT = \"account issue\"\n    INQUIRY = \"general inquiry\"\n\nrequest = marvin.classify(\"Reset my password\", RequestType)\nassert request == RequestType.ACCOUNT"
      },
      {
        "lang": "python",
        "code": "# Classifying a task based on project specifications\nproject_specs = {\n    \"Frontend\": \"Tasks involving UI design, CSS, and JavaScript.\",\n    \"Backend\": \"Tasks related to server, database, and application logic.\",\n    \"DevOps\": \"Tasks involving deployment, CI/CD, and server maintenance.\"\n}\n\ntask_description = \"Set up the server for the new application.\"\n\ntask_category = marvin.classify(\n    task_description,\n    labels=list(project_specs.keys()),\n    instructions=\"Match the task to the project category based on the provided specifications.\"\n)\nassert task_category == \"Backend\""
      }
    ],
    "content": "Marvin lets developers do extraction or classification tasks in Python as shown below (TypeScript is not supported):\nYou can also provide instructions:\nor using enums to classify\nFor enum classification, you can add more instructions to each enum, but then you don't get fully typed outputs, nor can reuse the enum in your own code. You're back to working with raw strings.\nMarvin has some inherent limitations for example:\nHow to use a different model?\n\nWhat is the full prompt? Where does it live? What if I want to change it because it doesn't work well for my use-case? How many tokens is it?\n\nHow do I test this function?\n\nHow do I visualize results over time in production?"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-marvin-using-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-marvin",
    "pathname": "/guide/comparisons/baml-vs-marvin",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Using BAML",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#using-baml",
    "content": "Here is the BAML equivalent of this classification task based off the prompt Marvin uses under-the-hood. Note how the prompt becomes transparent to you using BAML. You can easily make it more complex or simpler depending on the model.\nAnd you can call this function in your code\nThe prompt string may be more wordy, but with BAML you now have\nFully typed responses, guaranteed\n\nFull transparency and flexibility of the prompt string\n\nFull freedom for what model to use\n\nHelper functions to manipulate types in prompts (print_enum)\n\nTesting capabilities using the VSCode playground\n\nAnalytics in the Boundary Dashboard\n\nSupport for TypeScript\n\nA better understanding of how prompt engineering works\n\n\nMarvin was a big source of inspiration for us -- their approach is simple and elegant. We recommend checking out Marvin if you're just starting out with prompt engineering or want to do a one-off simple task in Python. But if you'd like a whole added set of features, we'd love for you to give BAML a try and let us know what you think.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "enum RequestType {\n  SUPPORT @alias(\"support request\")\n  ACCOUNT @alias(\"account issue\") @description(\"A detailed description\")\n  INQUIRY @alias(\"general inquiry\")\n}\n\nfunction ClassifyRequest(input: string) -> RequestType {\n  client GPT4 // choose even open source models\n  prompt #\"\n    You are an expert classifier that always maintains as much semantic meaning\n    as possible when labeling text. Classify the provided data,\n    text, or information as one of the provided labels:\n\n    TEXT:\n    ---\n    {{ input }}\n    ---\n\n    {{ ctx.output_format }}\n\n    The best label for the text is:\n  \"#\n}"
      },
      {
        "lang": "python",
        "code": "from baml_client import baml as b\n\n...\nrequestType = await b.ClassifyRequest(\"Reset my password\")\n# fully typed output\nassert requestType == RequestType.ACCOUNT"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Comparing Marvin"
      },
      "h3": {
        "id": "using-baml",
        "title": "Using BAML"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-marvin-limitations-of-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-marvin",
    "pathname": "/guide/comparisons/baml-vs-marvin",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Limitations of BAML",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#limitations-of-baml",
    "content": "BAML does have some limitations we are continuously working on. Here are a few of them:\nIt is a new language. However, it is fully open source and getting started takes less than 10 minutes. We are on-call 24/7 to help with any issues (and even provide prompt engineering tips)\n\nDeveloping requires VSCode. You could use vim and we have workarounds but we don't recommend it.",
    "hierarchy": {
      "h0": {
        "title": "Comparing Marvin"
      },
      "h3": {
        "id": "limitations-of-baml",
        "title": "Limitations of BAML"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Comparing Pydantic",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Pydantic is a popular library for data validation in Python used by most -- if not all -- LLM frameworks, like instructor.\nBAML also uses Pydantic. The BAML Rust compiler can generate Pydantic models from your .baml files. But that's not all the compiler does -- it also takes care of fixing common LLM parsing issues, supports more data types, handles retries, and reduces the amount of boilerplate code you have to write.\nLet's dive into how Pydantic is used and its limitations."
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-why-working-with-llms-requires-more-than-just-pydantic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Why working with LLMs requires more than just Pydantic",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#why-working-with-llms-requires-more-than-just-pydantic",
    "content": "Pydantic can help you get structured output from an LLM easily at first glance:\nThat's pretty good, but now we want to add an Education model to the Resume model. We add the following code:\nA little ugly, but still readable... But managing all these prompt strings can make your codebase disorganized very quickly.\nThen you realize the LLM sometimes outputs some text before giving you the json, like this:\nSo you add a regex to address that that extracts everything in {}:\nNext you realize you actually want an array of Resumes, but you can't really use List[Resume] because Pydantic and Python don't work this way, so you have to add another wrapper:\nNow you need to change the rest of your code to handle different models. That's good longterm, but it is now more boilerplate you have to write, test and maintain.\nNext, you notice the LLM sometimes outputs a single resume {...}, and sometimes an array [{...}]...\nYou must now change your parser to handle both cases:\nYou could retry the call against the LLM to fix the issue, but that will cost you precious seconds and tokens, so handling this corner case manually is the only solution.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "class Resume(BaseModel):\n    name: str\n    skills: List[str]\n\ndef create_prompt(input_text: str) -> str:\n    PROMPT_TEMPLATE = f\"\"\"Parse the following resume and return a structured representation of the data in the schema below.\nResume:\n---\n{input_text}\n---\n\nSchema:\n{Resume.model_json_schema()['properties']}\n\nOutput JSON:\n\"\"\"\n    return PROMPT_TEMPLATE\n\ndef extract_resume(input_text: str) -> Union[Resume, None]:\n    prompt = create_prompt(input_text)\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        if output:\n            return Resume.model_validate_json(output)\n        return None\n    except Exception as e:\n        raise e"
      },
      {
        "lang": "diff",
        "code": "...\n+class Education(BaseModel):\n+    school: str\n+    degree: str\n+    year: int\n\nclass Resume(BaseModel):\n    name: str\n    skills: List[str]\n+   education: List[Education]\n\ndef create_prompt(input_text: str) -> str:\n    additional_models = \"\"\n+    if \"$defs\" in Resume.model_json_schema():\n+        additional_models += f\"\\nUse these other schema definitions as +well:\\n{Resume.model_json_schema()['$defs']}\"\n    PROMPT_TEMPLATE = f\"\"\"Parse the following resume and return a structured representation of the data in the schema below.\nResume:\n---\n{input_text}\n---\n\nSchema:\n{Resume.model_json_schema()['properties']}\n\n+ {additional_models}\n\nOutput JSON:\n\"\"\".strip()\n    return PROMPT_TEMPLATE\n..."
      },
      {
        "lang": "diff",
        "code": "+ The output is:\n{\n  \"name\": \"John Doe\",\n  ... // truncated for brevity\n}"
      },
      {
        "lang": "diff",
        "code": "def extract_resume(input_text: str) -> Union[Resume, None]:\n    prompt = create_prompt(input_text)\n    print(prompt)\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        print(output)\n        if output:\n+            # Extract JSON block using regex\n+            json_match = re.search(r\"\\{.*?\\}\", output, re.DOTALL)\n+            if json_match:\n+                json_output = json_match.group(0)\n                return Resume.model_validate_json(output)\n        return None\n    except Exception as e:\n        raise e"
      },
      {
        "lang": "diff",
        "code": "+class ResumeArray(BaseModel):\n+    resumes: List[Resume]"
      },
      {
        "lang": "diff",
        "code": "+def extract_resume(input_text: str) -> Union[List[Resume], None]:\n+    prompt = create_prompt(input_text) # Also requires changes\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        if output:\n            # Extract JSON block using regex\n            json_match = re.search(r\"\\{.*?\\}\", output, re.DOTALL)\n            if json_match:\n                json_output = json_match.group(0)\n                try:\n+                  parsed = json.loads(json_output)\n+                  if isinstance(parsed, list):\n+                      return list(map(Resume.model_validate_json, parsed))\n+                  else:\n+                      return [ResumeArray(**parsed)]\n        return None\n    except Exception as e:\n        raise e"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Comparing Pydantic"
      },
      "h3": {
        "id": "why-working-with-llms-requires-more-than-just-pydantic",
        "title": "Why working with LLMs requires more than just Pydantic"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-a-small-tangent----json-schemas-vs-type-definitions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "A small tangent -- JSON schemas vs type definitions",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#a-small-tangent----json-schemas-vs-type-definitions",
    "content": "Sidenote: At this point your prompt looks like this:\nand sometimes even GPT-4 outputs incorrect stuff like this, even though it's technically correct JSON (OpenAI's \"JSON mode\" will still break you)\n(this is an actual result from GPT-4 before some more prompt engineering)\nwhen all you really want is a prompt that looks like the one below -- with way less tokens (and less likelihood of confusion). :\nAhh, much better. That's 80% less tokens with a simpler prompt, for the same results. (See also Microsoft's TypeChat which uses a similar schema format using typescript types)\n\n\nBut we digress, let's get back to the point. You can see how this can get out of hand quickly, and how Pydantic wasn't really made with LLMs in mind.  We haven't gotten around to adding resilience like retries, or falling back to a different model in the event of an outage. There's still a lot of wrapper code to write.",
    "code_snippets": [
      {
        "code": "JSON Schema:\n{'name': {'title': 'Name', 'type': 'string'}, 'skills': {'items': {'type': 'string'}, 'title': 'Skills', 'type': 'array'}, 'education': {'anyOf': [{'$ref': '#/$defs/Education'}, {'type': 'null'}]}}\n\n\nUse these other JSON schema definitions as well:\n{'Education': {'properties': {'degree': {'title': 'Degree', 'type': 'string'}, 'major': {'title': 'Major', 'type': 'string'}, 'school': {'title': 'School', 'type': 'string'}, 'year': {'title': 'Year', 'type': 'integer'}}, 'required': ['degree', 'major', 'school', 'year'], 'title': 'Education', 'type': 'object'}}"
      },
      {
        "code": "{\n  \"name\": \n  {\n    \"title\": \"Name\", \n    \"type\": \"string\", \n    \"value\": \"John Doe\"\n  }, \n  \"skills\": \n  {\n    \"items\": \n    {\n      \"type\": \"string\", \n      \"values\": \n      [\n        \"Python\", \n        \"JavaScript\", \n        \"React\"\n      ]\n    ... // truncated for brevity"
      },
      {
        "lang": "diff",
        "code": "Parse the following resume and return a structured representation of the data in the schema below.\nResume:\n---\nJohn Doe\nPython, Rust\nUniversity of California, Berkeley, B.S. in Computer Science, 2020\n---\n\n+JSON Schema:\n+{\n+  \"name\": string,\n+  \"skills\": string[]\n+  \"education\": {\n+    \"school\": string,\n+    \"degree\": string,\n+    \"year\": integer\n+  }[]\n+}\n\nOutput JSON:"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Comparing Pydantic"
      },
      "h2": {
        "id": "a-small-tangent----json-schemas-vs-type-definitions",
        "title": "A small tangent -- JSON schemas vs type definitions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-pydantic-and-enums-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Pydantic and Enums",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#pydantic-and-enums",
    "content": "There are other core limitations.\nSay you want to do a classification task using Pydantic. An Enum is a great fit for modelling this.\nAssume this is our prompt:\nSince we have descriptions, we need to generate a custom enum we can use to build the prompt:\nWe add a class method to load the right enum from the LLM output string:\nUpdate the prompt to use the enum descriptions:\nAnd then we use it in our AI function:\nWhat gets hairy is if you want to change your types.\nWhat if you want the LLM to return an object instead? You have to change your enum, your prompt, AND your parser.\n\nWhat if you want to handle cases where the LLM outputs \"Real Estate\" or \"real estate\"?\n\nWhat if you want to save the enum information in a database? str(category) will save FinancialCategory.healthcare into your DB, but your parser only recognizes \"Healthcare\", so you'll need more boilerplate if you ever want to programmatically analyze your data.",
    "code_snippets": [
      {
        "lang": "text",
        "code": "Classify the company described in this text into the best\nof the following categories:\n\nText:\n---\n{some_text}\n---\n\nCategories:\n- Technology: Companies involved in the development and production of technology products or services\n- Healthcare: Includes companies in pharmaceuticals, biotechnology, medical devices.\n- Real estate: Includes real estate investment trusts (REITs) and companies involved in real estate development.\n\nThe best category is:"
      },
      {
        "lang": "python",
        "code": "class FinancialCategory(Enum):\n    technology = (\n        \"Technology\",\n        \"Companies involved in the development and production of technology products or services.\",\n    )\n    ...\n    real_estate = (\n        \"Real Estate\",\n        \"Includes real estate investment trusts (REITs) and companies involved in real estate development.\",\n    )\n\n    def __init__(self, category, description):\n        self._category = category\n        self._description = description\n\n    @property\n    def category(self):\n        return self._category\n\n    @property\n    def description(self):\n        return self._description\n"
      },
      {
        "lang": "python",
        "code": "    @classmethod\n    def from_string(cls, category: str) -> \"FinancialCategory\":\n        for c in cls:\n            if c.category == category:\n                return c\n        raise ValueError(f\"Invalid category: {category}\")"
      },
      {
        "lang": "python",
        "code": "def print_categories_and_descriptions():\n    for category in FinancialCategory:\n        print(f\"{category.category}: {category.description}\")\n\ndef create_prompt(text: str) -> str:\n    additional_models = \"\"\n    print_categories_and_descriptions()\n    PROMPT_TEMPLATE = f\"\"\"Classify the company described in this text into the best\nof the following categories:\n\nText:\n---\n{text}\n---\n\nCategories:\n{print_categories_and_descriptions()}\n\nThe best category is:\n\"\"\"\n    return PROMPT_TEMPLATE"
      },
      {
        "lang": "python",
        "code": "def classify_company(text: str) -> FinancialCategory:\n    prompt = create_prompt(text)\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        if output:\n            # Use our helper function!\n            return FinancialCategory.from_string(output)\n        return None\n    except Exception as e:\n        raise e"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Comparing Pydantic"
      },
      "h2": {
        "id": "a-small-tangent----json-schemas-vs-type-definitions",
        "title": "A small tangent -- JSON schemas vs type definitions"
      },
      "h3": {
        "id": "pydantic-and-enums",
        "title": "Pydantic and Enums"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-alternatives-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Alternatives",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#alternatives",
    "content": "There are libraries like instructor do provide a great amount of boilerplate but you're still:\nUsing prompts that you cannot control. E.g. a commit may change your results underneath you.\n\nUsing more tokens than you may need to to declare schemas (higher costs and latencies)\n\nThere are no included testing capabilities.. Developers have to copy-paste JSON blobs everywhere, potentially between their IDEs and other websites. Existing LLM Playgrounds were not made with structured data in mind.\n\nLack of observability. No automatic tracing of requests.",
    "hierarchy": {
      "h0": {
        "title": "Comparing Pydantic"
      },
      "h2": {
        "id": "a-small-tangent----json-schemas-vs-type-definitions",
        "title": "A small tangent -- JSON schemas vs type definitions"
      },
      "h3": {
        "id": "alternatives",
        "title": "Alternatives"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-enter-baml-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Enter BAML",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#enter-baml",
    "content": "The Boundary toolkit helps you iterate seamlessly compared to Pydantic.\nHere's all the BAML code you need to solve the Extract Resume problem from earlier (VSCode prompt preview is shown on the right):\n\n\n\n\nHere we use a \"GPT4\" client, but you can use any model. See client docs\n\n\nThe BAML compiler generates a python client that imports and calls the function:\nThat's it! No need to write any more code. Since the compiler knows what your function signature is we literally generate a custom deserializer for your own unique usecase that just works.\nConverting the Resume into an array of resumes requires a single line change in BAML (vs having to create array wrapper classes and parsing logic).\nIn this image we change the types and BAML automatically updates the prompt, parser, and the Python types you get back.\n\n\nAdding retries or resilience requires just a couple of modifications. And best of all, you can test things instantly, without leaving your VSCode.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "from baml_client import baml as b\n\nasync def main():\n  resume = await b.ExtractResume(resume_text=\"\"\"John Doe\nPython, Rust\nUniversity of California, Berkeley, B.S. in Computer Science, 2020\"\"\")\n\n  assert resume.name == \"John Doe\""
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Comparing Pydantic"
      },
      "h2": {
        "id": "enter-baml",
        "title": "Enter BAML"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.comparisons.baml-vs-pydantic-conclusion-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/comparisons/baml-vs-pydantic",
    "pathname": "/guide/comparisons/baml-vs-pydantic",
    "icon": "fa-solid fa-magnifying-glass",
    "title": "Conclusion",
    "breadcrumb": [
      {
        "title": "Comparisons",
        "pathname": "/guide/comparisons"
      }
    ],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#conclusion",
    "content": "We built BAML because writing a Python library was just not powerful enough to do everything we envisioned, as we have just explored.\nCheck out the Hello World tutorial to get started.\nOur mission is to make the best DX for AI engineers working with LLMs. Contact us at founders@boundaryml.com or Join us on Discord to stay in touch with the community and influence the roadmap.",
    "hierarchy": {
      "h0": {
        "title": "Comparing Pydantic"
      },
      "h2": {
        "id": "enter-baml",
        "title": "Enter BAML"
      },
      "h3": {
        "id": "conclusion",
        "title": "Conclusion"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guide.guide.contact-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/contact",
    "pathname": "/guide/contact",
    "icon": "fa-regular fa-envelope",
    "title": "Contact",
    "breadcrumb": [],
    "tab": {
      "title": "Guide",
      "pathname": "/guide"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "We have seen many different prompts for many use-cases. We'd love to hear about your prompt and how you use BAML.\nContact Us at contact@boundaryml.com\nor join our Discord"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.interactive-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/interactive-examples",
    "pathname": "/examples/interactive-examples",
    "icon": "fa-solid fa-play",
    "title": "Interactive Examples",
    "breadcrumb": [],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Check out the live examples that use NextJS, and the source code on Github."
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.reducing-hallucinations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/reducing-hallucinations",
    "pathname": "/examples/prompt-engineering/reducing-hallucinations",
    "icon": "fa-regular fa-person-fairy",
    "title": "Reduce Hallucinations",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "We recommend these simple ways to reduce hallucinations:"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.reducing-hallucinations-1-set-temperature-to-00-especially-if-extracting-data-verbatim-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/reducing-hallucinations",
    "pathname": "/examples/prompt-engineering/reducing-hallucinations",
    "icon": "fa-regular fa-person-fairy",
    "title": "Set temperature to 0.0 (especially if extracting data verbatim)",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#1-set-temperature-to-00-especially-if-extracting-data-verbatim",
    "content": "This will make the model less creative and more likely to just extract the data that you want verbatim.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "clients.baml",
        "code": "client<llm> MyClient {\n  provider openai\n  options {\n    temperature 0.0\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Reduce Hallucinations"
      },
      "h3": {
        "id": "1-set-temperature-to-00-especially-if-extracting-data-verbatim",
        "title": "1. Set temperature to 0.0 (especially if extracting data verbatim)"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.reducing-hallucinations-2-reduce-the-number-of-input-tokens-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/reducing-hallucinations",
    "pathname": "/examples/prompt-engineering/reducing-hallucinations",
    "icon": "fa-regular fa-person-fairy",
    "title": "Reduce the number of input tokens",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#2-reduce-the-number-of-input-tokens",
    "content": "Reduce the amount of data you're giving the model to process to reduce confusion.\nPrune as much data as possible, or split your prompt into multiple prompts analyzing subsets of the data.\nIf you're processing images, try cropping the parts of the image that you don't need. LLMs can only handle images of certain sizes, so every pixel counts. Make sure you resize images to the model's input size (even if the provider does the resizing for you), so you can gauge how clear the image is at the model's resolution. You'll notice the blurrier the image is, the higher the hallucination rate.\nLet us know if you want more tips for processing images, we have some helper prompts we can share with you, or help debug your prompt.",
    "hierarchy": {
      "h0": {
        "title": "Reduce Hallucinations"
      },
      "h3": {
        "id": "2-reduce-the-number-of-input-tokens",
        "title": "2. Reduce the number of input tokens"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.reducing-hallucinations-2-use-reasoning-or-reflection-prompting-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/reducing-hallucinations",
    "pathname": "/examples/prompt-engineering/reducing-hallucinations",
    "icon": "fa-regular fa-person-fairy",
    "title": "Use reasoning or reflection prompting",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#2-use-reasoning-or-reflection-prompting",
    "content": "Read our chain-of-thought guide for more.",
    "hierarchy": {
      "h0": {
        "title": "Reduce Hallucinations"
      },
      "h3": {
        "id": "2-use-reasoning-or-reflection-prompting",
        "title": "2. Use reasoning or reflection prompting"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.reducing-hallucinations-3-watch-out-for-contradictions-and-word-associations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/reducing-hallucinations",
    "pathname": "/examples/prompt-engineering/reducing-hallucinations",
    "icon": "fa-regular fa-person-fairy",
    "title": "Watch out for contradictions and word associations",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#3-watch-out-for-contradictions-and-word-associations",
    "content": "Each word you add into the prompt will cause it to associate it with something it saw before in its training data. This is why we have techniques like symbol tuning to help control this bias.\nLet's say you have a prompt that says:\nThe LLM may not write the // comment inline, because it's been trained to associate JSON with actual \"valid\" JSON.\nYou can get around this with some more coaxing like:\nThe LLM made an assumption that you want \"JSON\" -- which doesn't use comments -- and our instructions were not explicit enough to override that bias originally.\nKeep on reading for more tips and tricks! Or reach out in our Discord",
    "code_snippets": [
      {
        "code": "Answer in this JSON schema:\n\n\n\nBut when you answer, add some comments in the JSON indicating your reasoning for the field like this:\n\nExample:\n---\n{\n  // I used the name \"John\" because it's the name of the person who wrote the prompt\n  \"name\": \"John\"\n}\n\nJSON:"
      },
      {
        "lang": "text",
        "meta": "{12,13}",
        "code": "Answer in this JSON schema:\n\n\n\nBut when you answer, add some comments in the JSON indicating your reasoning for the field like this:\n---\n{\n  // I used the name \"John\" because it's the name of the person who wrote the prompt\n  \"name\": \"John\"\n}\n\nIt's ok if this isn't fully valid JSON, \nwe will fix it afterwards and remove the comments.\n\nJSON:"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Reduce Hallucinations"
      },
      "h3": {
        "id": "3-watch-out-for-contradictions-and-word-associations",
        "title": "3. Watch out for contradictions and word associations"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.chat-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/chat",
    "pathname": "/examples/prompt-engineering/chat",
    "icon": "fa-regular fa-comments",
    "title": "Chat",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "chat-history.baml",
        "code": "class MyUserMessage {\n  role \"user\" | \"assistant\"\n  content string\n}\n\nfunction ChatWithLLM(messages: MyUserMessage[]) -> string {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Answer the user's questions based on the chat history:\n    {% for message in messages %}\n      {{ _.role(message.role) }} \n      {{ message.content }}\n    {% endfor %}\n\n    Answer:\n  \"#\n}\n\ntest TestName {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"Hello!\"\n      }\n      {\n        role \"assistant\"\n        content \"Hi!\"\n      }\n    ]\n  }\n}\n"
      }
    ],
    "content": "In this guide we'll build a small chatbot that takes in user messages and generates responses."
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.tools-function-calling-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/tools-function-calling",
    "pathname": "/examples/prompt-engineering/tools-function-calling",
    "icon": "fa-regular fa-wrench",
    "title": "Tools / Function Calling",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class WeatherAPI {\n  city string @description(\"the user's city\")\n  timeOfDay string @description(\"As an ISO8601 timestamp\")\n}\n\nfunction UseTool(user_message: string) -> WeatherAPI {\n  client GPT4Turbo\n  prompt #\"\n    Extract the info from this message\n    ---\n    {{ user_message }}\n    ---\n\n    {# special macro to print the output schema. #}\n    {{ ctx.output_format }}\n\n    JSON:\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI\n\ndef main():\n    weather_info = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(weather_info)\n    assert isinstance(weather_info, WeatherAPI)\n    print(f\"City: {weather_info.city}\")\n    print(f\"Time of Day: {weather_info.timeOfDay}\")\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const weatherInfo = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(weatherInfo)\n  assert(weatherInfo instanceof WeatherAPI)\n  console.log(`City: ${weatherInfo.city}`)\n  console.log(`Time of Day: ${weatherInfo.timeOfDay}`)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  weather_info = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts weather_info\n  raise unless weather_info.is_a?(Baml::Types::WeatherAPI)\n  puts \"City: #{weather_info.city}\"\n  puts \"Time of Day: #{weather_info.timeOfDay}\"\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI\n\ndef main():\n    weather_info = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(weather_info)\n    assert isinstance(weather_info, WeatherAPI)\n    print(f\"City: {weather_info.city}\")\n    print(f\"Time of Day: {weather_info.timeOfDay}\")\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const weatherInfo = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(weatherInfo)\n  assert(weatherInfo instanceof WeatherAPI)\n  console.log(`City: ${weatherInfo.city}`)\n  console.log(`Time of Day: ${weatherInfo.timeOfDay}`)\n}"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  weather_info = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts weather_info\n  raise unless weather_info.is_a?(Baml::Types::WeatherAPI)\n  puts \"City: #{weather_info.city}\"\n  puts \"Time of Day: #{weather_info.timeOfDay}\"\nend"
      }
    ],
    "content": "\"Function calling\" is a technique for getting an LLM to choose a function to call for you.\nThe way it works is:\nYou define a task with certain function(s)\n\nAsk the LLM to choose which function to call\n\nGet the function parameters from the LLM for the appropriate function it choose\n\nCall the functions in your code with those parameters\n\n\nIn BAML, you can get represent a tool or a function you want to call as a BAML class, and make the function output be that class definition.\nCall the function like this:"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.tools-function-calling-choosing-multiple-tools-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/tools-function-calling",
    "pathname": "/examples/prompt-engineering/tools-function-calling",
    "icon": "fa-regular fa-wrench",
    "title": "Choosing multiple Tools",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#choosing-multiple-tools",
    "content": "To choose ONE tool out of many, you can use a union:\n\n\nIf you use VSCode Playground, you can see what we inject into the prompt, with full transparency.Call the function like this:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "function UseTool(user_message: string) -> WeatherAPI | MyOtherAPI {\n  .... // same thing\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, MyOtherAPI\n\nasync def main():\n    tool = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(tool)\n    \n    if isinstance(tool, WeatherAPI):\n        print(f\"Weather API called:\")\n        print(f\"City: {tool.city}\")\n        print(f\"Time of Day: {tool.timeOfDay}\")\n    elif isinstance(tool, MyOtherAPI):\n        print(f\"MyOtherAPI called:\")\n        # Handle MyOtherAPI specific attributes here\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI, MyOtherAPI } from './baml_client/types'\n\nconst main = async () => {\n  const tool = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(tool)\n  \n  if (tool instanceof WeatherAPI) {\n    console.log(\"Weather API called:\")\n    console.log(`City: ${tool.city}`)\n    console.log(`Time of Day: ${tool.timeOfDay}`)\n  } else if (tool instanceof MyOtherAPI) {\n    console.log(\"MyOtherAPI called:\")\n    // Handle MyOtherAPI specific attributes here\n  }\n}\n\nmain()"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  tool = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts tool\n  \n  case tool\n  when Baml::Types::WeatherAPI\n    puts \"Weather API called:\"\n    puts \"City: #{tool.city}\"\n    puts \"Time of Day: #{tool.timeOfDay}\"\n  when Baml::Types::MyOtherAPI\n    puts \"MyOtherAPI called:\"\n    # Handle MyOtherAPI specific attributes here\n  end\nend\n\nmain"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, MyOtherAPI\n\nasync def main():\n    tool = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(tool)\n    \n    if isinstance(tool, WeatherAPI):\n        print(f\"Weather API called:\")\n        print(f\"City: {tool.city}\")\n        print(f\"Time of Day: {tool.timeOfDay}\")\n    elif isinstance(tool, MyOtherAPI):\n        print(f\"MyOtherAPI called:\")\n        # Handle MyOtherAPI specific attributes here\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI, MyOtherAPI } from './baml_client/types'\n\nconst main = async () => {\n  const tool = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(tool)\n  \n  if (tool instanceof WeatherAPI) {\n    console.log(\"Weather API called:\")\n    console.log(`City: ${tool.city}`)\n    console.log(`Time of Day: ${tool.timeOfDay}`)\n  } else if (tool instanceof MyOtherAPI) {\n    console.log(\"MyOtherAPI called:\")\n    // Handle MyOtherAPI specific attributes here\n  }\n}\n\nmain()"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  tool = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts tool\n  \n  case tool\n  when Baml::Types::WeatherAPI\n    puts \"Weather API called:\"\n    puts \"City: #{tool.city}\"\n    puts \"Time of Day: #{tool.timeOfDay}\"\n  when Baml::Types::MyOtherAPI\n    puts \"MyOtherAPI called:\"\n    # Handle MyOtherAPI specific attributes here\n  end\nend\n\nmain"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Tools / Function Calling"
      },
      "h2": {
        "id": "choosing-multiple-tools",
        "title": "Choosing multiple Tools"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.tools-function-calling-choosing-n-tools-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/tools-function-calling",
    "pathname": "/examples/prompt-engineering/tools-function-calling",
    "icon": "fa-regular fa-wrench",
    "title": "Choosing N Tools",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#choosing-n-tools",
    "content": "To choose many tools, you can use a union of a list:\nCall the function like this:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "function UseTool(user_message: string) -> (WeatherAPI | MyOtherAPI)[] {\n  .... // same thing\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, MyOtherAPI\n\nasync def main():\n    tools = b.UseTool(\"What's the weather like in San Francisco and New York?\")\n    print(tools)  \n    \n    for tool in tools:\n        if isinstance(tool, WeatherAPI):\n            print(f\"Weather API called:\")\n            print(f\"City: {tool.city}\")\n            print(f\"Time of Day: {tool.timeOfDay}\")\n        elif isinstance(tool, MyOtherAPI):\n            print(f\"MyOtherAPI called:\")\n            # Handle MyOtherAPI specific attributes here\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI, MyOtherAPI } from './baml_client/types'\n\nconst main = async () => {\n  const tools = await b.UseTool(\"What's the weather like in San Francisco and New York?\")\n  console.log(tools)\n  \n  tools.forEach(tool => {\n    if (tool instanceof WeatherAPI) {\n      console.log(\"Weather API called:\")\n      console.log(`City: ${tool.city}`)\n      console.log(`Time of Day: ${tool.timeOfDay}`)\n    } else if (tool instanceof MyOtherAPI) {\n      console.log(\"MyOtherAPI called:\")\n      // Handle MyOtherAPI specific attributes here\n    }\n  })\n}\n\nmain()"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  tools = $b.UseTool(user_message: \"What's the weather like in San Francisco and New York?\")\n  puts tools\n  \n  tools.each do |tool|\n    case tool\n    when Baml::Types::WeatherAPI\n      puts \"Weather API called:\"\n      puts \"City: #{tool.city}\"\n      puts \"Time of Day: #{tool.timeOfDay}\"\n    when Baml::Types::MyOtherAPI\n      puts \"MyOtherAPI called:\"\n      # Handle MyOtherAPI specific attributes here\n    end\n  end\nend\n\nmain"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "import asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, MyOtherAPI\n\nasync def main():\n    tools = b.UseTool(\"What's the weather like in San Francisco and New York?\")\n    print(tools)  \n    \n    for tool in tools:\n        if isinstance(tool, WeatherAPI):\n            print(f\"Weather API called:\")\n            print(f\"City: {tool.city}\")\n            print(f\"Time of Day: {tool.timeOfDay}\")\n        elif isinstance(tool, MyOtherAPI):\n            print(f\"MyOtherAPI called:\")\n            # Handle MyOtherAPI specific attributes here\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from './baml_client'\nimport { WeatherAPI, MyOtherAPI } from './baml_client/types'\n\nconst main = async () => {\n  const tools = await b.UseTool(\"What's the weather like in San Francisco and New York?\")\n  console.log(tools)\n  \n  tools.forEach(tool => {\n    if (tool instanceof WeatherAPI) {\n      console.log(\"Weather API called:\")\n      console.log(`City: ${tool.city}`)\n      console.log(`Time of Day: ${tool.timeOfDay}`)\n    } else if (tool instanceof MyOtherAPI) {\n      console.log(\"MyOtherAPI called:\")\n      // Handle MyOtherAPI specific attributes here\n    }\n  })\n}\n\nmain()"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  tools = $b.UseTool(user_message: \"What's the weather like in San Francisco and New York?\")\n  puts tools\n  \n  tools.each do |tool|\n    case tool\n    when Baml::Types::WeatherAPI\n      puts \"Weather API called:\"\n      puts \"City: #{tool.city}\"\n      puts \"Time of Day: #{tool.timeOfDay}\"\n    when Baml::Types::MyOtherAPI\n      puts \"MyOtherAPI called:\"\n      # Handle MyOtherAPI specific attributes here\n    end\n  end\nend\n\nmain"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Tools / Function Calling"
      },
      "h2": {
        "id": "choosing-n-tools",
        "title": "Choosing N Tools"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.tools-function-calling-function-calling-apis-vs-prompting-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/tools-function-calling",
    "pathname": "/examples/prompt-engineering/tools-function-calling",
    "icon": "fa-regular fa-wrench",
    "title": "Function-calling APIs vs Prompting",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#function-calling-apis-vs-prompting",
    "content": "Injecting your function schemas into the prompt, as BAML does, outperforms function-calling across all benchmarks for major providers (see our Berkeley FC Benchmark results with BAML).\nAmongst other limitations, function-calling APIs will at times:\nReturn a schema when you don't want any (you want an error)\n\nNot work for tools with more than 100 parameters.\n\nUse many more tokens than prompting.\n\n\nKeep in mind that \"JSON mode\" is nearly the same thing as \"prompting\", but it enforces the LLM response is ONLY a JSON blob.\nBAML does not use JSON mode since it allows developers to use better prompting techniques like chain-of-thought, to allow the LLM to express its reasoning before printing out the actual schema. BAML's parser can find the json schema(s) out of free-form text for you. Read more about different approaches to structured generation here\nBAML will still support native function-calling APIs in the future (please let us know more about your use-case so we can prioritize accordingly)",
    "hierarchy": {
      "h0": {
        "title": "Tools / Function Calling"
      },
      "h2": {
        "id": "function-calling-apis-vs-prompting",
        "title": "Function-calling APIs vs Prompting"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.chain-of-thought-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/chain-of-thought",
    "pathname": "/examples/prompt-engineering/chain-of-thought",
    "icon": "fa-solid fa-brain",
    "title": "Chain of Thought Prompting",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "class Email {\n    subject string\n    body string\n    from_address string\n}\n\n\nclass OrderInfo {\n    order_status \"ORDERED\" | \"SHIPPED\" | \"DELIVERED\" | \"CANCELLED\"\n    tracking_number string?\n    estimated_arrival_date string?\n}\n\nfunction GetOrderInfo(email: Email) -> OrderInfo {\n  client GPT4o\n  prompt #\"\n    Extract the info from this email in the INPUT:\n\n    INPUT:\n    -------\n    from: {{email.from_address}}\n    Email Subject: {{email.subject}}\n    Email Body: {{email.body}}\n    -------\n\n    {{ ctx.output_format }}\n\n    Before you output the JSON, please explain your\n    reasoning step-by-step. Here is an example on how to do this:\n    'If we think step by step we can see that ...\n     therefore the output JSON is:\n    {\n      ... the json schema ...\n    }'\n  \"#\n}\n\ntest Test1 {\n  functions [GetOrderInfo]\n  args {\n    email {\n      from_address \"hello@amazon.com\"\n      subject \"Your Amazon.com order of 'Wood Dowel Rods...' has shipped!\"\n      body #\"\n        Hi Sam, your package will arrive:\n        Thurs, April 4\n        Track your package:\n        www.amazon.com/gp/your-account/ship-track?ie=23&orderId123\n\n        On the way:\n        Wood Dowel Rods...\n        Order #113-7540940\n        Ship to:\n            Sam\n            SEATTLE, WA\n\n        Shipment total:\n        $0.00\n    \"#\n\n    }\n  }\n}"
      }
    ],
    "content": "Chain of thought prompting is a technique that encourages the language model to think step by step, reasoning through the problem before providing an answer. This can improve the quality of the response and make it easier to understand.\nIn the below example, we use chain of thought prompting to extract information from an email.\nBAML will still parse the response as an OrderInfo object, even though there is additional text in the response."
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.symbol-tuning-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/symbol-tuning",
    "pathname": "/examples/prompt-engineering/symbol-tuning",
    "icon": "fa-regular fa-adjust",
    "title": "Creating a Classification Function with Symbol Tuning",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "enum MyClass {\n    Refund @alias(\"k1\")\n    @description(\"Customer wants to refund a product\")\n\n    CancelOrder @alias(\"k2\")\n    @description(\"Customer wants to cancel an order\")\n\n    TechnicalSupport @alias(\"k3\")\n    @description(\"Customer needs help with a technical issue unrelated to account creation or login\")\n\n    AccountIssue @alias(\"k4\")\n    @description(\"Specifically relates to account-login or account-creation\")\n\n    Question @alias(\"k5\")\n    @description(\"Customer has a question\")\n}\n\nfunction ClassifyMessageWithSymbol(input: string) -> MyClass {\n  client GPT4o\n\n  prompt #\"\n    Classify the following INPUT into ONE\n    of the following categories:\n\n    INPUT: {{ input }}\n\n    {{ ctx.output_format }}\n\n    Response:\n  \"#\n}\n\ntest Test1 {\n  functions [ClassifyMessageWithSymbol]\n  args {\n    input \"I can't access my account using my login credentials. I havent received the promised reset password email. Please help.\"\n  }\n}"
      }
    ],
    "content": "Aliasing field names to abstract symbols like \"k1\", \"k2\", etc. can improve classification results. This technique, known as symbol tuning, helps the LLM focus on your descriptions rather than being biased by the enum or property names themselves.\nSee the paper Symbol Tuning Improves In-Context Learning in Language Models for more details."
  },
  {
    "objectID": "test:test.com:root.uv.examples.examples.prompt-engineering.retrieval-augmented-generation",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/examples/prompt-engineering/retrieval-augmented-generation",
    "pathname": "/examples/prompt-engineering/retrieval-augmented-generation",
    "icon": "fa-regular fa-database",
    "title": "Retrieval Augmented Generation",
    "breadcrumb": [
      {
        "title": "Prompt Engineering",
        "pathname": "/examples/prompt-engineering"
      }
    ],
    "tab": {
      "title": "Examples",
      "pathname": "/examples"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.overview-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/overview",
    "pathname": "/ref/overview",
    "title": "BAML Reference",
    "breadcrumb": [],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Welcome to the BAML reference guide!\nHere you can learn about every BAML keyword, feature, and setting.\nFor more in-depth explanations, we recommend reading the Guides first.\n\n\n\n\nLearn everything about BAML's language features.\n\n\nLearn about BAML's Jinja prompt syntax.\n\n\nBAML CLI commands and flags.\n\n\nVSCode BAML Extension settings\n\n\nLLM clients and how to configure them.\n\n\nAPI Reference for the baml_client object."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "init",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The init command is used to initialize a project with BAML. It sets up the necessary directory structure and configuration files to get you started with BAML."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "Options",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#options",
    "content": "Option Description Default \n--dest <PATH> Specifies where to initialize the BAML project Current directory (.) \n--client-type <TYPE> Type of BAML client to generate Guesses based on where the CLI was installed from (python/pydantic for pip, typescript for npm, etc.) \n--openapi-client-type <TYPE> The OpenAPI client generator to run, if --client-type=openapi None",
    "hierarchy": {
      "h0": {
        "title": "init"
      },
      "h2": {
        "id": "options",
        "title": "Options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-description-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "Description",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#description",
    "content": "The init command performs the following actions:\nCreates a new BAML project structure in ${DEST}/baml_src.\n\nCreates a generators.baml file in the baml_src directory with initial configuration.\n\nIncludes some additional examples files in baml_src to get you started.",
    "hierarchy": {
      "h0": {
        "title": "init"
      },
      "h2": {
        "id": "description",
        "title": "Description"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-client-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "Client Types",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#client-types",
    "content": "The --client-type option allows you to specify the type of BAML client to generate. Available options include:\npython/pydantic: For Python clients using Pydantic\n\ntypescript: For TypeScript clients\n\nruby/sorbet: For Ruby clients using Sorbet\n\nrest/openapi: For REST clients using OpenAPI\n\n\nIf not specified, it uses the default from the runtime CLI configuration.",
    "hierarchy": {
      "h0": {
        "title": "init"
      },
      "h2": {
        "id": "client-types",
        "title": "Client Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-openapi-client-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "OpenAPI Client Types",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#openapi-client-types",
    "content": "When using --client-type=rest/openai, you can specify the OpenAPI client generator using the --openapi-client-type option. Some examples include:\ngo\n\njava\n\nphp\n\nruby\n\nrust\n\ncsharp\n\n\nFor a full list of supported OpenAPI client types, refer to the OpenAPI Generator documentation.",
    "hierarchy": {
      "h0": {
        "title": "init"
      },
      "h2": {
        "id": "openapi-client-types",
        "title": "OpenAPI Client Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples",
    "content": "Initialize a BAML project in the current directory with default settings:\n\nInitialize a BAML project in a specific directory:\n\nInitialize a BAML project for Python with Pydantic:\n\nInitialize a BAML project for OpenAPI with a Go client:",
    "code_snippets": [
      {
        "code": "baml init"
      },
      {
        "code": "baml init --dest /path/to/my/project"
      },
      {
        "code": "baml init --client-type python/pydantic"
      },
      {
        "code": "baml init --client-type openapi --openapi-client-type go"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "init"
      },
      "h2": {
        "id": "examples",
        "title": "Examples"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.init-notes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/init",
    "pathname": "/ref/baml-cli/init",
    "title": "Notes",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#notes",
    "content": "If the destination directory already contains a baml_src directory, the command will fail to prevent overwriting existing projects.\n\nThe command attempts to infer the OpenAPI generator command based on what's available in your system PATH. It checks for openapi-generator, openapi-generator-cli, or falls back to using npx @openapitools/openapi-generator-cli.\n\nAfter initialization, follow the instructions provided in the console output for language-specific setup steps.\n\n\nFor more information on getting started with BAML, visit the BAML documentation.",
    "hierarchy": {
      "h0": {
        "title": "init"
      },
      "h2": {
        "id": "notes",
        "title": "Notes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.generate-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/generate",
    "pathname": "/ref/baml-cli/generate",
    "title": "generate",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The generate command is used to generate BAML clients based on your BAML source files. It processes the BAML configurations and creates the necessary client code for your specified output type."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.generate-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/generate",
    "pathname": "/ref/baml-cli/generate",
    "title": "Options",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#options",
    "content": "Option Description Default \n--from <PATH> Path to the baml_src directory ./baml_src \n--no-version-check Generate baml_client without checking for version mismatch false",
    "hierarchy": {
      "h0": {
        "title": "generate"
      },
      "h2": {
        "id": "options",
        "title": "Options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.generate-description-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/generate",
    "pathname": "/ref/baml-cli/generate",
    "title": "Description",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#description",
    "content": "The generate command performs the following actions:\nFinds all generators in the BAML project (usualy in generators.baml).\n\nEnsure all generators match the CLI version.\n\nGenerate each baml_client based on the generator configurations.",
    "hierarchy": {
      "h0": {
        "title": "generate"
      },
      "h2": {
        "id": "description",
        "title": "Description"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.generate-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/generate",
    "pathname": "/ref/baml-cli/generate",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples",
    "content": "Generate clients using default settings:\n\nGenerate clients from a specific directory:\n\nGenerate clients without version check:",
    "code_snippets": [
      {
        "code": "baml-cli generate"
      },
      {
        "code": "baml-cli generate --from /path/to/my/baml_src"
      },
      {
        "code": "baml-cli generate --no-version-check"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "generate"
      },
      "h2": {
        "id": "examples",
        "title": "Examples"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.generate-output-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/generate",
    "pathname": "/ref/baml-cli/generate",
    "title": "Output",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#output",
    "content": "The command provides informative output about the generation process:\nIf no clients were generated, it will suggest a configuration to add to your BAML files.\n\nIf clients were generated, it will report the number of clients generated and their locations.",
    "hierarchy": {
      "h0": {
        "title": "generate"
      },
      "h2": {
        "id": "output",
        "title": "Output"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.generate-notes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/generate",
    "pathname": "/ref/baml-cli/generate",
    "title": "Notes",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#notes",
    "content": "If no generator configurations are found in the BAML files, the command will generate a default client based on the CLI defaults and provide instructions on how to add a generator configuration to your BAML files.\n\nIf generator configurations are found, the command will generate clients according to those configurations.\n\nIf one of the generators fails, the command will stop at that point and report the error.",
    "hierarchy": {
      "h0": {
        "title": "generate"
      },
      "h2": {
        "id": "notes",
        "title": "Notes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "serve",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The serve command starts a BAML-over-HTTP API server that exposes your BAML functions via HTTP endpoints. This feature allows you to interact with your BAML functions through a RESTful API interface.\n\n\nWarning: Preview Feature\nYou must include the --preview flag when running the dev command.\n\nBe aware that this feature is still being stabilized and may change in future releases."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-usage-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Usage",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usage",
    "content": "If you're actively developing, you can use the dev command to include hotreload functionality:\nSee more",
    "code_snippets": [
      {
        "code": "baml-cli serve [OPTIONS] --preview"
      },
      {
        "code": "baml-cli dev [OPTIONS] --preview"
      },
      {
        "code": "baml-cli dev [OPTIONS] --preview"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Options",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#options",
    "content": "Option Description Default \n--from <PATH> Path to the baml_src directory ./baml_src \n--port <PORT> Port to expose BAML on 2024 \n--no-version-check Generate baml_client without checking for version mismatch false \n--preview Enable the preview feature",
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "options",
        "title": "Options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-description-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Description",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#description",
    "content": "The serve command performs the following actions:\nExposes BAML functions as HTTP endpoints on the specified port.\n\nProvides authentication middleware for secure access.",
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "description",
        "title": "Description"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-endpoints-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Endpoints",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#endpoints",
    "content": "POST /call/:function_name: Call a BAML function\n\n\nDebugging\nGET /docs: Interactive API documentation (Swagger UI)\n\nGET /openapi.json: OpenAPI specification for the BAML functions\n\nGET /_debug/ping: Health check endpoint\n\nGET /_debug/status: Server status and authentication check",
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "endpoints",
        "title": "Endpoints"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-authentication-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Authentication",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#authentication",
    "content": "We support the header: x-baml-api-key\nSet the BAML_PASSWORD environment variable to enable authentication.",
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "authentication",
        "title": "Authentication"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples",
    "content": "Start the server with default settings:\n\nStart the server with a custom source directory and port:",
    "code_snippets": [
      {
        "code": "baml-cli serve --preview"
      },
      {
        "code": "baml-cli serve --from /path/to/my/baml_src --port 3000 --preview"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "examples",
        "title": "Examples"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.serve-testing-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/serve",
    "pathname": "/ref/baml-cli/serve",
    "title": "Testing",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#testing",
    "content": "To test the server, you can use the following curl commands:\nCheck if the server is running:\n\nCall a function:\n\nAccess the API documentation:\nOpen http://localhost:2024/docs in your web browser.",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "curl http://localhost:2024/_debug/ping"
      },
      {
        "lang": "bash",
        "code": "curl -X POST http://localhost:2024/call/MyFunctionName -d '{\"arg1\": \"value1\", \"arg2\": \"value2\"}'"
      },
      {
        "lang": "bash",
        "meta": "API Key",
        "code": " curl -X POST http://localhost:2024/call/MyFunctionName -H \"x-baml-api-key: ${BAML_PASSWORD}\" -d '{\"arg1\": \"value1\", \"arg2\": \"value2\"}'"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "serve"
      },
      "h2": {
        "id": "testing",
        "title": "Testing"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.dev-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/dev",
    "pathname": "/ref/baml-cli/dev",
    "title": "dev",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The dev command starts a development server that watches your BAML source files for changes and automatically reloads the BAML runtime. This feature is designed to streamline the development process by providing real-time updates as you modify your BAML configurations.\n\n\nWarning: Preview Feature\nYou must include the --preview flag when running the dev command.\n\nBe aware that this feature is still being stabilized and may change in future releases."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-cli.dev-details-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-cli/dev",
    "pathname": "/ref/baml-cli/dev",
    "title": "Details",
    "breadcrumb": [
      {
        "title": "baml-cli",
        "pathname": "/ref/baml-cli"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#details",
    "content": "See the serve command for more information on the arguments.\nThe dev command performs the exact same functionality, but it additionally:\nWatches the BAML source files for changes.\n\nAutomatically reloads the server when changes are detected.\n\nAutomatically runs any generators when changes are detected.",
    "hierarchy": {
      "h0": {
        "title": "dev"
      },
      "h2": {
        "id": "details",
        "title": "Details"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.comments",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/comments",
    "pathname": "/ref/baml/general-baml-syntax/comments",
    "title": "comments",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.comments-single-line--trailing-comments-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/comments",
    "pathname": "/ref/baml/general-baml-syntax/comments",
    "title": "Single line / trailing comments",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#single-line--trailing-comments",
    "content": "Denoted by //.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "// hello there!\nfoo // this is a trailing comment"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "comments"
      },
      "h2": {
        "id": "single-line--trailing-comments",
        "title": "Single line / trailing comments"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.comments-docstrings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/comments",
    "pathname": "/ref/baml/general-baml-syntax/comments",
    "title": "Docstrings",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#docstrings",
    "content": "We have no special syntax for docstrings. Instead, we use comments.\nEventually, we'll support a /// syntax for docstrings which will\nalso be used for generating documentation in baml_client.",
    "hierarchy": {
      "h0": {
        "title": "comments"
      },
      "h2": {
        "id": "docstrings",
        "title": "Docstrings"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.comments-comments-in-block-strings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/comments",
    "pathname": "/ref/baml/general-baml-syntax/comments",
    "title": "Comments in block strings",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#comments-in-block-strings",
    "content": "See Block Strings for more information.",
    "code_snippets": [
      {
        "lang": "jinja",
        "code": "#\"\n    My string. {#\n        This is a comment\n    #}\n    hi!\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "comments"
      },
      "h2": {
        "id": "comments-in-block-strings",
        "title": "Comments in block strings"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.enviornment-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "pathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "title": "Enviornment Variables",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "env.YOUR_VARIABLE_NAME"
      }
    ],
    "content": "To set a value to an environment variable, use the following syntax:\n\n\nEnvironment variables with spaces in their names are not supported."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.enviornment-variables-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "pathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "title": "Example",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example",
    "content": "Using an environment variable for API key:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "client<llm> MyCustomClient {\n    provider \"openai\"\n    options {\n        model \"gpt-4o-mini\"\n        // Set the API key using an environment variable\n        api_key env.MY_SUPER_SECRET_API_KEY\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Enviornment Variables"
      },
      "h3": {
        "id": "example",
        "title": "Example"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.enviornment-variables-setting-environment-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "pathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "title": "Setting Environment Variables",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setting-environment-variables",
    "content": "To set environment variables:\n\n\n\n\nOnce you open a .baml file, in VSCode, you should see a small button over every BAML function: Open Playground.\nThen you should be able to set environment variables in the settings tab.\n\n\nOr type BAML Playground in the VSCode Command Bar (CMD + Shift + P or CTRL + Shift + P) to open the playground.\n\n\nBAML will expect these to be set already in your program before you import the baml_client in Python/ TS / etc.\nAny of the following strategies for setting env vars are compatible with BAML:\nsetting them in your shell before running your program\n\nin your Dockerfile\n\nin your next.config.js\n\nin your Kubernetes manifest\n\nfrom secrets-store.csi.k8s.io\n\nfrom a secrets provider such as Infisical / Doppler\n\nfrom a .env file (using dotenv cli)\n\nusing account credentials for ephemeral token generation (e.g. Vertex AI Auth Tokens)\n\n\n\n\n\n\nRequires BAML Version 0.57+\nIf you don't want BAML to try to auto-load your env vars, you can call manually reset_baml_env_vars\nwith the current environment variables.",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "export MY_SUPER_SECRET_API_KEY=\"...\"\npython my_program_using_baml.py"
      },
      {
        "lang": "bash",
        "code": "export MY_SUPER_SECRET_API_KEY=\"...\"\npython my_program_using_baml.py"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "\nfrom baml_client import b\nfrom baml_client import reset_baml_env_vars\nimport os\nimport dotenv\n\ndotenv.load_dotenv()\nreset_baml_env_vars(dict(os.environ))"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import dotenv from 'dotenv'\n// Wait to import the BAML client until after loading environment variables\nimport { b, resetBamlEnvVars } from 'baml-client'\n\ndotenv.config()\nresetBamlEnvVars(process.env)"
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "require 'dotenv/load'\n\n# Wait to import the BAML client until after loading environment variables\n# reset_baml_env_vars is not yet implemented in the Ruby client\nrequire 'baml_client'"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "\nfrom baml_client import b\nfrom baml_client import reset_baml_env_vars\nimport os\nimport dotenv\n\ndotenv.load_dotenv()\nreset_baml_env_vars(dict(os.environ))"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import dotenv from 'dotenv'\n// Wait to import the BAML client until after loading environment variables\nimport { b, resetBamlEnvVars } from 'baml-client'\n\ndotenv.config()\nresetBamlEnvVars(process.env)"
      },
      {
        "lang": "ruby",
        "meta": "Ruby (beta)",
        "code": "require 'dotenv/load'\n\n# Wait to import the BAML client until after loading environment variables\n# reset_baml_env_vars is not yet implemented in the Ruby client\nrequire 'baml_client'"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Enviornment Variables"
      },
      "h2": {
        "id": "setting-environment-variables",
        "title": "Setting Environment Variables"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.enviornment-variables-error-handling-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "pathname": "/ref/baml/general-baml-syntax/enviornment-variables",
    "title": "Error Handling",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#error-handling",
    "content": "Errors for unset environment variables are only thrown when the variable is accessed. If your BAML project has 15 environment variables and 1 is used for the function you are calling, only that one environment variable will be checked for existence.",
    "hierarchy": {
      "h0": {
        "title": "Enviornment Variables"
      },
      "h2": {
        "id": "error-handling",
        "title": "Error Handling"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.string-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/string",
    "pathname": "/ref/baml/general-baml-syntax/string",
    "title": "string",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "BAML treats templatized strings as first-class citizens."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.string-quoted-strings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/string",
    "pathname": "/ref/baml/general-baml-syntax/string",
    "title": "Quoted Strings",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#quoted-strings",
    "content": "These is a valid inline string, which is surrounded by double quotes. They behave like regular strings in most programming languages, and can be escaped with a backslash.\n\n\nThese cannot have template variables or expressions inside them. Use a block string for that.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "\"Hello World\"\n\n\"\\n\""
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "string"
      },
      "h2": {
        "id": "quoted-strings",
        "title": "Quoted Strings"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.string-unquoted-strings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/string",
    "pathname": "/ref/baml/general-baml-syntax/string",
    "title": "Unquoted Strings",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#unquoted-strings",
    "content": "BAML also supports simple unquoted in-line strings. The string below is valid! These are useful for simple strings such as configuration options.\nUnquoted strings may not have any of the following since they are reserved characters (note this may change in the future):\nQuotes \"double\" or 'single'\n\nAt-signs @\n\nCurlies \n\n\n\nhashtags #\n\nParentheses ()\n\nBrackets []\n\ncommas ,\n\nnewlines\n\n\nWhen in doubt, use a quoted string or a block string, but the VSCode extension will warn you if there is a parsing issue.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "Hello World"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "string"
      },
      "h2": {
        "id": "unquoted-strings",
        "title": "Unquoted Strings"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.string-block-strings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/string",
    "pathname": "/ref/baml/general-baml-syntax/string",
    "title": "Block Strings",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#block-strings",
    "content": "If a string is on multiple lines, it must be surrounded by #\" and \"#. This is called a block string.\nBlock strings are automatically dedented and stripped of the first and last newline. This means that the following will render the same thing as above\nWhen used for templating, block strings can contain expressions and variables using Jinja syntax.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "#\"\nHello\nWorld\n\"#"
      },
      {
        "lang": "rust",
        "code": "#\"\n    Hello\n    World\n\"#"
      },
      {
        "lang": "rust",
        "code": "template_string Greeting(name: string) #\"\n  Hello {{ name }}!\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "string"
      },
      "h2": {
        "id": "block-strings",
        "title": "Block Strings"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.string-escape-characters-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/string",
    "pathname": "/ref/baml/general-baml-syntax/string",
    "title": "Escape Characters",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#escape-characters",
    "content": "Escaped characters are injected as is into the string.\nThis will render as \\\\n in the output.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "#\"\\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "string"
      },
      "h2": {
        "id": "block-strings",
        "title": "Block Strings"
      },
      "h3": {
        "id": "escape-characters",
        "title": "Escape Characters"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.string-adding-a--chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/string",
    "pathname": "/ref/baml/general-baml-syntax/string",
    "title": "Adding a \"#",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#adding-a-",
    "content": "To include a \"# in a block string, you can prefix it with a different count of #.\nThis will render as #\"Hello\"#.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "###\"\n  #\"Hello\"#\n\"###"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "string"
      },
      "h2": {
        "id": "block-strings",
        "title": "Block Strings"
      },
      "h3": {
        "id": "adding-a-",
        "title": "Adding a \"#"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.int-float-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/int-float",
    "pathname": "/ref/baml/general-baml-syntax/int-float",
    "title": "int / float",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Numerical values as denoted more specifically in BAML.\nValue Description \nint Integer \nfloat Floating point number \n\nWe support implicit casting of int -> float, but if you need something to explicitly be a float, use 0.0 instead of 0."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.bool-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/bool",
    "pathname": "/ref/baml/general-baml-syntax/bool",
    "title": "bool",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "true or false"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.array-list-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/array-list",
    "pathname": "/ref/baml/general-baml-syntax/array-list",
    "title": "array (list)",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Allow you to store and manipulate collections of data. They can be declared in a concise and readable manner, supporting both single-line and multi-line formats."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.array-list-syntax-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/array-list",
    "pathname": "/ref/baml/general-baml-syntax/array-list",
    "title": "Syntax",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#syntax",
    "content": "To declare an array in a BAML file, you can use the following syntax:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "{\n  key1 [value1, value2, value3],\n  key2 [\n    value1,\n    value2,\n    value3\n  ],\n  key3 [\n    {\n      subkey1 \"valueA\",\n      subkey2 \"valueB\"\n    },\n    {\n      subkey1 \"valueC\",\n      subkey2 \"valueD\"\n    }\n  ]\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "array (list)"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.array-list-key-points-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/array-list",
    "pathname": "/ref/baml/general-baml-syntax/array-list",
    "title": "Key Points:",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#key-points",
    "content": "Commas: Optional for multi-line arrays, but recommended for clarity.\n\nNested Arrays: Supported, allowing complex data structures.\n\nKey-Value Pairs: Arrays can contain objects with key-value pairs.",
    "hierarchy": {
      "h0": {
        "title": "array (list)"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      },
      "h3": {
        "id": "key-points",
        "title": "Key Points:"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.map-dictionary-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/map-dictionary",
    "pathname": "/ref/baml/general-baml-syntax/map-dictionary",
    "title": "map (dictionary)",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Map values (AKA Dictionaries) allow you to store key-value pairs.\n\n\nMost of BAML (clients, tests, classes, etc) is represented as a map."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.map-dictionary-syntax-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/map-dictionary",
    "pathname": "/ref/baml/general-baml-syntax/map-dictionary",
    "title": "Syntax",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#syntax",
    "content": "To declare a map in a BAML file, you can use the following syntax:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "{\n  key1 value1,\n  key2 {\n    nestedKey1 nestedValue1,\n    nestedKey2 nestedValue2\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "map (dictionary)"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.general-baml-syntax.map-dictionary-key-points-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/general-baml-syntax/map-dictionary",
    "pathname": "/ref/baml/general-baml-syntax/map-dictionary",
    "title": "Key Points:",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      },
      {
        "title": "General BAML Syntax",
        "pathname": "/ref/baml/general-baml-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#key-points",
    "content": "Colons: Not used in BAML maps; keys and values are separated by spaces.\n\nValue Types: Maps can contain unquoted or quoted strings, booleans, numbers, and nested maps as values.\n\nClasses: Classes in BAML are represented as maps with keys and values.",
    "hierarchy": {
      "h0": {
        "title": "map (dictionary)"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      },
      "h3": {
        "id": "key-points",
        "title": "Key Points:"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Here's a list of all the types that can be represented in BAML:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-primitive-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Primitive Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#primitive-types",
    "content": "bool\n\nint\n\nfloat\n\nstring\n\nnull",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "primitive-types",
        "title": "Primitive Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-literal-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Literal Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#literal-types",
    "content": "This feature was added in: v0.61.0.\nThe primitive types string, int and bool can be constrained to a specific value.\nFor example, you can use literal values as return types:\nSee Union(|) for more details.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "function ClassifyIssue(issue_description: string) -> \"bug\" | \"enhancement\" {\n  client GPT4Turbo\n  prompt #\"\n    Classify the issue based on the following description:\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\")}}\n    {{ issue_description }}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "literal-types",
        "title": "Literal Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-multimodal-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Multimodal Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#multimodal-types",
    "content": "See calling a function with multimodal types\nand testing image inputs\n\n\nBAML's multimodal types are designed for ease of use: we have deliberately made it\neasy for you to construct a image or audio instance from a URL. Under the\nhood, depending on the model you're using, BAML may need to download the image\nand transcode it (usually as base64) for the model to consume.\nThis ease-of-use does come with some tradeoffs; namely, if you construct\nan image or audio instance using untrusted user input, you may be exposing\nyourself to server-side request forgery (SSRF) attacks. Attackers may be\nable to fetch files on your internal network, on external networks using your\napplication's identity, or simply excessively drive up your cloud network\nbandwidth bill.\nTo prevent this, we recommend only using URLs from trusted sources/users or\nvalidating them using allowlists or denylists.",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "multimodal-types",
        "title": "Multimodal Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-image-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "image",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#image",
    "content": "You can use an image like this for models that support them:\nYou cannot name a variable image at the moment as it is a reserved keyword.\nCalling a function with an image type:\n\n\n\n\nIf using Pydantic, the following are valid ways to construct the Image type.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "function DescribeImage(myImg: image) -> string {\n  client GPT4Turbo\n  prompt #\"\n    {{ _.role(\"user\")}}\n    Describe the image in four words:\n    {{ myImg }}\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Image\nfrom baml_client import b\n\nasync def test_image_input():\n  # from URL\n  res = await b.TestImageInput(\n    img=Image.from_url(\"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\")\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = await b.TestImageInput(\n    img=Image.from_base64(\"image/png\", image_b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Image } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestImageInput(\n    Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png'),\n  )\n\n  // Base64\n  let res = await b.TestImageInput(\n    Image.fromBase64('image/png', image_b64),\n  )"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\nb = Baml.Client\nImage = Baml::Image\n\ndef test_image_input\n  # from URL\n  res = b.TestImageInput(\n    img: Image.from_url(\"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\")\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = b.TestImageInput(\n    img: Image.from_base64(\"image/png\", image_b64)\n  )\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Image\nfrom baml_client import b\n\nasync def test_image_input():\n  # from URL\n  res = await b.TestImageInput(\n    img=Image.from_url(\"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\")\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = await b.TestImageInput(\n    img=Image.from_base64(\"image/png\", image_b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Image } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestImageInput(\n    Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png'),\n  )\n\n  // Base64\n  let res = await b.TestImageInput(\n    Image.fromBase64('image/png', image_b64),\n  )"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\nb = Baml.Client\nImage = Baml::Image\n\ndef test_image_input\n  # from URL\n  res = b.TestImageInput(\n    img: Image.from_url(\"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\")\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = b.TestImageInput(\n    img: Image.from_base64(\"image/png\", image_b64)\n  )\nend"
      },
      {
        "lang": "json",
        "code": "{\n  \"url\": \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"url\": \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\",\n  \"media_type\": \"image/png\"\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"base64\": \"iVBORw0K....\",\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"base64\": \"iVBORw0K....\",\n  \"media_type\": \"image/png\"\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"url\": \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"url\": \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\",\n  \"media_type\": \"image/png\"\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"base64\": \"iVBORw0K....\",\n}"
      },
      {
        "lang": "json",
        "code": "{\n  \"base64\": \"iVBORw0K....\",\n  \"media_type\": \"image/png\"\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "multimodal-types",
        "title": "Multimodal Types"
      },
      "h3": {
        "id": "image",
        "title": "image"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-audio-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "audio",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#audio",
    "content": "Example\nCalling functions that have audio types.",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "function DescribeSound(myAudio: audio) -> string {\n  client GPT4Turbo\n  prompt #\"\n    {{ _.role(\"user\")}}\n    Describe the audio in four words:\n    {{ myAudio }}\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Audio\nfrom baml_client import b\n\nasync def run():\n  # from URL\n  res = await b.TestAudioInput(\n      audio=Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64\n  b64 = \"iVBORw0K....\"\n  res = await b.TestAudioInput(\n    audio=Audio.from_base64(\"audio/ogg\", b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Audio } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestAudioInput(\n    Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg'),\n  )\n\n  // Base64\n  const audio_base64 = \"..\"\n  let res = await b.TestAudioInput(\n    Audio.fromBase64('audio/ogg', audio_base64),\n  )\n  "
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\nb = Baml.Client\nAudio = Baml::Audio\n\ndef test_audio_input\n  # from URL\n  res = b.TestAudioInput(\n      audio: Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64 image\n  audio_b64 = \"iVBORw0K....\"\n  res = b.TestAudioInput(\n    audio: Audio.from_base64(\"audio/mp3\", audio_b64)\n  )\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_py import Audio\nfrom baml_client import b\n\nasync def run():\n  # from URL\n  res = await b.TestAudioInput(\n      audio=Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64\n  b64 = \"iVBORw0K....\"\n  res = await b.TestAudioInput(\n    audio=Audio.from_base64(\"audio/ogg\", b64)\n  )"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { b } from '../baml_client'\nimport { Audio } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestAudioInput(\n    Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg'),\n  )\n\n  // Base64\n  const audio_base64 = \"..\"\n  let res = await b.TestAudioInput(\n    Audio.fromBase64('audio/ogg', audio_base64),\n  )\n  "
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative \"baml_client/client\"\n\nb = Baml.Client\nAudio = Baml::Audio\n\ndef test_audio_input\n  # from URL\n  res = b.TestAudioInput(\n      audio: Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64 image\n  audio_b64 = \"iVBORw0K....\"\n  res = b.TestAudioInput(\n    audio: Audio.from_base64(\"audio/mp3\", audio_b64)\n  )\nend"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "multimodal-types",
        "title": "Multimodal Types"
      },
      "h3": {
        "id": "audio",
        "title": "audio"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-enum-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "enum",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#enum",
    "content": "See also: Enum\nA user-defined type consisting of a set of named constants.\nUse it when you need a model to choose from a known set of values, like in classification problems\nIf you need to add new variants, because they need to be loaded from a file or fetched dynamically\nfrom a database, you can do this with Dynamic Types.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "enum Name {\n  Value1\n  Value2 @description(\"My optional description annotation\")\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "enum",
        "title": "enum"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-class-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "class",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#class",
    "content": "See also: Class\nClasses are for user-defined complex data structures.\nUse when you need an LLM to call another function (e.g. OpenAI's function calling), you can model the function's parameters as a class. You can also get models to return complex structured data by using a class.\nExample:\nNote that properties have no :\nIf you need to add fields to a class because some properties of your class are only\nknown at runtime, you can do this with Dynamic Types.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "class Car {\n  model string\n  year int @description(\"Year of manufacture\")\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "class",
        "title": "class"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-optional--chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Optional (?)",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#optional-",
    "content": "A type that represents a value that might or might not be present.\nUseful when a variable might not have a value and you want to explicitly handle its absence.\nSyntax: Type?\nExample: int? or (MyClass | int)?",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "optional-",
        "title": "Optional (?)"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-union--chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Union (|)",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#union-",
    "content": "A type that can hold one of several specified types.\nThis can be helpful with function calling, where you want to return different types of data depending on which function should be called.\nSyntax: Type1 | Type2\nExample: int | string or (int | string) | MyClass or string | MyClass | int[]\n\n\nOrder is important. int | string is not the same as string | int.\nFor example, if you have a \"1\" string, it will be parsed as an int if\nyou use int | string, but as a string if you use string | int.",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "union-",
        "title": "Union (|)"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-listarray--chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "List/Array ([])",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listarray-",
    "content": "A collection of elements of the same type.\nSyntax: Type[]\nExample: string[] or (int | string)[] or int[][]\n\n\nArray types can be nested to create multi-dimensional arrays\n\nAn array type cannot be optional",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "listarray-",
        "title": "List/Array ([])"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-map-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Map",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#map",
    "content": "A mapping of strings to elements of another type.\nSyntax: map<string, ValueType>\nExample: map<string, string>",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "map",
        "title": "Map"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types--set-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "❌ Set",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#-set",
    "content": "Not yet supported. Use a List instead.",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "-set",
        "title": "❌ Set"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types--tuple-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "❌ Tuple",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#-tuple",
    "content": "Not yet supported. Use a class instead.",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "compositestructured-types",
        "title": "Composite/Structured Types"
      },
      "h3": {
        "id": "-tuple",
        "title": "❌ Tuple"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-examples-and-equivalents-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "Examples and Equivalents",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples-and-equivalents",
    "content": "Here are some examples and what their equivalents are in different languages.",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "examples-and-equivalents",
        "title": "Examples and Equivalents"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.types-️-unsupported-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/types",
    "pathname": "/ref/baml/types",
    "title": "⚠️ Unsupported",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#️-unsupported",
    "content": "any/json - Not supported. We don't want to encourage its use as it defeats the purpose of having a type system. if you really need it, for now use string and call json.parse yourself or use dynamic types\n\ndatetime - Not yet supported. Use a string instead.\n\nduration - Not yet supported. We recommend using string and specifying that it must be an \"ISO8601 duration\" in the description, which you can parse yourself into a duration.\n\nunits (currency, temperature) - Not yet supported. Use a number (int or float) and have the unit be part of the variable name. For example, temperature_fahrenheit and cost_usd (see @alias)",
    "hierarchy": {
      "h0": {
        "title": "Types"
      },
      "h2": {
        "id": "️-unsupported",
        "title": "⚠️ Unsupported"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "function",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Functions in BAML define the contract between your application and AI models, providing type-safe interfaces for AI operations."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-overview-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Overview",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#overview",
    "content": "A BAML function consists of:\nInput parameters with explicit types\n\nA return type specification\n\nAn LLM client\n\nA prompt (as a block string)",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "function FunctionName(param: Type) -> ReturnType {\n    client ModelName\n    prompt #\"\n        Template content\n    \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "overview",
        "title": "Overview"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-parameters-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Parameters",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#parameters",
    "content": "name: The function identifier (must start with a capital letter!)\n\nparameters: One or more typed parameters (e.g., text: string, data: CustomType)\n\nreturn_type: The type that the function guarantees to return (e.g., string | MyType)\n\nllm_specification: The LLM to use (e.g., \"openai/gpt-4o-mini\", GPT4Turbo, Claude2)\n\nblock_string_specification: The prompt template using Jinja syntax",
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "function-declaration",
        "title": "Function Declaration"
      },
      "h3": {
        "id": "parameters",
        "title": "Parameters"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-type-system-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Type System",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#type-system",
    "content": "Functions leverage BAML's strong type system, supporting:",
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "type-system",
        "title": "Type System"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-built-in-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Built-in Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#built-in-types",
    "content": "string: Text data\n\nint: Integer numbers\n\nfloat: Decimal numbers\n\nbool: True/false values\n\narray: Denoted with [] suffix (e.g., string[])\n\nmap: Key-value pairs (e.g., map<string, int>)\n\nliteral: Specific values (e.g., \"red\" | \"green\" | \"blue\")\n\nSee all",
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "type-system",
        "title": "Type System"
      },
      "h3": {
        "id": "built-in-types",
        "title": "Built-in Types"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-custom-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Custom Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#custom-types",
    "content": "Custom types can be defined using class declarations:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "class CustomType {\n    field1 string\n    field2 int\n    nested NestedType\n}\n\nfunction ProcessCustomType(data: CustomType) -> ResultType {\n    // ...\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "type-system",
        "title": "Type System"
      },
      "h3": {
        "id": "custom-types",
        "title": "Custom Types"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-jinja-syntax-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Jinja Syntax",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#jinja-syntax",
    "content": "BAML uses Jinja templating for dynamic prompt generation:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "prompt #\"\n    Input data: {{ input_data }}\n    \n    {% if condition %}\n        Conditional content\n    {% endif %}\n    \n    {{ ctx.output_format }}\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "prompt-templates",
        "title": "Prompt Templates"
      },
      "h3": {
        "id": "jinja-syntax",
        "title": "Jinja Syntax"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-special-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Special Variables",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#special-variables",
    "content": "ctx.output_format: Automatically generates format instructions based on return type\n\nctx.client: Selected client and model name\n\n_.role: Define the role of the message chunk",
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "prompt-templates",
        "title": "Prompt Templates"
      },
      "h3": {
        "id": "special-variables",
        "title": "Special Variables"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.function-error-handling-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/function",
    "pathname": "/ref/baml/function",
    "title": "Error Handling",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#error-handling",
    "content": "Functions automatically handle common AI model errors and provide type validation:\nJSON parsing errors are automatically corrected\n\nType mismatches are detected and reported\n\nNetwork and rate limit errors are propagated to the caller",
    "hierarchy": {
      "h0": {
        "title": "function"
      },
      "h2": {
        "id": "error-handling",
        "title": "Error Handling"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "test",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Tests are first-class citizens in BAML, designed to make testing AI functions straightforward and robust. BAML tests can be written anywhere in your codebase and run with minimal setup."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-overview-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Overview",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#overview",
    "content": "A BAML test consists of:\nTest name and metadata\n\nFunctions under test\n\nInput arguments\n\nOptional testing configuration\n\nOptional assertions",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test TestName {\n    functions [FunctionName]\n    args {\n        paramName \"value\"\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "overview",
        "title": "Overview"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-components-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Components",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#components",
    "content": "name: Test identifier (unique per function)\n\nfunctions: List of functions to test\n\nargs: Input parameters for the test case",
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "test-declaration",
        "title": "Test Declaration"
      },
      "h3": {
        "id": "components",
        "title": "Components"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-basic-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Basic Types",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#basic-types",
    "content": "Simple values are provided directly:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test SimpleTest {\n    functions [ClassifyMessage]\n    args {\n        input \"Can't access my account\"\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "input-types",
        "title": "Input Types"
      },
      "h3": {
        "id": "basic-types",
        "title": "Basic Types"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-complex-objects-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Complex Objects",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#complex-objects",
    "content": "Objects are specified using nested structures:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test ComplexTest {\n    functions [ProcessMessage]\n    args {\n        message {\n            user \"john_doe\"\n            content \"Hello world\"\n            metadata {\n                timestamp 1234567890\n                priority \"high\"\n            }\n        }\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "input-types",
        "title": "Input Types"
      },
      "h3": {
        "id": "complex-objects",
        "title": "Complex Objects"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-arrays-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Arrays",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#arrays",
    "content": "Arrays use bracket notation:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test ArrayTest {\n    functions [BatchProcess]\n    args {\n        messages [\n            {\n                user \"user1\"\n                content \"Message 1\"\n            }\n            {\n                user \"user2\"\n                content \"Message 2\"\n            }\n        ]\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "input-types",
        "title": "Input Types"
      },
      "h3": {
        "id": "arrays",
        "title": "Arrays"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-images-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Images",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#images",
    "content": "Images can be specified using three methods:\nFile Reference\n\n\nURL Reference\n\n\nBase64 Data",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "{4-6}",
        "code": "test ImageFileTest {\n    functions [AnalyzeImage]\n    args {\n        param {\n            file \"../images/test.png\"\n        }\n    }\n}"
      },
      {
        "lang": "baml",
        "meta": "{4-6}",
        "code": "test ImageUrlTest {\n    functions [AnalyzeImage]\n    args {\n        param {\n            url \"https://example.com/image.jpg\"\n        }\n    }\n}"
      },
      {
        "lang": "baml",
        "meta": "{4-7}",
        "code": "test ImageBase64Test {\n    functions [AnalyzeImage]\n    args {\n        param {\n            base64 \"a41f...\"\n            media_type \"image/png\"\n        }\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "media-inputs",
        "title": "Media Inputs"
      },
      "h3": {
        "id": "images",
        "title": "Images"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-audio-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Audio",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#audio",
    "content": "Similar to images, audio can be specified in three ways:\nFile Reference\n\n\nURL Reference\n\n\nBase64 Data",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test AudioFileTest {\n    functions [TranscribeAudio]\n    args {\n        audio {\n            file \"../audio/sample.mp3\"\n        }\n    }\n}"
      },
      {
        "lang": "baml",
        "code": "test AudioUrlTest {\n    functions [TranscribeAudio]\n    args {\n        audio {\n            url \"https://example.com/audio.mp3\"\n        }\n    }\n}"
      },
      {
        "lang": "baml",
        "code": "test AudioBase64Test {\n    functions [TranscribeAudio]\n    args {\n        audio {\n            base64 \"...\"\n            media_type \"audio/mp3\"\n        }\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "media-inputs",
        "title": "Media Inputs"
      },
      "h3": {
        "id": "audio",
        "title": "Audio"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-multi-line-strings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Multi-line Strings",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#multi-line-strings",
    "content": "For long text inputs, use the block string syntax:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test LongTextTest {\n    functions [AnalyzeText]\n    args {\n        content #\"\n            This is a multi-line\n            text input that preserves\n            formatting and whitespace\n        \"#\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "multi-line-strings",
        "title": "Multi-line Strings"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-testing-multiple-functions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "Testing Multiple Functions",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#testing-multiple-functions",
    "content": "This requires each function to have teh exact same parameters:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "test EndToEndFlow {\n    functions [\n        ExtractInfo\n        ProcessInfo\n        ValidateResult\n    ]\n    args {\n        input \"test data\"\n    }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "testing-multiple-functions",
        "title": "Testing Multiple Functions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.test-vscode-integration-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/test",
    "pathname": "/ref/baml/test",
    "title": "VSCode Integration",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#vscode-integration",
    "content": "Tests can be run directly from the BAML playground\n\nReal-time syntax validation\n\nTest result visualization",
    "hierarchy": {
      "h0": {
        "title": "test"
      },
      "h2": {
        "id": "integration-with-development-tools",
        "title": "Integration with Development Tools"
      },
      "h3": {
        "id": "vscode-integration",
        "title": "VSCode Integration"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.template-string-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/template-string",
    "pathname": "/ref/baml/template-string",
    "title": "template_string",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "// Inject a list of \"system\" or \"user\" messages into the prompt.\ntemplate_string PrintMessages(messages: Message[]) #\"\n  {% for m in messages %}\n    {{ _.role(m.role) }}\n    {{ m.message }}\n  {% endfor %}\n\"#\n\nfunction ClassifyConversation(messages: Message[]) -> Category[] {\n  client GPT4Turbo\n  prompt #\"\n    Classify this conversation:\n    {{ PrintMessages(messages) }}\n\n    Use the following categories:\n    {{ ctx.output_format}}\n  \"#\n}"
      }
    ],
    "content": "Writing prompts requires a lot of string manipulation. BAML has a template_string to let you combine different string templates together. Under-the-hood they use jinja to evaluate the string and its inputs.\nThink of template strings as functions that have variables, and return a string. They can be used to define reusable parts of a prompt, or to make the prompt more readable by breaking it into smaller parts.\nExample\nIn this example we can call the template_string PrintMessages to subdivide the prompt into \"user\" or \"system\" messages using _.role() (see message roles). This allows us to reuse the logic for printing messages in multiple prompts.\nYou can nest as many template strings inside each other and call them however many times you want.\n\n\nThe BAML linter may give you a warning when you use template strings due to a static analysis limitation. You can ignore this warning. If it renders in the playground, you're good!\nUse the playground preview to ensure your template string is being evaluated correctly!"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.client-llm-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/client-llm",
    "pathname": "/ref/baml/client-llm",
    "title": "client<llm>",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "function MakeHaiku(topic: string) -> string {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}"
      },
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai\"\n  options {\n    model \"gpt-4o\"\n    // api_key defaults to env.OPENAI_API_KEY\n  }\n}\n\nfunction MakeHaiku(topic: string) -> string {\n  client MyClient\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}"
      }
    ],
    "content": "Clients are used to configure how LLMs are called, like so:\nThis is <provider>/<model> shorthand for:\nConsult the provider documentation for a list of supported providers\nand models, and the default options.\nIf you want to override options like api_key to use a different environment\nvariable, or you want to point base_url to a different endpoint, you should use\nthe latter form.\n\n\nIf you want to specify which client to use at runtime, in your Python/TS/Ruby code,\nyou can use the client registry to do so.\nThis can come in handy if you're trying to, say, send 10% of your requests to a\ndifferent model."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.client-llm-fields-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/client-llm",
    "pathname": "/ref/baml/client-llm",
    "title": "Fields",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#fields",
    "content": "This configures which provider to use. The provider is responsible for handling the actual API calls to the LLM service. The provider is a required field.\nThe configuration modifies the URL request BAML runtime makes.\nProvider Name Docs Notes \nanthropic Anthropic  \naws-bedrock AWS Bedrock  \nazure-openai Azure OpenAI  \ngoogle-ai Google AI  \nopenai OpenAI  \nopenai-generic OpenAI (generic) Any model provider that supports an OpenAI-compatible API \nvertex-ai Vertex AI  \n\nWe also have some special providers that allow composing clients together:\nProvider Name Docs Notes \nfallback Fallback Used to chain models conditional on failures \nround-robin Round Robin Used to load balance \n\n\n\nThese vary per provider. Please see provider specific documentation for more\ninformation. Generally they are pass through options to the POST request made\nto the LLM.\n\n\nThe name of the retry policy. See Retry\nPolicy.",
    "hierarchy": {
      "h0": {
        "title": "client<llm>"
      },
      "h2": {
        "id": "fields",
        "title": "Fields"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "class",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "Baml",
        "code": "class Foo {\n  property1 string\n  property2 int?\n  property3 Bar[]\n  property4 MyEnum\n}"
      },
      {
        "lang": "python",
        "meta": "Python Equivalent",
        "code": "from pydantic import BaseModel\nfrom path.to.bar import Bar\nfrom path.to.my_enum import MyEnum\n\nclass Foo(BaseModel):\n  property1: str\n  property2: Optional[int]= None\n  property3: List[Bar]\n  property4: MyEnum"
      },
      {
        "lang": "typescript",
        "meta": "Typescript Equivalent",
        "code": "import z from \"zod\";\nimport { BarZod } from \"./path/to/bar\";\nimport { MyEnumZod } from \"./path/to/my_enum\";\n\nconst FooZod = z.object({\n  property1: z.string(),\n  property2: z.number().int().nullable().optional(),\n  property3: z.array(BarZod),\n  property4: MyEnumZod,\n});\n\ntype Foo = z.infer<typeof FooZod>;"
      },
      {
        "lang": "baml",
        "meta": "Baml",
        "code": "class Foo {\n  property1 string\n  property2 int?\n  property3 Bar[]\n  property4 MyEnum\n}"
      },
      {
        "lang": "python",
        "meta": "Python Equivalent",
        "code": "from pydantic import BaseModel\nfrom path.to.bar import Bar\nfrom path.to.my_enum import MyEnum\n\nclass Foo(BaseModel):\n  property1: str\n  property2: Optional[int]= None\n  property3: List[Bar]\n  property4: MyEnum"
      },
      {
        "lang": "typescript",
        "meta": "Typescript Equivalent",
        "code": "import z from \"zod\";\nimport { BarZod } from \"./path/to/bar\";\nimport { MyEnumZod } from \"./path/to/my_enum\";\n\nconst FooZod = z.object({\n  property1: z.string(),\n  property2: z.number().int().nullable().optional(),\n  property3: z.array(BarZod),\n  property4: MyEnumZod,\n});\n\ntype Foo = z.infer<typeof FooZod>;"
      }
    ],
    "content": "Classes consist of a name, a list of properties, and their types.\nIn the context of LLMs, classes describe the type of the variables you can inject into prompts and extract out from the response.\n\n\nNote properties have no :"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-field-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "Field Attributes",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#field-attributes",
    "content": "When prompt engineering, you can also alias values and add descriptions.\n\n\nAliasing renames the field for the llm to potentially \"understand\" your value better, while keeping the original name in your code, so you don't need to change your downstream code everytime.\nThis will also be used for parsing the output of the LLM back into the original object.\n\n\nThis adds some additional context to the field in the prompt.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string @alias(\"name\") @description(\"The name of the object\")\n  age int? @description(\"The age of the object\")\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "class"
      },
      "h2": {
        "id": "field-attributes",
        "title": "Field Attributes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-class-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "Class Attributes",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#class-attributes",
    "content": "If set, will allow you to add fields to the class dynamically at runtime (in your python/ts/etc code). See dynamic classes for more information.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string\n  property2 int?\n\n  @@dynamic // allows me to later propert3 float[] at runtime\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "class"
      },
      "h2": {
        "id": "class-attributes",
        "title": "Class Attributes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-syntax-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "Syntax",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#syntax",
    "content": "Classes may have any number of properties.\nProperty names must follow these rules:\nMust start with a letter\n\nMust contain only letters, numbers, and underscores\n\nMust be unique within the class\n\nclasses cannot be self-referential (cannot have a property of the same type as the class itself)\n\n\nThe type of a property can be any supported type",
    "hierarchy": {
      "h0": {
        "title": "class"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-default-values-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "Default values",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#default-values",
    "content": "Not yet supported. For optional properties, the default value is None in python.",
    "hierarchy": {
      "h0": {
        "title": "class"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      },
      "h3": {
        "id": "default-values",
        "title": "Default values"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-dynamic-classes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "Dynamic classes",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamic-classes",
    "content": "See Dynamic Types.",
    "hierarchy": {
      "h0": {
        "title": "class"
      },
      "h2": {
        "id": "syntax",
        "title": "Syntax"
      },
      "h3": {
        "id": "dynamic-classes",
        "title": "Dynamic classes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.class-inheritance-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/class",
    "pathname": "/ref/baml/class",
    "title": "Inheritance",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#inheritance",
    "content": "Never supported. Like rust, we take the stance that composition is better than inheritance.",
    "hierarchy": {
      "h0": {
        "title": "class"
      },
      "h2": {
        "id": "inheritance",
        "title": "Inheritance"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.enum-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/enum",
    "pathname": "/ref/baml/enum",
    "title": "enum",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n  Value3\n}"
      },
      {
        "lang": "python",
        "meta": "Python Equivalent",
        "code": "from enum import StrEnum\n\nclass MyEnum(StrEnum):\n  Value1 = \"Value1\"\n  Value2 = \"Value2\"\n  Value3 = \"Value3\""
      },
      {
        "lang": "typescript",
        "meta": "Typescript Equivalent",
        "code": "enum MyEnum {\n  Value1 = \"Value1\",\n  Value2 = \"Value2\",\n  Value3 = \"Value3\",\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n  Value3\n}"
      },
      {
        "lang": "python",
        "meta": "Python Equivalent",
        "code": "from enum import StrEnum\n\nclass MyEnum(StrEnum):\n  Value1 = \"Value1\"\n  Value2 = \"Value2\"\n  Value3 = \"Value3\""
      },
      {
        "lang": "typescript",
        "meta": "Typescript Equivalent",
        "code": "enum MyEnum {\n  Value1 = \"Value1\",\n  Value2 = \"Value2\",\n  Value3 = \"Value3\",\n}"
      }
    ],
    "content": "Enums are useful for classification tasks. BAML has helper functions that can help you serialize an enum into your prompt in a neatly formatted list (more on that later).\nTo define your own custom enum in BAML:\n\n\nYou may have as many values as you'd like.\n\nValues may not be duplicated or empty.\n\nValues may not contain spaces or special characters and must not start with a number."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.enum-enum-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/enum",
    "pathname": "/ref/baml/enum",
    "title": "Enum Attributes",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#enum-attributes",
    "content": "This is the name of the enum rendered in the prompt.\n\n\nIf set, will allow you to add/remove/modify values to the enum dynamically at runtime (in your python/ts/etc code). See dynamic enums for more information.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n  Value3\n\n  @@alias(\"My Custom Enum\")\n  @@dynamic // allows me to later skip Value2 at runtime\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "enum"
      },
      "h2": {
        "id": "enum-attributes",
        "title": "Enum Attributes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.enum-value-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/enum",
    "pathname": "/ref/baml/enum",
    "title": "Value Attributes",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#value-attributes",
    "content": "When prompt engineering, you can also alias values and add descriptions, or even skip them.\n\n\nAliasing renames the values for the llm to potentially \"understand\" your value better, while keeping the original name in your code, so you don't need to change your downstream code everytime.\nThis will also be used for parsing the output of the LLM back into the enum.\n\n\nThis adds some additional context to the value in the prompt.\n\n\nSkip this value in the prompt and during parsing.\nSee more in prompt syntax docs",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1 @alias(\"complete_summary\") @description(\"Answer in 2 sentences\")\n  Value2\n  Value3 @skip\n  Value4 @description(#\"\n    This is a long description that spans multiple lines.\n    It can be useful for providing more context to the value.\n  \"#)\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "enum"
      },
      "h2": {
        "id": "value-attributes",
        "title": "Value Attributes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml.generator-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml/generator",
    "pathname": "/ref/baml/generator",
    "title": "generator",
    "breadcrumb": [
      {
        "title": "Language Reference",
        "pathname": "/ref/baml"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "Python",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"sync\"\n    \n    // Version of runtime to generate code for (should match installed baml-py version)\n    version \"0.63.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "TypeScript",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n    \n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.63.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "Ruby (beta)",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"ruby/sorbet\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.63.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "OpenAPI",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"rest/openapi\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n\n    // 'baml-cli generate' will run this after generating openapi.yaml, to generate your OpenAPI client\n    // This command will be run from within $output_dir\n    on_generate \"npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g OPENAPI_CLIENT_TYPE -o .\"\n}"
      },
      {
        "lang": "baml",
        "meta": "Python",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"sync\"\n    \n    // Version of runtime to generate code for (should match installed baml-py version)\n    version \"0.63.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "TypeScript",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    \n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n    \n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.63.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "Ruby (beta)",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"ruby/sorbet\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.63.0\"\n}"
      },
      {
        "lang": "baml",
        "meta": "OpenAPI",
        "code": "generator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"rest/openapi\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    \n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n\n    // 'baml-cli generate' will run this after generating openapi.yaml, to generate your OpenAPI client\n    // This command will be run from within $output_dir\n    on_generate \"npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g OPENAPI_CLIENT_TYPE -o .\"\n}"
      }
    ],
    "content": "Each generator that you define in your BAML project will tell baml-cli\ngenerate to generate code for a specific target language. You can define\nmultiple generator clauses in your BAML project, and baml-cli generate will\ngenerate code for each of them.\n\n\nIf you created your project using baml-cli init, then one has already been generated for you!"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.what-are-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/what-are-attributes",
    "pathname": "/ref/attributes/what-are-attributes",
    "title": "What are attributes?",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "In BAML, attributes are used to provide additional metadata or behavior to fields and types. They can be applied at different levels, such as field-level or block-level, depending on their intended use."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.what-are-attributes-field-level-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/what-are-attributes",
    "pathname": "/ref/attributes/what-are-attributes",
    "title": "Field-Level Attributes",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#field-level-attributes",
    "content": "Field-level attributes are applied directly to individual fields within a class or enum. They modify the behavior or metadata of that specific field.",
    "hierarchy": {
      "h0": {
        "title": "What are attributes?"
      },
      "h2": {
        "id": "field-level-attributes",
        "title": "Field-Level Attributes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.what-are-attributes-examples-of-field-level-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/what-are-attributes",
    "pathname": "/ref/attributes/what-are-attributes",
    "title": "Examples of Field-Level Attributes",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples-of-field-level-attributes",
    "content": "@alias: Renames a field for better understanding by the LLM.\n\n@description: Provides additional context to a field.\n\n@skip: Excludes a field from prompts or parsing.\n\n@assert: Applies strict validation to a field.\n\n@check: Adds non-exception-raising validation to a field.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string @alias(\"name\") @description(\"The name of the object\")\n  age int? @check(positive, {{ this > 0 }})\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What are attributes?"
      },
      "h2": {
        "id": "field-level-attributes",
        "title": "Field-Level Attributes"
      },
      "h3": {
        "id": "examples-of-field-level-attributes",
        "title": "Examples of Field-Level Attributes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.what-are-attributes-block-level-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/what-are-attributes",
    "pathname": "/ref/attributes/what-are-attributes",
    "title": "Block-Level Attributes",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#block-level-attributes",
    "content": "Block-level attributes are applied to an entire class or enum, affecting all fields or values within that block. They are used to modify the behavior or metadata of the entire block.",
    "hierarchy": {
      "h0": {
        "title": "What are attributes?"
      },
      "h2": {
        "id": "block-level-attributes",
        "title": "Block-Level Attributes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.what-are-attributes-examples-of-block-level-attributes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/what-are-attributes",
    "pathname": "/ref/attributes/what-are-attributes",
    "title": "Examples of Block-Level Attributes",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples-of-block-level-attributes",
    "content": "@@dynamic: Allows dynamic modification of fields or values at runtime.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string\n  property2 int?\n\n  @@dynamic // allows adding fields dynamically at runtime\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What are attributes?"
      },
      "h2": {
        "id": "block-level-attributes",
        "title": "Block-Level Attributes"
      },
      "h3": {
        "id": "examples-of-block-level-attributes",
        "title": "Examples of Block-Level Attributes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.what-are-attributes-key-differences-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/what-are-attributes",
    "pathname": "/ref/attributes/what-are-attributes",
    "title": "Key Differences",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#key-differences",
    "content": "Scope: Field-level attributes affect individual fields, while block-level attributes affect the entire class or enum.\n\nUsage: Field-level attributes are used for specific field modifications, whereas block-level attributes are used for broader modifications affecting the whole block.\n\n\nUnderstanding the distinction between these types of attributes is crucial for effectively using BAML to define and manipulate data structures.\nFor more detailed information on each attribute, refer to the specific attribute pages in this section.",
    "hierarchy": {
      "h0": {
        "title": "What are attributes?"
      },
      "h2": {
        "id": "key-differences",
        "title": "Key Differences"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.alias-alias-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/alias-alias",
    "pathname": "/ref/attributes/alias-alias",
    "title": "@alias / @@alias",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The @alias attribute in BAML is used to rename fields or values for better understanding by the LLM, while keeping the original name in your code. This is particularly useful for prompt engineering, as it allows you to provide a more intuitive name for the LLM without altering your existing codebase."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.alias-alias-without-alias-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/alias-alias",
    "pathname": "/ref/attributes/alias-alias",
    "title": "Without @alias",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#without-alias",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string\n}"
      },
      {
        "code": "{\n  property1: string\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@alias / @@alias"
      },
      "h2": {
        "id": "prompt-impact-class",
        "title": "Prompt Impact (class)"
      },
      "h3": {
        "id": "without-alias",
        "title": "Without @alias"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.alias-alias-with-alias-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/alias-alias",
    "pathname": "/ref/attributes/alias-alias",
    "title": "With @alias",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#with-alias",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string @alias(\"name\")\n}"
      },
      {
        "code": "{\n  name: string\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@alias / @@alias"
      },
      "h2": {
        "id": "prompt-impact-class",
        "title": "Prompt Impact (class)"
      },
      "h3": {
        "id": "with-alias",
        "title": "With @alias"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.alias-alias-prompt-impact-enum-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/alias-alias",
    "pathname": "/ref/attributes/alias-alias",
    "title": "Prompt Impact (enum)",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#prompt-impact-enum",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1 \n  // Note that @@alias is applied to the enum itself, not the value\n  @@alias(\"My Name\")\n}"
      },
      {
        "code": "My Name\n---\nValue1"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@alias / @@alias"
      },
      "h2": {
        "id": "prompt-impact-enum",
        "title": "Prompt Impact (enum)"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.alias-alias-prompt-impact-enum-value-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/alias-alias",
    "pathname": "/ref/attributes/alias-alias",
    "title": "Prompt Impact (enum value)",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#prompt-impact-enum-value",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1 @alias(\"Something\")\n}"
      },
      {
        "code": "MyEnum\n---\nSomething"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@alias / @@alias"
      },
      "h2": {
        "id": "prompt-impact-enum-value",
        "title": "Prompt Impact (enum value)"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.description-description-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/description-description",
    "pathname": "/ref/attributes/description-description",
    "title": "@description / @@description",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The @description attribute in BAML provides additional context to fields or values in prompts. This can help the LLM understand the intended use or meaning of a field or value."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.description-description-without-description-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/description-description",
    "pathname": "/ref/attributes/description-description",
    "title": "Without @description",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#without-description",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string\n}"
      },
      {
        "code": "{\n  property1: string\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@description / @@description"
      },
      "h2": {
        "id": "prompt-impact",
        "title": "Prompt Impact"
      },
      "h3": {
        "id": "without-description",
        "title": "Without @description"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.description-description-with-description-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/description-description",
    "pathname": "/ref/attributes/description-description",
    "title": "With @description",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#with-description",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string @description(\"The name of the object\")\n}"
      },
      {
        "code": "{\n  // The name of the object\n  property1: string\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@description / @@description"
      },
      "h2": {
        "id": "prompt-impact",
        "title": "Prompt Impact"
      },
      "h3": {
        "id": "with-description",
        "title": "With @description"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.description-description-without-description-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/description-description",
    "pathname": "/ref/attributes/description-description",
    "title": "Without @description",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#without-description-1",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n}"
      },
      {
        "code": "MyEnum\n---\nValue1\nValue2"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@description / @@description"
      },
      "h2": {
        "id": "prompt-impact-enum---value",
        "title": "Prompt Impact (enum - value)"
      },
      "h3": {
        "id": "without-description-1",
        "title": "Without @description"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.description-description-with-description-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/description-description",
    "pathname": "/ref/attributes/description-description",
    "title": "With @description",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#with-description-1",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1 @description(\"The first value\")\n  Value2 @description(\"The second value\")\n}"
      },
      {
        "code": "MyEnum\n---\nValue1 // The first value\nValue2 // The second value"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@description / @@description"
      },
      "h2": {
        "id": "prompt-impact-enum---value",
        "title": "Prompt Impact (enum - value)"
      },
      "h3": {
        "id": "with-description-1",
        "title": "With @description"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.description-description-prompt-impact-enum-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/description-description",
    "pathname": "/ref/attributes/description-description",
    "title": "Prompt Impact (enum)",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#prompt-impact-enum",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n\n  @@description(\"This enum represents status codes\")\n}"
      },
      {
        "code": "MyEnum: This enum represents status codes\n---\nValue1\nValue2"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@description / @@description"
      },
      "h2": {
        "id": "prompt-impact-enum",
        "title": "Prompt Impact (enum)"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.skip-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/skip",
    "pathname": "/ref/attributes/skip",
    "title": "@skip",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The @skip attribute in BAML is used to exclude certain fields or values from being included in prompts or parsed responses. This can be useful when certain data is not relevant for the LLM's processing."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.skip-without-skip-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/skip",
    "pathname": "/ref/attributes/skip",
    "title": "Without @skip",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#without-skip",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n}"
      },
      {
        "code": "MyEnum\n---\nValue1\nValue2"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@skip"
      },
      "h2": {
        "id": "prompt-impact",
        "title": "Prompt Impact"
      },
      "h3": {
        "id": "without-skip",
        "title": "Without @skip"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.skip-with-skip-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/skip",
    "pathname": "/ref/attributes/skip",
    "title": "With @skip",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#with-skip",
    "content": "ctx.output_format:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2 @skip\n}"
      },
      {
        "code": "MyEnum\n---\nValue1"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@skip"
      },
      "h2": {
        "id": "prompt-impact",
        "title": "Prompt Impact"
      },
      "h3": {
        "id": "with-skip",
        "title": "With @skip"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.assert-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/assert",
    "pathname": "/ref/attributes/assert",
    "title": "@assert",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The @assert attribute in BAML is used for strict validations. If a type fails an @assert validation, it will not be returned in the response, and an exception will be raised if it's part of the top-level type."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.assert-usage-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/assert",
    "pathname": "/ref/attributes/assert",
    "title": "Usage",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usage",
    "content": "Asserts can be named or unnamed.",
    "hierarchy": {
      "h0": {
        "title": "@assert"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.assert-parameter-assertion-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/assert",
    "pathname": "/ref/attributes/assert",
    "title": "Parameter Assertion",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#parameter-assertion",
    "content": "Asserts can also be applied to parameters.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "function MyFunction(x: int @assert(between_0_and_10, {{ this > 0 and this < 10 }})) {\n  client \"openai/gpt-4o\"\n  prompt #\"Hello, world!\"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@assert"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      },
      "h3": {
        "id": "parameter-assertion",
        "title": "Parameter Assertion"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.assert-block-assertion-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/assert",
    "pathname": "/ref/attributes/assert",
    "title": "Block Assertion",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#block-assertion",
    "content": "Asserts can be used in a block definition, referencing fields within the block.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class Foo {\n  bar int\n  baz string\n  @@assert(baz_length_limit, {{ this.baz|length < this.bar }})\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@assert"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      },
      "h3": {
        "id": "block-assertion",
        "title": "Block Assertion"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.check-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/check",
    "pathname": "/ref/attributes/check",
    "title": "@check",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The @check attribute in BAML adds validations without raising exceptions if they fail. This allows the validations to be inspected at runtime."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.check-benefits-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/check",
    "pathname": "/ref/attributes/check",
    "title": "Benefits",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#benefits",
    "content": "Non-Intrusive Validation: Allows for validation checks without interrupting the flow of data processing.\n\nRuntime Inspection: Enables inspection of validation results at runtime.\n\n\nSee more in validations guide.",
    "hierarchy": {
      "h0": {
        "title": "@check"
      },
      "h2": {
        "id": "benefits",
        "title": "Benefits"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.dynamic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/dynamic",
    "pathname": "/ref/attributes/dynamic",
    "title": "@@dynamic",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The @@dynamic attribute in BAML allows for the dynamic modification of fields or values at runtime. This is particularly useful when you need to adapt the structure of your data models based on runtime conditions or external inputs."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.dynamic-dynamic-classes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/dynamic",
    "pathname": "/ref/attributes/dynamic",
    "title": "Dynamic Classes",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamic-classes",
    "content": "The @@dynamic attribute can be applied to classes, enabling the addition of fields dynamically during runtime.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "class MyClass {\n  property1 string\n  property2 int?\n\n  @@dynamic // allows adding fields dynamically at runtime\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@@dynamic"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      },
      "h3": {
        "id": "dynamic-classes",
        "title": "Dynamic Classes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.dynamic-dynamic-enums-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/dynamic",
    "pathname": "/ref/attributes/dynamic",
    "title": "Dynamic Enums",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamic-enums",
    "content": "Similarly, the @@dynamic attribute can be applied to enums, allowing for the modification of enum values at runtime.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "enum MyEnum {\n  Value1\n  Value2\n\n  @@dynamic // allows modifying enum values dynamically at runtime\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "@@dynamic"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      },
      "h3": {
        "id": "dynamic-enums",
        "title": "Dynamic Enums"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.attributes.dynamic-using-dynamic-with-typebuilder-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/attributes/dynamic",
    "pathname": "/ref/attributes/dynamic",
    "title": "Using @@dynamic with TypeBuilder",
    "breadcrumb": [
      {
        "title": "Attributes",
        "pathname": "/ref/attributes"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#using-dynamic-with-typebuilder",
    "content": "To modify dynamic types at runtime, you can use the TypeBuilder from the baml_client. Below are examples for Python, TypeScript, and Ruby.",
    "hierarchy": {
      "h0": {
        "title": "@@dynamic"
      },
      "h2": {
        "id": "using-dynamic-with-typebuilder",
        "title": "Using @@dynamic with TypeBuilder"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.aws-bedrock-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/aws-bedrock",
    "pathname": "/ref/llm-client-providers/aws-bedrock",
    "title": "aws-bedrock",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "AWS Bedrock provider for BAML",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider aws-bedrock\n  options {\n    api_key env.MY_OPENAI_KEY\n    model \"gpt-3.5-turbo\"\n    temperature 0.1\n  }\n}"
      }
    ],
    "content": "The aws-bedrock provider supports all text-output models available via the\nConverse API.\nExample:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.aws-bedrock-authorization-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/aws-bedrock",
    "pathname": "/ref/llm-client-providers/aws-bedrock",
    "title": "Authorization",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#authorization",
    "content": "We use the AWS SDK under the hood, which will respect all authentication\nmechanisms supported by the\nSDK, including but not\nlimited to:\nAWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as set in your environment variables\n\nloading the specified AWS_PROFILE from ~/.aws/config\n\nbuilt-in authn for services running in EC2, ECS, Lambda, etc.",
    "hierarchy": {
      "h0": {
        "title": "aws-bedrock"
      },
      "h2": {
        "id": "authorization",
        "title": "Authorization"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.aws-bedrock-playground-setup-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/aws-bedrock",
    "pathname": "/ref/llm-client-providers/aws-bedrock",
    "title": "Playground setup",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#playground-setup",
    "content": "Add these three environment variables to your extension variables to use the AWS Bedrock provider in the playground.\nAWS_ACCESS_KEY_ID\n\nAWS_SECRET_ACCESS_KEY\n\nAWS_REGION - like us-east-1",
    "hierarchy": {
      "h0": {
        "title": "aws-bedrock"
      },
      "h2": {
        "id": "playground-setup",
        "title": "Playground setup"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.aws-bedrock-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/aws-bedrock",
    "pathname": "/ref/llm-client-providers/aws-bedrock",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "The default role for any prompts that don't specify a role. Default: system\nWe don't have any checks for this field, you can pass any string you wish.\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"foo\", \"bar\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "aws-bedrock"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.aws-bedrock-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/aws-bedrock",
    "pathname": "/ref/llm-client-providers/aws-bedrock",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt\n\n\nThe model to use.\nModel Description \nanthropic.claude-3-haiku-20240307-v1:0 Fastest + Cheapest \nanthropic.claude-3-sonnet-20240307-v1:0 Smartest \nmeta.llama3-8b-instruct-v1:0  \nmeta.llama3-70b-instruct-v1:0  \nmistral.mistral-7b-instruct-v0:2  \nmistral.mixtral-8x7b-instruct-v0:1  \n\nRun aws bedrock list-foundation-models | jq '.modelSummaries.[].modelId to get\na list of available foundation models; you can also use any custom models you've\ndeployed.\nNote that to use any of these models you'll need to request model access.\n\n\nAdditional inference configuration to send with the request; see AWS Bedrock\ndocumentation.\nExample:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider aws-bedrock\n  options {\n    inference_configuration {\n      max_tokens 1000\n      temperature 1.0\n      top_p 0.8\n      stop_sequence [\"_EOF\"]\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider aws-bedrock\n  options {\n    inference_configuration {\n      max_tokens 1000\n      temperature 1.0\n      top_p 0.8\n      stop_sequence [\"_EOF\"]\n    }\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "aws-bedrock"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.anthropic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/anthropic",
    "pathname": "/ref/llm-client-providers/anthropic",
    "title": "anthropic",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    temperature 0\n  }\n}"
      }
    ],
    "content": "The anthropic provider supports all APIs that use the same interface for the /v1/messages endpoint.\nExample:\nThe options are passed through directly to the API, barring a few. Here's a shorthand of the options:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.anthropic-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/anthropic",
    "pathname": "/ref/llm-client-providers/anthropic",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "Will be passed as a bearer token. Default: env.ANTHROPIC_API_KEY\nAuthorization: Bearer $api_key\n\n\nThe base URL for the API. Default: https://api.anthropic.com\n\n\nThe default role for any prompts that don't specify a role. Default: system\nWe don't have any checks for this field, you can pass any string you wish.\n\n\nAdditional headers to send with the request.\nUnless specified with a different value, we inject in the following headers:\nExample:\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"cache_control\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "code": "\"anthropic-version\" \"2023-06-01\""
      },
      {
        "lang": "baml",
        "code": "client<llm> MyClient {\n  provider anthropic\n  options {\n    api_key env.MY_ANTHROPIC_KEY\n    model \"claude-3-5-sonnet-20240620\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "code": "\"anthropic-version\" \"2023-06-01\""
      },
      {
        "lang": "baml",
        "code": "client<llm> MyClient {\n  provider anthropic\n  options {\n    api_key env.MY_ANTHROPIC_KEY\n    model \"claude-3-5-sonnet-20240620\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "client<llm> ClaudeWithCaching {\n  provider anthropic\n  options {\n    model claude-3-haiku-20240307\n    api_key env.ANTHROPIC_API_KEY\n    max_tokens 1000\n    allowed_role_metadata [\"cache_control\"]\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n}\n\nclient<llm> FooWithout {\n  provider anthropic\n  options {\n  }\n}\n\ntemplate_string Foo() #\"\n  {{ _.role('user', cache_control={\"type\": \"ephemeral\"}) }}\n  This will be cached for ClaudeWithCaching, but not for FooWithout!\n  {{ _.role('user') }}\n  This will not be cached for Foo or FooWithout!\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> ClaudeWithCaching {\n  provider anthropic\n  options {\n    model claude-3-haiku-20240307\n    api_key env.ANTHROPIC_API_KEY\n    max_tokens 1000\n    allowed_role_metadata [\"cache_control\"]\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n}\n\nclient<llm> FooWithout {\n  provider anthropic\n  options {\n  }\n}\n\ntemplate_string Foo() #\"\n  {{ _.role('user', cache_control={\"type\": \"ephemeral\"}) }}\n  This will be cached for ClaudeWithCaching, but not for FooWithout!\n  {{ _.role('user') }}\n  This will not be cached for Foo or FooWithout!\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "anthropic"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.anthropic-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/anthropic",
    "pathname": "/ref/llm-client-providers/anthropic",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt, if necessary.\nOnly the first system message will be used, all subsequent ones will be cast to the assistant role.\n\n\nBAML will auto construct this field for you from the prompt\n\n\nBAML will auto construct this field for you based on how you call the client in your code\n\n\nThe model to use.\nModel \nclaude-3-5-sonnet-20240620 \nclaude-3-opus-20240229 \nclaude-3-sonnet-20240229 \nclaude-3-haiku-20240307 \n\n\n\nSee anthropic docs for the latest list of all models. You can pass any model name you wish, we will not check if it exists.\n\n\nThe maximum number of tokens to generate. Default: 4069\nFor all other options, see the official anthropic API documentation.",
    "hierarchy": {
      "h0": {
        "title": "anthropic"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-ai-gemini-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-ai-gemini",
    "pathname": "/ref/llm-client-providers/google-ai-gemini",
    "title": "google-ai",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider google-ai\n  options {\n    model \"gemini-1.5-flash\"\n  }\n}"
      }
    ],
    "content": "The google-ai provider supports the https://generativelanguage.googleapis.com/v1beta/models/{model_id}/generateContent and https://generativelanguage.googleapis.com/v1beta/models/{model_id}/streamGenerateContent endpoints.\n\n\nThe use of v1beta rather than v1 aligns with the endpoint conventions established in Google's SDKs and offers access to both the existing v1 models and additional models exclusive to v1beta.\n\n\nBAML will automatically pick streamGenerateContent if you call the streaming interface.\nExample:\nThe options are passed through directly to the API, barring a few. Here's a shorthand of the options:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-ai-gemini-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-ai-gemini",
    "pathname": "/ref/llm-client-providers/google-ai-gemini",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "Will be passed as the x-goog-api-key header. Default: env.GOOGLE_API_KEY\nx-goog-api-key: $api_key\n\n\nThe base URL for the API. Default: https://generativelanguage.googleapis.com/v1beta\n\n\nThe default role for any prompts that don't specify a role. Default: user\nWe don't have any checks for this field, you can pass any string you wish.\n\n\nThe model to use. Default: gemini-1.5-flash\nWe don't have any checks for this field, you can pass any string you wish.\nModel Input(s) Optimized for \ngemini-1.5-pro Audio, images, videos, and text Complex reasoning tasks such as code and text generation, text editing, problem solving, data extraction and generation \ngemini-1.5-flash Audio, images, videos, and text Fast and versatile performance across a diverse variety of tasks \ngemini-1.0-pro Text Natural language tasks, multi-turn text and code chat, and code generation \n\nSee the Google Model Docs for the latest models.\n\n\nAdditional headers to send with the request.\nExample:\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"foo\", \"bar\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider google-ai\n  options {\n    model \"gemini-1.5-flash\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider google-ai\n  options {\n    model \"gemini-1.5-flash\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "google-ai"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-ai-gemini-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-ai-gemini",
    "pathname": "/ref/llm-client-providers/google-ai-gemini",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt\nFor all other options, see the official Google Gemini API documentation.",
    "hierarchy": {
      "h0": {
        "title": "google-ai"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-vertex-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-vertex",
    "pathname": "/ref/llm-client-providers/google-vertex",
    "title": "vertex-ai",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "code": "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${MODEL_ID}:generateContent\nhttps://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${MODEL_ID}:streamGenerateContent"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n  }\n}"
      }
    ],
    "content": "The vertex-ai provider is used to interact with the Google Vertex AI services, specifically the following endpoints:\nExample:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-vertex-authorization-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-vertex",
    "pathname": "/ref/llm-client-providers/google-vertex",
    "title": "Authorization",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#authorization",
    "content": "The vertex-ai provider uses the Google Cloud SDK to authenticate with a temporary access token. We generate these Google Cloud Authentication Tokens using Google Cloud service account credentials. We do not store this token, and it is only used for the duration of the request.",
    "hierarchy": {
      "h0": {
        "title": "vertex-ai"
      },
      "h2": {
        "id": "authorization",
        "title": "Authorization"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-vertex-instructions-for-downloading-google-cloud-credentials-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-vertex",
    "pathname": "/ref/llm-client-providers/google-vertex",
    "title": "Instructions for downloading Google Cloud credentials",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#instructions-for-downloading-google-cloud-credentials",
    "content": "Go to the Google Cloud Console.\n\nClick on the project you want to use.\n\nSelect the IAM & Admin section, and click on Service Accounts.\n\nSelect an existing service account or create a new one.\n\nClick on the service account and select Add Key.\n\nChoose the JSON key type and click Create.\n\nSet the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the file.\n\n\nSee the Google Cloud Application Default Credentials Docs for more information.\n\n\nThe project_id of your client object must match the project_id of your credentials file.\nThe options are passed through directly to the API, barring a few. Here's a shorthand of the options:",
    "hierarchy": {
      "h0": {
        "title": "vertex-ai"
      },
      "h2": {
        "id": "authorization",
        "title": "Authorization"
      },
      "h3": {
        "id": "instructions-for-downloading-google-cloud-credentials",
        "title": "Instructions for downloading Google Cloud credentials"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-vertex-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-vertex",
    "pathname": "/ref/llm-client-providers/google-vertex",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "The base URL for the API.\nDefault: https://{LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/{LOCATION}/publishers/google/models/\n\nCan be used in lieu of the project_id and location fields, to manually set the request URL.\n\n\nVertex requires a Google Cloud project ID for each request. See the Google Cloud Project ID Docs for more information.\n\n\nVertex requires a location for each request. Some locations may have different models avaiable.\nCommon locations include:\nus-central1\n\nus-west1\n\nus-east1\n\nus-south1\n\n\nSee the Vertex Location Docs for all locations and supported models.\n\n\nPath to a JSON credentials file or a JSON object containing the credentials.\nDefault: env.GOOGLE_APPLICATION_CREDENTIALS\n\n\nIn this case, the path is resolved relative to the CWD of your process.\n\n\n\n\nThis field cannot be used in the BAML Playground. For the playground, use the credentials_content instead.\n\n\nOverrides contents of the Google Cloud Application Credentials. Default: env.GOOGLE_APPLICATION_CREDENTIALS_CONTENT\n\n\n\n\nOnly use this for the BAML Playground only. Use credentials for your runtime code.\n\n\nDirectly set Google Cloud Authentication Token in lieu of token generation via env.GOOGLE_APPLICATION_CREDENTIALS or env.GOOGLE_APPLICATION_CREDENTIALS_CONTENT fields.\n\n\nThe default role for any prompts that don't specify a role. Default: user\n\n\nThe Google model to use for the request.\nModel Input(s) Optimized for \ngemini-1.5-pro Audio, images, videos, and text Complex reasoning tasks such as code and text generation, text editing, problem solving, data extraction and generation \ngemini-1.5-flash Audio, images, videos, and text Fast and versatile performance across a diverse variety of tasks \ngemini-1.0-pro Text Natural language tasks, multi-turn text and code chat, and code generation \n\nSee the Google Model Docs for the latest models.\n\n\nAdditional headers to send with the request.\nExample:\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"foo\", \"bar\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id jane-doe-test-1\n    location us-central1\n    credentials 'path/to/credentials.json'\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id jane-doe-test-1\n    location us-central1\n    credentials 'path/to/credentials.json'\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id jane-doe-mycompany-1\n    location us-central1\n    credentials {\n      ...\n      private_key \"-----BEGIN PRIVATE KEY-----super-duper-secret-string\\n-----END PRIVATE KEY-----\\n\"\n      client_email \"jane_doe@mycompany.com\"\n      ...\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id jane-doe-mycompany-1\n    location us-central1\n    credentials {\n      ...\n      private_key \"-----BEGIN PRIVATE KEY-----super-duper-secret-string\\n-----END PRIVATE KEY-----\\n\"\n      client_email \"jane_doe@mycompany.com\"\n      ...\n    }\n  }\n}"
      },
      {
        "lang": "json",
        "meta": "Credentials",
        "code": "    {\n      \"type\": \"service_account\",\n      \"project_id\": \"my-project-id\",\n      \"private_key_id\": \"string\",\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----string\\n-----END PRIVATE KEY-----\\n\",\n      \"client_email\": \"john_doe@gmail.com\",\n      \"client_id\": \"123456\",\n      \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n      \"token_uri\": \"https://oauth2.googleapis.com/token\",\n      \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n      \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/...\",\n      \"universe_domain\": \"googleapis.com\"\n    }"
      },
      {
        "lang": "json",
        "meta": "Credentials",
        "code": "    {\n      \"type\": \"service_account\",\n      \"project_id\": \"my-project-id\",\n      \"private_key_id\": \"string\",\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----string\\n-----END PRIVATE KEY-----\\n\",\n      \"client_email\": \"john_doe@gmail.com\",\n      \"client_id\": \"123456\",\n      \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n      \"token_uri\": \"https://oauth2.googleapis.com/token\",\n      \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n      \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/...\",\n      \"universe_domain\": \"googleapis.com\"\n    }"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n    // Additional headers\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n    // Additional headers\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "vertex-ai"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.google-vertex-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/google-vertex",
    "pathname": "/ref/llm-client-providers/google-vertex",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "Safety settings to apply to the request. You can stack different safety settings with a new safetySettings header for each one. See the Google Vertex API Request Docs for more information on what safety settings can be set.\n\n\nGeneration configurations to apply to the request. See the Google Vertex API Request Docs for more information on what properties can be set.\nFor all other options, see the official Vertex AI documentation.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n\n    safetySettings {\n      category HARM_CATEGORY_HATE_SPEECH\n      threshold BLOCK_LOW_AND_ABOVE\n      method SEVERITY\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n\n    safetySettings {\n      category HARM_CATEGORY_HATE_SPEECH\n      threshold BLOCK_LOW_AND_ABOVE\n      method SEVERITY\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n    \n    generationConfig {\n      maxOutputTokens 100\n      temperature 1\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n    \n    generationConfig {\n      maxOutputTokens 100\n      temperature 1\n    }\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "vertex-ai"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.open-ai-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/open-ai",
    "pathname": "/ref/llm-client-providers/open-ai",
    "title": "openai",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai\"\n  options {\n    api_key env.MY_OPENAI_KEY\n    model \"gpt-3.5-turbo\"\n    temperature 0.1\n  }\n}"
      }
    ],
    "content": "The openai provider supports the OpenAI /chat endpoint, setting OpenAI-specific\ndefault configuration options.\n\n\nFor Azure, we recommend using azure-openai instead.\nFor all other OpenAI-compatible API providers, such as Groq, HuggingFace,\nOllama, OpenRouter, Together AI, and others, we recommend using\nopenai-generic instead.\nExample:\nThe options are passed through directly to the API, barring a few. Here's a shorthand of the options:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.open-ai-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/open-ai",
    "pathname": "/ref/llm-client-providers/open-ai",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "Will be used to build the Authorization header, like so: Authorization: Bearer $api_key\nDefault: env.OPENAI_API_KEY\n\n\nThe base URL for the API.\nDefault: https://api.openai.com/v1\n\n\nThe default role for any prompts that don't specify a role.\nWe don't do any validation of this field, so you can pass any string you wish.\nDefault: system\n\n\nAdditional headers to send with the request.\nExample:\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"foo\", \"bar\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider openai\n  options {\n    api_key env.MY_OPENAI_KEY\n    model \"gpt-3.5-turbo\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider openai\n  options {\n    api_key env.MY_OPENAI_KEY\n    model \"gpt-3.5-turbo\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "openai"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.open-ai-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/open-ai",
    "pathname": "/ref/llm-client-providers/open-ai",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt\n\n\nBAML will auto construct this field for you based on how you call the client in your code\n\n\nThe model to use.\nModel Description \ngpt-3.5-turbo Fastest \ngpt-4o Fast + text + image \ngpt-4-turbo Smartest + text + image + code \ngpt-4o-mini Cheapest + text + image \n\nSee openai docs for the list of openai models. You can pass any model name you wish, we will not check if it exists.\nFor all other options, see the official OpenAI API documentation.",
    "hierarchy": {
      "h0": {
        "title": "openai"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.open-ai-from-azure-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/open-ai-from-azure",
    "pathname": "/ref/llm-client-providers/open-ai-from-azure",
    "title": "azure-openai",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider azure-openai\n  options {\n    resource_name \"my-resource-name\"\n    deployment_id \"my-deployment-id\"\n    // Alternatively, you can use the base_url field\n    // base_url \"https://my-resource-name.openai.azure.com/openai/deployments/my-deployment-id\"\n    api_version \"2024-02-01\"\n    api_key env.AZURE_OPENAI_API_KEY\n  }\n}"
      }
    ],
    "content": "For azure-openai, we provide a client that can be used to interact with the OpenAI API hosted on Azure using the /chat/completions endpoint.\nExample:\n\n\napi_version is required. Azure will return not found if the version is not specified.\nThe options are passed through directly to the API, barring a few. Here's a shorthand of the options:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.open-ai-from-azure-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/open-ai-from-azure",
    "pathname": "/ref/llm-client-providers/open-ai-from-azure",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "Will be injected via the header API-KEY. Default: env.AZURE_OPENAI_API_KEY\nAPI-KEY: $api_key\n\n\nThe base URL for the API. Default: https://${resource_name}.openai.azure.com/openai/deployments/${deployment_id}\nMay be used instead of resource_name and deployment_id.\n\n\nSee the base_url field.\n\n\nSee the base_url field.\n\n\nThe default role for any prompts that don't specify a role. Default: system\nWe don't have any checks for this field, you can pass any string you wish.\n\n\nWill be passed via a query parameter api-version.\n\n\nAdditional headers to send with the request.\nExample:\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"foo\", \"bar\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider azure-openai\n  options {\n    resource_name \"my-resource-name\"\n    deployment_id \"my-deployment-id\"\n    api_version \"2024-02-01\"\n    api_key env.AZURE_OPENAI_API_KEY\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider azure-openai\n  options {\n    resource_name \"my-resource-name\"\n    deployment_id \"my-deployment-id\"\n    api_version \"2024-02-01\"\n    api_key env.AZURE_OPENAI_API_KEY\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "azure-openai"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.open-ai-from-azure-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/open-ai-from-azure",
    "pathname": "/ref/llm-client-providers/open-ai-from-azure",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt\n\n\nBAML will auto construct this field for you based on how you call the client in your code\nFor all other options, see the official Azure API documentation.",
    "hierarchy": {
      "h0": {
        "title": "azure-openai"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic",
    "pathname": "/ref/llm-client-providers/openai-generic",
    "title": "openai-generic",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.provider.com\"\n    model \"<provider-specified-format>\"\n  }\n}"
      }
    ],
    "content": "The openai-generic provider supports all APIs that use OpenAI's request and\nresponse formats, such as Groq, HuggingFace, Ollama, OpenRouter, and Together AI.\nExample:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic",
    "pathname": "/ref/llm-client-providers/openai-generic",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "The base URL for the API.\nDefault: https://api.openai.com/v1\n\n\nThe default role for any prompts that don't specify a role.\nWe don't do any validation of this field, so you can pass any string you wish.\nDefault: system\n\n\nWill be used to build the Authorization header, like so: Authorization: Bearer $api_key\nIf api_key is not set, or is set to an empty string, the Authorization header will not be sent.\nDefault: <none>\n\n\nAdditional headers to send with the request.\nExample:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.provider.com\"\n    model \"<provider-specified-format>\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.provider.com\"\n    model \"<provider-specified-format>\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "openai-generic"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic",
    "pathname": "/ref/llm-client-providers/openai-generic",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt\n\n\nBAML will auto construct this field for you based on how you call the client in your code\n\n\nThe model to use.\nFor OpenAI, this might be \"gpt-4o-mini\"; for Ollama, this might be \"llama2\". The exact\nsyntax will depend on your API provider's documentation: we'll just forward it to them as-is.\nFor all other options, see the official OpenAI API documentation.",
    "hierarchy": {
      "h0": {
        "title": "openai-generic"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-groq-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-groq",
    "pathname": "/ref/llm-client-providers/openai-generic-groq",
    "title": "groq",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider openai-generic\n  options {\n    base_url \"https://api.groq.com/openai/v1\"\n    api_key env.GROQ_API_KEY\n    model \"llama3-70b-8192\"\n  }\n}"
      }
    ],
    "content": "Groq supports the OpenAI client, allowing you to use the\nopenai-generic provider with an\noverridden base_url.\nSee https://console.groq.com/docs/openai for more information."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-hugging-face-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-hugging-face",
    "pathname": "/ref/llm-client-providers/openai-generic-hugging-face",
    "title": "huggingface",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider openai-generic\n  options {\n    base_url \"https://api-inference.huggingface.co/v1\"\n    api_key env.HUGGINGFACE_API_KEY\n  }\n}"
      }
    ],
    "content": "HuggingFace supports the OpenAI client, allowing you to use the\nopenai-generic provider with an\noverridden base_url.\nSee https://huggingface.co/docs/inference-endpoints/index for more information on their Inference Endpoints."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-keywords-ai-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-keywords-ai",
    "pathname": "/ref/llm-client-providers/openai-generic-keywords-ai",
    "title": "Keywords AI",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Keywords AI is a proxying layer that allows you to route requests to hundreds of models.\nFollow the Keywords AI + BAML Installation Guide to get started!"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-lm-studio-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-lm-studio",
    "pathname": "/ref/llm-client-providers/openai-generic-lm-studio",
    "title": "vLLM",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:1234/v1\"\n    model \"TheBloke/phi-2-GGUF\"\n  }\n}"
      }
    ],
    "content": "LMStudio supports the OpenAI client, allowing you\nto use the openai-generic provider\nwith an overridden base_url.\nSee https://lmstudio.ai/docs/local-server#make-an-inferencing-request-using-openais-chat-completions-format for more information."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-ollama-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-ollama",
    "pathname": "/ref/llm-client-providers/openai-generic-ollama",
    "title": "ollama",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:11434/v1\"\n    model llama3\n  }\n}"
      }
    ],
    "content": "Ollama supports the OpenAI client, allowing you to use the\nopenai-generic provider with an\noverridden base_url.\n\n\nNote that to call Ollama, you must use its OpenAI-compatible\n/v1 endpoint. See Ollama's OpenAI compatibility\ndocumentation.\n\n\nYou can try out BAML with Ollama at promptfiddle.com, by running OLLAMA_ORIGINS='*' ollama serve. Learn more in hereThe options are passed through directly to the API, barring a few. Here's a shorthand of the options:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-ollama-non-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-ollama",
    "pathname": "/ref/llm-client-providers/openai-generic-ollama",
    "title": "Non-forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#non-forwarded-options",
    "content": "The base URL for the API. Default: http://localhost:11434/v1\n\n\nNote the /v1 at the end of the URL. See Ollama's OpenAI compatability\n\n\nThe default role for any prompts that don't specify a role. Default: system\nWe don't have any checks for this field, you can pass any string you wish.\n\n\nAdditional headers to send with the request.\nExample:\n\n\nWhich role metadata should we forward to the API? Default: []\nFor example you can set this to [\"foo\", \"bar\"] to forward the cache policy to the API.\nIf you do not set allowed_role_metadata, we will not forward any role metadata to the API even if it is set in the prompt.\nThen in your prompt you can use something like:\nYou can use the playground to see the raw curl request to see what is being sent to the API.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider ollama\n  options {\n    model \"llama3\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider ollama\n  options {\n    model \"llama3\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      },
      {
        "lang": "baml",
        "code": "client<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ollama"
      },
      "h2": {
        "id": "non-forwarded-options",
        "title": "Non-forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-ollama-forwarded-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-ollama",
    "pathname": "/ref/llm-client-providers/openai-generic-ollama",
    "title": "Forwarded options",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#forwarded-options",
    "content": "BAML will auto construct this field for you from the prompt\n\n\nBAML will auto construct this field for you based on how you call the client in your code\n\n\nThe model to use.\nModel Description \nllama3 Meta Llama 3: The most capable openly available LLM to date \nqwen2 Qwen2 is a new series of large language models from Alibaba group \nphi3 Phi-3 is a family of lightweight 3B (Mini) and 14B (Medium) state-of-the-art open models by Microsoft \naya Aya 23, released by Cohere, is a new family of state-of-the-art, multilingual models that support 23 languages. \nmistral The 7B model released by Mistral AI, updated to version 0.3. \ngemma Gemma is a family of lightweight, state-of-the-art open models built by Google DeepMind. Updated to version 1.1 \nmixtral A set of Mixture of Experts (MoE) model with open weights by Mistral AI in 8x7b and 8x22b parameter sizes. \n\nFor the most up-to-date list of models supported by Ollama, see their Model Library.\n\n\nTo use a specific version you would do: \"mixtral:8x22b\"",
    "hierarchy": {
      "h0": {
        "title": "ollama"
      },
      "h2": {
        "id": "forwarded-options",
        "title": "Forwarded options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-open-router-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-open-router",
    "pathname": "/ref/llm-client-providers/openai-generic-open-router",
    "title": "openrouter",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-3.5-turbo\"\n    headers {\n      \"HTTP-Referer\" \"YOUR-SITE-URL\" // Optional\n      \"X-Title\" \"YOUR-TITLE\" // Optional\n    }\n  }\n}"
      }
    ],
    "content": "OpenRouter supports the OpenAI client, allowing you to use the\nopenai-generic provider with an\noverridden base_url."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-together-ai-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-together-ai",
    "pathname": "/ref/llm-client-providers/openai-generic-together-ai",
    "title": "Together AI",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.together.ai/v1\"\n    api_key env.TOGETHER_API_KEY\n    model \"meta-llama/Llama-3-70b-chat-hf\"\n  }\n}"
      }
    ],
    "content": "Together AI supports the OpenAI client, allowing you\nto use the openai-generic provider\nwith an overridden base_url.\nSee https://docs.together.ai/docs/openai-api-compatibility for more information."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-unify-ai-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-unify-ai",
    "pathname": "/ref/llm-client-providers/openai-generic-unify-ai",
    "title": "Unify AI",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> UnifyClient {\n    provider \"openai-generic\"\n    options {\n        base_url \"https://api.unify.ai/v0\"\n        api_key env.MY_UNIFY_API_KEY\n        model \"llama-3.1-405b-chat@together-ai\"\n    }\n}"
      }
    ],
    "content": "Unify AI supports the OpenAI client, allowing you\nto use the openai-generic provider\nwith an overridden base_url.\nSee https://docs.unify.ai/universal_api/making_queries#openai-python-package for more information."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-providers.openai-generic-v-llm-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-providers/openai-generic-v-llm",
    "pathname": "/ref/llm-client-providers/openai-generic-v-llm",
    "title": "vLLM",
    "breadcrumb": [
      {
        "title": "LLM Client Providers",
        "pathname": "/ref/llm-client-providers"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:8000/v1\"\n    api_key \"token-abc123\"\n    model \"NousResearch/Meta-Llama-3-8B-Instruct\"\n    default_role \"user\" // Required for using VLLM\n  }\n}"
      }
    ],
    "content": "vLLM supports the OpenAI client, allowing you\nto use the openai-generic provider\nwith an overridden base_url.\nSee https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html for more information."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.retry-policy-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/retry-policy",
    "pathname": "/ref/llm-client-strategies/retry-policy",
    "title": "retry_policy",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "retry_policy MyPolicyName {\n  max_retries 3\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider anthropic\n  retry_policy MyPolicyName\n  options {\n    model \"claude-3-sonnet-20240229\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}"
      }
    ],
    "content": "A retry policy can be attached to any client<llm> and will attempt to retry requests that fail due to a network error.\nUsage:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.retry-policy-fields-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/retry-policy",
    "pathname": "/ref/llm-client-strategies/retry-policy",
    "title": "Fields",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#fields",
    "content": "Number of additional retries to attempt after the initial request fails.\n\n\nThe strategy to use for retrying requests. Default is constant_delay(delay_ms=200).\nStrategy Docs Notes \nconstant_delay Docs  \nexponential_backoff Docs  \n\nExample:",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "retry_policy MyPolicyName {\n  max_retries 3\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}"
      },
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "retry_policy MyPolicyName {\n  max_retries 3\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "retry_policy"
      },
      "h2": {
        "id": "fields",
        "title": "Fields"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.retry-policy-constant_delay-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/retry-policy",
    "pathname": "/ref/llm-client-strategies/retry-policy",
    "title": "constant_delay",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#constant_delay",
    "content": "Configures to the constant delay strategy.\n\n\nThe delay in milliseconds to wait between retries. Default: 200",
    "hierarchy": {
      "h0": {
        "title": "retry_policy"
      },
      "h2": {
        "id": "strategies",
        "title": "Strategies"
      },
      "h3": {
        "id": "constant_delay",
        "title": "constant_delay"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.retry-policy-exponential_backoff-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/retry-policy",
    "pathname": "/ref/llm-client-strategies/retry-policy",
    "title": "exponential_backoff",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#exponential_backoff",
    "content": "Configures to the exponential backoff strategy.\n\n\nThe initial delay in milliseconds to wait between retries. Default: 200\n\n\nThe multiplier to apply to the delay after each retry. Default: 1.5\n\n\nThe maximum delay in milliseconds to wait between retries. Default: 10000",
    "hierarchy": {
      "h0": {
        "title": "retry_policy"
      },
      "h2": {
        "id": "strategies",
        "title": "Strategies"
      },
      "h3": {
        "id": "exponential_backoff",
        "title": "exponential_backoff"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.fallback-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/fallback",
    "pathname": "/ref/llm-client-strategies/fallback",
    "title": "fallback",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> SuperDuperClient {\n  provider fallback\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}"
      }
    ],
    "content": "You can use the fallback provider to add more resilliancy to your application.\nA fallback will attempt to use the first client, and if it fails, it will try the second client, and so on.\n\n\nYou can nest fallbacks inside of other fallbacks."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.fallback-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/fallback",
    "pathname": "/ref/llm-client-strategies/fallback",
    "title": "Options",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#options",
    "content": "The list of client names to try in order. Cannot be empty.",
    "hierarchy": {
      "h0": {
        "title": "fallback"
      },
      "h2": {
        "id": "options",
        "title": "Options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.fallback-retry_policy-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/fallback",
    "pathname": "/ref/llm-client-strategies/fallback",
    "title": "retry_policy",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#retry_policy",
    "content": "Like any other client, you can specify a retry policy for the fallback client. See retry_policy for more information.\nThe retry policy will test the fallback itself, after the entire strategy has failed.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> SuperDuperClient {\n  provider fallback\n  retry_policy MyRetryPolicy\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "fallback"
      },
      "h2": {
        "id": "retry_policy",
        "title": "retry_policy"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.fallback-nesting-multiple-fallbacks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/fallback",
    "pathname": "/ref/llm-client-strategies/fallback",
    "title": "Nesting multiple fallbacks",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#nesting-multiple-fallbacks",
    "content": "You can nest multiple fallbacks inside of each other. The fallbacks will just chain as you would expect.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> SuperDuperClient {\n  provider fallback\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n\nclient<llm> MegaClient {\n  provider fallback\n  options {\n    strategy [\n      SuperDuperClient\n      ClientD\n    ]\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "fallback"
      },
      "h2": {
        "id": "nesting-multiple-fallbacks",
        "title": "Nesting multiple fallbacks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.round-robin-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/round-robin",
    "pathname": "/ref/llm-client-strategies/round-robin",
    "title": "round-robin",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider round-robin\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}"
      }
    ],
    "content": "The round_robin provider allows you to distribute requests across multiple clients in a round-robin fashion. After each call, the next client in the list will be used."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.round-robin-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/round-robin",
    "pathname": "/ref/llm-client-strategies/round-robin",
    "title": "Options",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#options",
    "content": "The list of client names to try in order. Cannot be empty.\n\n\nThe index of the client to start with.\nDefault is random(0, len(strategy))\nIn the BAML Playground, Default is 0.",
    "hierarchy": {
      "h0": {
        "title": "round-robin"
      },
      "h2": {
        "id": "options",
        "title": "Options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.round-robin-retry_policy-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/round-robin",
    "pathname": "/ref/llm-client-strategies/round-robin",
    "title": "retry_policy",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#retry_policy",
    "content": "When using a retry_policy with a round-robin client, it will rotate the strategy list after each retry.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider round-robin\n  retry_policy MyRetryPolicy\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "round-robin"
      },
      "h2": {
        "id": "retry_policy",
        "title": "retry_policy"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.llm-client-strategies.round-robin-nesting-multiple-round-robin-clients-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/llm-client-strategies/round-robin",
    "pathname": "/ref/llm-client-strategies/round-robin",
    "title": "Nesting multiple round-robin clients",
    "breadcrumb": [
      {
        "title": "LLM Client Strategies",
        "pathname": "/ref/llm-client-strategies"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#nesting-multiple-round-robin-clients",
    "content": "You can nest multiple round-robin clients inside of each other. The round-robin as you would expect.",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "BAML",
        "code": "client<llm> MyClient {\n  provider round-robin\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n\nclient<llm> MegaClient {\n  provider round-robin\n  options {\n    strategy [\n      MyClient\n      ClientD\n      ClientE\n    ]\n  }\n}\n\n// Calling MegaClient will call:\n// MyClient(ClientA)\n// ClientD\n// ClientE\n// MyClient(ClientB)\n// etc."
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "round-robin"
      },
      "h2": {
        "id": "nesting-multiple-round-robin-clients",
        "title": "Nesting multiple round-robin clients"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "TypeBuilder",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "meta": "{4}",
        "code": "enum Category {\n  RED\n  BLUE\n  @@dynamic  // Makes this enum modifiable at runtime\n}\n\nfunction Categorize(text: string) -> Category {\n  prompt #\"\n    Categorize this text:\n    {{ text }}\n\n    {{ ctx.output_format }}\n  \"#\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\n# Create a TypeBuilder instance\ntb = TypeBuilder()\n\n# Add new values to the Category enum\ntb.Category.add_value('GREEN') \ntb.Category.add_value('YELLOW')\n\n# Pass the typebuilder when calling the function\nresult = await b.Categorize(\"The sun is bright\", {\"tb\": tb})\n# result can now be RED, BLUE, GREEN, or YELLOW"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { TypeBuilder } from '../baml_client/type_builder'\nimport { b } from '../baml_client'\n\n// Create a TypeBuilder instance\nconst tb = new TypeBuilder()\n\n// Add new values to the Category enum\ntb.Category.addValue('GREEN')\ntb.Category.addValue('YELLOW')\n\n// Pass the typebuilder when calling the function\nconst result = await b.Categorize(\"The sun is bright\", { tb })\n// result can now be RED, BLUE, GREEN, or YELLOW"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative 'baml_client/client'\n\n# Create a TypeBuilder instance\ntb = Baml::TypeBuilder.new\n\n# Add new values to the Category enum\ntb.Category.add_value('GREEN')\ntb.Category.add_value('YELLOW')\n\n# Pass the typebuilder when calling the function\nresult = Baml::Client.categorize(text: \"The sun is bright\", baml_options: { tb: tb })\n# result can now be RED, BLUE, GREEN, or YELLOW"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "from baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\n# Create a TypeBuilder instance\ntb = TypeBuilder()\n\n# Add new values to the Category enum\ntb.Category.add_value('GREEN') \ntb.Category.add_value('YELLOW')\n\n# Pass the typebuilder when calling the function\nresult = await b.Categorize(\"The sun is bright\", {\"tb\": tb})\n# result can now be RED, BLUE, GREEN, or YELLOW"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "import { TypeBuilder } from '../baml_client/type_builder'\nimport { b } from '../baml_client'\n\n// Create a TypeBuilder instance\nconst tb = new TypeBuilder()\n\n// Add new values to the Category enum\ntb.Category.addValue('GREEN')\ntb.Category.addValue('YELLOW')\n\n// Pass the typebuilder when calling the function\nconst result = await b.Categorize(\"The sun is bright\", { tb })\n// result can now be RED, BLUE, GREEN, or YELLOW"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "require_relative 'baml_client/client'\n\n# Create a TypeBuilder instance\ntb = Baml::TypeBuilder.new\n\n# Add new values to the Category enum\ntb.Category.add_value('GREEN')\ntb.Category.add_value('YELLOW')\n\n# Pass the typebuilder when calling the function\nresult = Baml::Client.categorize(text: \"The sun is bright\", baml_options: { tb: tb })\n# result can now be RED, BLUE, GREEN, or YELLOW"
      }
    ],
    "content": "TypeBuilder is used to create or modify output schemas at runtime. It's particularly useful when you have dynamic output structures that can't be determined at compile time - like categories from a database or user-provided schemas.\nHere's a simple example of using TypeBuilder to add new enum values before calling a BAML function:\nBAML Code\nRuntime Usage"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-dynamic-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Dynamic Types",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dynamic-types",
    "content": "There are two ways to use TypeBuilder:\nModifying existing BAML types marked with @@dynamic\n\nCreating entirely new types at runtime",
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "dynamic-types",
        "title": "Dynamic Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-modifying-existing-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Modifying Existing Types",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#modifying-existing-types",
    "content": "To modify an existing BAML type, mark it with @@dynamic:\n\n\nRuntime Usage\n\n\n\n\nRuntime Usage",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "class User {\n  name string\n  age int\n  @@dynamic  // Allow adding more properties\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\ntb.User.add_property('email', tb.string())\ntb.User.add_property('address', tb.string())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\ntb.User.addProperty('email', tb.string())\ntb.User.addProperty('address', tb.string())"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.User.add_property('email', tb.string)\ntb.User.add_property('address', tb.string)"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\ntb.User.add_property('email', tb.string())\ntb.User.add_property('address', tb.string())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\ntb.User.addProperty('email', tb.string())\ntb.User.addProperty('address', tb.string())"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.User.add_property('email', tb.string)\ntb.User.add_property('address', tb.string)"
      },
      {
        "lang": "baml",
        "code": "class User {\n  name string\n  age int\n  @@dynamic  // Allow adding more properties\n}"
      },
      {
        "lang": "baml",
        "code": "enum Category {\n  VALUE1\n  VALUE2\n  @@dynamic  // Allow adding more values\n}"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\ntb.Category.add_value('VALUE3')\ntb.Category.add_value('VALUE4')"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\ntb.Category.addValue('VALUE3')\ntb.Category.addValue('VALUE4')"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.Category.add_value('VALUE3')\ntb.Category.add_value('VALUE4')"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\ntb.Category.add_value('VALUE3')\ntb.Category.add_value('VALUE4')"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\ntb.Category.addValue('VALUE3')\ntb.Category.addValue('VALUE4')"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.Category.add_value('VALUE3')\ntb.Category.add_value('VALUE4')"
      },
      {
        "lang": "baml",
        "code": "enum Category {\n  VALUE1\n  VALUE2\n  @@dynamic  // Allow adding more values\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "dynamic-types",
        "title": "Dynamic Types"
      },
      "h3": {
        "id": "modifying-existing-types",
        "title": "Modifying Existing Types"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-creating-new-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Creating New Types",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#creating-new-types",
    "content": "You can also create entirely new types at runtime:",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\n\n# Create a new enum\nhobbies = tb.add_enum(\"Hobbies\")\nhobbies.add_value(\"Soccer\")\nhobbies.add_value(\"Reading\")\n\n# Create a new class\naddress = tb.add_class(\"Address\") \naddress.add_property(\"street\", tb.string())\naddress.add_property(\"city\", tb.string())\n\n# Attach new types to existing BAML type\ntb.User.add_property(\"hobbies\", hobbies.type().list())\ntb.User.add_property(\"address\", address.type())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\n\n// Create a new enum\nconst hobbies = tb.addEnum(\"Hobbies\")\nhobbies.addValue(\"Soccer\")\nhobbies.addValue(\"Reading\")\n\n// Create a new class\nconst address = tb.addClass(\"Address\")\naddress.addProperty(\"street\", tb.string())\naddress.addProperty(\"city\", tb.string())\n\n// Attach new types to existing BAML type\ntb.User.addProperty(\"hobbies\", hobbies.type().list())\ntb.User.addProperty(\"address\", address.type())"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\n\n# Create a new enum\nhobbies = tb.add_enum(\"Hobbies\")\nhobbies.add_value(\"Soccer\")\nhobbies.add_value(\"Reading\")\n\n# Create a new class\naddress = tb.add_class(\"Address\")\naddress.add_property(\"street\", tb.string)\naddress.add_property(\"city\", tb.string)\n\n# Attach new types to existing BAML type\ntb.User.add_property(\"hobbies\", hobbies.type.list)\ntb.User.add_property(\"address\", address.type)"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\n\n# Create a new enum\nhobbies = tb.add_enum(\"Hobbies\")\nhobbies.add_value(\"Soccer\")\nhobbies.add_value(\"Reading\")\n\n# Create a new class\naddress = tb.add_class(\"Address\") \naddress.add_property(\"street\", tb.string())\naddress.add_property(\"city\", tb.string())\n\n# Attach new types to existing BAML type\ntb.User.add_property(\"hobbies\", hobbies.type().list())\ntb.User.add_property(\"address\", address.type())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\n\n// Create a new enum\nconst hobbies = tb.addEnum(\"Hobbies\")\nhobbies.addValue(\"Soccer\")\nhobbies.addValue(\"Reading\")\n\n// Create a new class\nconst address = tb.addClass(\"Address\")\naddress.addProperty(\"street\", tb.string())\naddress.addProperty(\"city\", tb.string())\n\n// Attach new types to existing BAML type\ntb.User.addProperty(\"hobbies\", hobbies.type().list())\ntb.User.addProperty(\"address\", address.type())"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\n\n# Create a new enum\nhobbies = tb.add_enum(\"Hobbies\")\nhobbies.add_value(\"Soccer\")\nhobbies.add_value(\"Reading\")\n\n# Create a new class\naddress = tb.add_class(\"Address\")\naddress.add_property(\"street\", tb.string)\naddress.add_property(\"city\", tb.string)\n\n# Attach new types to existing BAML type\ntb.User.add_property(\"hobbies\", hobbies.type.list)\ntb.User.add_property(\"address\", address.type)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "dynamic-types",
        "title": "Dynamic Types"
      },
      "h3": {
        "id": "creating-new-types",
        "title": "Creating New Types"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-type-builders-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Type Builders",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#type-builders",
    "content": "TypeBuilder provides methods for building different kinds of types:\nMethod Description Example \nstring() Creates a string type tb.string() \nint() Creates an integer type tb.int() \nfloat() Creates a float type tb.float() \nbool() Creates a boolean type tb.bool() \nlist() Makes a type into a list tb.string().list() \noptional() Makes a type optional tb.string().optional()",
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "type-builders",
        "title": "Type Builders"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-adding-descriptions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Adding Descriptions",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#adding-descriptions",
    "content": "You can add descriptions to properties and enum values to help guide the LLM:",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\n\n# Add description to a property\ntb.User.add_property(\"email\", tb.string()) \\\n   .description(\"User's primary email address\")\n\n# Add description to an enum value \ntb.Category.add_value(\"URGENT\") \\\n   .description(\"Needs immediate attention\")"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\n\n// Add description to a property\ntb.User.addProperty(\"email\", tb.string())\n   .description(\"User's primary email address\")\n\n// Add description to an enum value\ntb.Category.addValue(\"URGENT\")\n   .description(\"Needs immediate attention\")"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\n\n# Add description to a property\ntb.User.add_property(\"email\", tb.string)\n   .description(\"User's primary email address\")\n\n# Add description to an enum value\ntb.Category.add_value(\"URGENT\")\n   .description(\"Needs immediate attention\")"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\n\n# Add description to a property\ntb.User.add_property(\"email\", tb.string()) \\\n   .description(\"User's primary email address\")\n\n# Add description to an enum value \ntb.Category.add_value(\"URGENT\") \\\n   .description(\"Needs immediate attention\")"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\n\n// Add description to a property\ntb.User.addProperty(\"email\", tb.string())\n   .description(\"User's primary email address\")\n\n// Add description to an enum value\ntb.Category.addValue(\"URGENT\")\n   .description(\"Needs immediate attention\")"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\n\n# Add description to a property\ntb.User.add_property(\"email\", tb.string)\n   .description(\"User's primary email address\")\n\n# Add description to an enum value\ntb.Category.add_value(\"URGENT\")\n   .description(\"Needs immediate attention\")"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "adding-descriptions",
        "title": "Adding Descriptions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-common-patterns-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Common Patterns",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#common-patterns",
    "content": "Here are some common patterns when using TypeBuilder:\nDynamic Categories: When categories come from a database or external source\n\n\n\n\nForm Fields: When extracting dynamic form fields\n\n\n\n\nOptional Properties: When some fields might not be present\n\n\n\n\n\n\nAll types added through TypeBuilder must be connected to the return type of your BAML function. Standalone types that aren't referenced won't affect the output schema.",
    "code_snippets": [
      {
        "lang": "python",
        "meta": "Python",
        "code": "categories = fetch_categories_from_db()\ntb = TypeBuilder()\nfor category in categories:\n    tb.Category.add_value(category)"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const categories = await fetchCategoriesFromDb()\nconst tb = new TypeBuilder()\ncategories.forEach(category => {\n    tb.Category.addValue(category)\n})"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "categories = fetch_categories_from_db\ntb = Baml::TypeBuilder.new\ncategories.each do |category|\n    tb.Category.add_value(category)\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "categories = fetch_categories_from_db()\ntb = TypeBuilder()\nfor category in categories:\n    tb.Category.add_value(category)"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const categories = await fetchCategoriesFromDb()\nconst tb = new TypeBuilder()\ncategories.forEach(category => {\n    tb.Category.addValue(category)\n})"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "categories = fetch_categories_from_db\ntb = Baml::TypeBuilder.new\ncategories.each do |category|\n    tb.Category.add_value(category)\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "fields = get_form_fields()\ntb = TypeBuilder()\nform = tb.add_class(\"Form\")\nfor field in fields:\n    form.add_property(field.name, tb.string())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const fields = getFormFields()\nconst tb = new TypeBuilder()\nconst form = tb.addClass(\"Form\")\nfields.forEach(field => {\n    form.addProperty(field.name, tb.string())\n})"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "fields = get_form_fields\ntb = Baml::TypeBuilder.new\nform = tb.add_class(\"Form\")\nfields.each do |field|\n    form.add_property(field.name, tb.string)\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "fields = get_form_fields()\ntb = TypeBuilder()\nform = tb.add_class(\"Form\")\nfor field in fields:\n    form.add_property(field.name, tb.string())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const fields = getFormFields()\nconst tb = new TypeBuilder()\nconst form = tb.addClass(\"Form\")\nfields.forEach(field => {\n    form.addProperty(field.name, tb.string())\n})"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "fields = get_form_fields\ntb = Baml::TypeBuilder.new\nform = tb.add_class(\"Form\")\nfields.each do |field|\n    form.add_property(field.name, tb.string)\nend"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\ntb.User.add_property(\"middle_name\", tb.string().optional())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\ntb.User.addProperty(\"middle_name\", tb.string().optional())"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.User.add_property(\"middle_name\", tb.string.optional)"
      },
      {
        "lang": "python",
        "meta": "Python",
        "code": "tb = TypeBuilder()\ntb.User.add_property(\"middle_name\", tb.string().optional())"
      },
      {
        "lang": "typescript",
        "meta": "TypeScript",
        "code": "const tb = new TypeBuilder()\ntb.User.addProperty(\"middle_name\", tb.string().optional())"
      },
      {
        "lang": "ruby",
        "meta": "Ruby",
        "code": "tb = Baml::TypeBuilder.new\ntb.User.add_property(\"middle_name\", tb.string.optional)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "common-patterns",
        "title": "Common Patterns"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.type-builder-future-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/baml-client/type-builder",
    "pathname": "/ref/baml-client/type-builder",
    "title": "Future Features",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#future-features",
    "content": "We're working on additional features for TypeBuilder:\nJSON Schema support (awaiting use cases)\n\nOpenAPI schema integration\n\nPydantic model support\n\n\nIf you're interested in these features, please join the discussion in our GitHub issues.",
    "hierarchy": {
      "h0": {
        "title": "TypeBuilder"
      },
      "h2": {
        "id": "future-features",
        "title": "Future Features"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.client-registry-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/ref/baml-client/client-registry",
    "title": "Client Registry",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "import os\nfrom baml_py import ClientRegistry\n\nasync def run():\n    cr = ClientRegistry()\n    # Creates a new client\n    cr.add_llm_client(name='MyAmazingClient', provider='openai', options={\n        \"model\": \"gpt-4o\",\n        \"temperature\": 0.7,\n        \"api_key\": os.environ.get('OPENAI_API_KEY')\n    })\n    # Sets MyAmazingClient as the primary client\n    cr.set_primary('MyAmazingClient')\n\n    # ExtractResume will now use MyAmazingClient as the calling client\n    res = await b.ExtractResume(\"...\", { \"client_registry\": cr })"
      },
      {
        "lang": "python",
        "code": "import os\nfrom baml_py import ClientRegistry\n\nasync def run():\n    cr = ClientRegistry()\n    # Creates a new client\n    cr.add_llm_client(name='MyAmazingClient', provider='openai', options={\n        \"model\": \"gpt-4o\",\n        \"temperature\": 0.7,\n        \"api_key\": os.environ.get('OPENAI_API_KEY')\n    })\n    # Sets MyAmazingClient as the primary client\n    cr.set_primary('MyAmazingClient')\n\n    # ExtractResume will now use MyAmazingClient as the calling client\n    res = await b.ExtractResume(\"...\", { \"client_registry\": cr })"
      },
      {
        "lang": "typescript",
        "code": "import { ClientRegistry } from '@boundaryml/baml'\n\nasync function run() {\n    const cr = new ClientRegistry()\n    // Creates a new client\n    cr.addLlmClient({ name: 'MyAmazingClient', provider: 'openai', options: {\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        api_key: process.env.OPENAI_API_KEY\n    }})\n    // Sets MyAmazingClient as the primary client\n    cr.setPrimary('MyAmazingClient')\n\n    // ExtractResume will now use MyAmazingClient as the calling client\n    const res = await b.ExtractResume(\"...\", { clientRegistry: cr })\n}"
      },
      {
        "lang": "typescript",
        "code": "import { ClientRegistry } from '@boundaryml/baml'\n\nasync function run() {\n    const cr = new ClientRegistry()\n    // Creates a new client\n    cr.addLlmClient({ name: 'MyAmazingClient', provider: 'openai', options: {\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        api_key: process.env.OPENAI_API_KEY\n    }})\n    // Sets MyAmazingClient as the primary client\n    cr.setPrimary('MyAmazingClient')\n\n    // ExtractResume will now use MyAmazingClient as the calling client\n    const res = await b.ExtractResume(\"...\", { clientRegistry: cr })\n}"
      },
      {
        "lang": "ruby",
        "code": "require_relative \"baml_client/client\"\n\ndef run\n  cr = Baml::ClientRegistry.new\n\n  # Creates a new client\n  cr.add_llm_client(\n    name: 'MyAmazingClient',\n    provider: 'openai',\n    options: {\n      model: 'gpt-4o',\n      temperature: 0.7,\n      api_key: ENV['OPENAI_API_KEY']\n    }\n  )\n\n  # Sets MyAmazingClient as the primary client\n  cr.set_primary('MyAmazingClient')\n\n  # ExtractResume will now use MyAmazingClient as the calling client\n  res = Baml.Client.extract_resume(input: '...', baml_options: { client_registry: cr })\nend\n\n# Call the asynchronous function\nrun"
      },
      {
        "lang": "ruby",
        "code": "require_relative \"baml_client/client\"\n\ndef run\n  cr = Baml::ClientRegistry.new\n\n  # Creates a new client\n  cr.add_llm_client(\n    name: 'MyAmazingClient',\n    provider: 'openai',\n    options: {\n      model: 'gpt-4o',\n      temperature: 0.7,\n      api_key: ENV['OPENAI_API_KEY']\n    }\n  )\n\n  # Sets MyAmazingClient as the primary client\n  cr.set_primary('MyAmazingClient')\n\n  # ExtractResume will now use MyAmazingClient as the calling client\n  res = Baml.Client.extract_resume(input: '...', baml_options: { client_registry: cr })\nend\n\n# Call the asynchronous function\nrun"
      },
      {
        "lang": "json",
        "code": "{\n    \"resume\": \"Vaibhav Gupta\",\n    \"__baml_options__\": {\n        \"client_registry\": {\n            \"clients\": [\n                {\n                    \"name\": \"OpenAI\",\n                    \"provider\": \"openai\",\n                    \"retry_policy\": null,\n                    \"options\": {\n                        \"model\": \"gpt-4o-mini\",\n                        \"api_key\": \"sk-...\"\n                    }\n                }\n            ],\n            \"primary\": \"OpenAI\"\n        }\n    }\n}"
      },
      {
        "lang": "sh",
        "code": "curl -X POST http://localhost:2024/call/ExtractResume \\\n    -H 'Content-Type: application/json' -d @body.json"
      },
      {
        "lang": "json",
        "code": "{\n    \"resume\": \"Vaibhav Gupta\",\n    \"__baml_options__\": {\n        \"client_registry\": {\n            \"clients\": [\n                {\n                    \"name\": \"OpenAI\",\n                    \"provider\": \"openai\",\n                    \"retry_policy\": null,\n                    \"options\": {\n                        \"model\": \"gpt-4o-mini\",\n                        \"api_key\": \"sk-...\"\n                    }\n                }\n            ],\n            \"primary\": \"OpenAI\"\n        }\n    }\n}"
      },
      {
        "lang": "sh",
        "code": "curl -X POST http://localhost:2024/call/ExtractResume \\\n    -H 'Content-Type: application/json' -d @body.json"
      }
    ],
    "content": "If you need to modify the model / parameters for an LLM client at runtime, you can modify the ClientRegistry for any specified function.\n\n\n\n\n\n\n\n\n\n\nThe API supports passing client registry as a field on __baml_options__ in the request body.\nExample request body:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.client-registry-clientregistry-interface-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/ref/baml-client/client-registry",
    "title": "ClientRegistry Interface",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#clientregistry-interface",
    "content": "Note: ClientRegistry is imported from baml_py in Python and @boundaryml/baml in TypeScript, not baml_client.\nAs we mature ClientRegistry, we will add a more type-safe and ergonomic interface directly in baml_client. See Github issue #766.\nMethods use snake_case in Python and camelCase in TypeScript.",
    "hierarchy": {
      "h0": {
        "title": "Client Registry"
      },
      "h2": {
        "id": "clientregistry-interface",
        "title": "ClientRegistry Interface"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.client-registry-add_llm_client--addllmclient-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/ref/baml-client/client-registry",
    "title": "add_llm_client / addLlmClient",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#add_llm_client--addllmclient",
    "content": "A function to add an LLM client to the registry.\n\n\nThe name of the client.\n\n\nUsing the exact same name as a client also defined in .baml files overwrites the existing client whenever the ClientRegistry is used.\n\n\nThis configures which provider to use. The provider is responsible for handling the actual API calls to the LLM service. The provider is a required field.\nThe configuration modifies the URL request BAML runtime makes.\nProvider Name Docs Notes \nanthropic Anthropic  \naws-bedrock AWS Bedrock  \nazure-openai Azure OpenAI  \ngoogle-ai Google AI  \nopenai OpenAI  \nopenai-generic OpenAI (generic) Any model provider that supports an OpenAI-compatible API \nvertex-ai Vertex AI  \n\nWe also have some special providers that allow composing clients together:\nProvider Name Docs Notes \nfallback Fallback Used to chain models conditional on failures \nround-robin Round Robin Used to load balance \n\n\n\nThese vary per provider. Please see provider specific documentation for more\ninformation. Generally they are pass through options to the POST request made\nto the LLM.\n\n\nThe name of a retry policy that is already defined in a .baml file. See Retry Policies.",
    "hierarchy": {
      "h0": {
        "title": "Client Registry"
      },
      "h2": {
        "id": "clientregistry-interface",
        "title": "ClientRegistry Interface"
      },
      "h3": {
        "id": "add_llm_client--addllmclient",
        "title": "add_llm_client / addLlmClient"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.baml-client.client-registry-set_primary--setprimary-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guide/baml-advanced/llm-client-registry",
    "pathname": "/ref/baml-client/client-registry",
    "title": "set_primary / setPrimary",
    "breadcrumb": [
      {
        "title": "baml_client",
        "pathname": "/ref/baml-client"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#set_primary--setprimary",
    "content": "This sets the client for the function to use. (i.e. replaces the client property in a function)\n\n\nThe name of the client to use.\nThis can be a new client that was added with add_llm_client or an existing client that is already in a .baml file.",
    "hierarchy": {
      "h0": {
        "title": "Client Registry"
      },
      "h2": {
        "id": "clientregistry-interface",
        "title": "ClientRegistry Interface"
      },
      "h3": {
        "id": "set_primary--setprimary",
        "title": "set_primary / setPrimary"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "What is Jinja / Cookbook",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "BAML Prompt strings are essentially Minijinja templates, which offer the ability to express logic and data manipulation within strings. Jinja is a very popular and mature templating language amongst Python developers, so Github Copilot or another LLM can already help you write most of the logic you want."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-jinja-cookbook-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Jinja Cookbook",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#jinja-cookbook",
    "content": "When in doubt -- use the BAML VSCode Playground preview. It will show you the fully rendered prompt, even when it has complex logic.",
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-basic-syntax-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Basic Syntax",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#basic-syntax",
    "content": "{% ... %}: Use for executing statements such as for-loops or conditionals.\n\n{{ ... }}: Use for outputting expressions or variables.\n\n{# ... #}: Use for comments within the template, which will not be rendered.",
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      },
      "h3": {
        "id": "basic-syntax",
        "title": "Basic Syntax"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-loops--iterating-over-lists-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Loops / Iterating Over Lists",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#loops--iterating-over-lists",
    "content": "Here's how you can iterate over a list of items, accessing each item's attributes:",
    "code_snippets": [
      {
        "lang": "jinja",
        "meta": "Jinja",
        "code": "function MyFunc(messages: Message[]) -> string {\n  prompt #\"\n    {% for message in messages %}\n      {{ message.user_name }}: {{ message.content }}\n    {% endfor %}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      },
      "h3": {
        "id": "loops--iterating-over-lists",
        "title": "Loops / Iterating Over Lists"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-conditional-statements-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Conditional Statements",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#conditional-statements",
    "content": "Use conditional statements to control the flow and output of your templates based on conditions:",
    "code_snippets": [
      {
        "lang": "jinja",
        "meta": "Jinja",
        "code": "function MyFunc(user: User) -> string {\n  prompt #\"\n    {% if user.is_active %}\n      Welcome back, {{ user.name }}!\n    {% else %}\n      Please activate your account.\n    {% endif %}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      },
      "h3": {
        "id": "conditional-statements",
        "title": "Conditional Statements"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-setting-variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Setting Variables",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setting-variables",
    "content": "You can define and use variables within your templates to simplify expressions or manage data:",
    "code_snippets": [
      {
        "lang": "jinja",
        "code": "function MyFunc(items: Item[]) -> string {\n  prompt #\"\n    {% set total_price = 0 %}\n    {% for item in items %}\n      {% set total_price = total_price + item.price %}\n    {% endfor %}\n    Total price: {{ total_price }}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      },
      "h3": {
        "id": "setting-variables",
        "title": "Setting Variables"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-including-other-templates-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Including other Templates",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#including-other-templates",
    "content": "To promote reusability, you can include other templates within a template. See template strings:",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "template_string PrintUserInfo(arg1: string, arg2: User) #\"\n  {{ arg1 }}\n  The user's name is: {{ arg2.name }}\n\"#\n\nfunction MyFunc(arg1: string, user: User) -> string {\n  prompt #\"\n    Here is the user info:\n    {{ PrintUserInfo(arg1, user) }}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      },
      "h3": {
        "id": "including-other-templates",
        "title": "Including other Templates"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.what-is-jinja-built-in-filters-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/what-is-jinja",
    "pathname": "/ref/prompt-syntax/what-is-jinja",
    "title": "Built-in filters",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#built-in-filters",
    "content": "See jinja docs",
    "hierarchy": {
      "h0": {
        "title": "What is Jinja / Cookbook"
      },
      "h2": {
        "id": "jinja-cookbook",
        "title": "Jinja Cookbook"
      },
      "h3": {
        "id": "built-in-filters",
        "title": "Built-in filters"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.ctx-output-format-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/ctx-output-format",
    "pathname": "/ref/prompt-syntax/ctx-output-format",
    "title": "ctx.output_format",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "class Resume {\n  name string\n  education Education[]\n}\nfunction ExtractResume(resume_text: string) -> Resume {\n  prompt #\"\n    Extract this resume:\n    ---\n    {{ resume_text }}\n    ---\n\n    {{ ctx.output_format }}\n  \"#\n}"
      },
      {
        "lang": "text",
        "code": "Extract this resume\n---\nAaron V.\nBachelors CS, 2015\nUT Austin\n---\n\nAnswer in JSON using this schema: \n{\n  name: string\n  education: [\n    {\n      school: string\n      graduation_year: string\n    }\n  ]\n}"
      }
    ],
    "content": "{{ ctx.output_format }} is used within a prompt template (or in any template_string) to print out the function's output schema into the prompt. It describes to the LLM how to generate a structure BAML can parse (usually JSON).\nHere's an example of a function with {{ ctx.output_format }}, and how it gets rendered by BAML before sending it to the LLM.\nBAML Prompt\nRendered prompt"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.ctx-output-format-controlling-the-output_format-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/ctx-output-format",
    "pathname": "/ref/prompt-syntax/ctx-output-format",
    "title": "Controlling the output_format",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#controlling-the-output_format",
    "content": "ctx.output_format can also be called as a function with parameters to customize how the schema is printed, like this:\nHere's the parameters:\n\n\nThe prefix instruction to use before printing out the schema.\nBAML's default prefix varies based on the function's return type.\nFuction return type Default Prefix \nPrimitive (String)  \nPrimitive (Other) Answer as a:  \nEnum Answer with any of the categories:\\n \nClass Answer in JSON using this schema:\\n \nList Answer with a JSON Array using this schema:\\n \nUnion Answer in JSON using any of these schemas:\\n \nOptional Answer in JSON using this schema:\\n \n\n\n\nWhether to inline the enum definitions in the schema, or print them above. Default: false\nInlined\nhoisted\n\n\nBAML will always hoist if you add a description to any of the enum values.\n\nDefault: or\nIf a type is a union like string | int or an optional like string?, this indicates how it's rendered.\nBAML renders it as property: string or null as we have observed some LLMs have trouble identifying what property: string | null means (and are better with plain english).\nYou can always set it to | or something else for a specific model you use.",
    "code_snippets": [
      {
        "lang": "text",
        "code": "\n{{ ctx.output_format(prefix=\"If you use this schema correctly and I'll tip $400:\\n\", always_hoist_enums=true)}}"
      },
      {
        "lang": "text",
        "code": "Answer in this schema correctly I'll tip $400:\n{\n  ...\n}"
      },
      {
        "lang": "text",
        "code": "Answer in this schema correctly I'll tip $400:\n{\n  ...\n}"
      },
      {
        "code": "\nAnswer in this json schema:\n{\n  categories: \"ONE\" | \"TWO\" | \"THREE\"\n}"
      },
      {
        "code": "MyCategory\n---\nONE\nTWO\nTHREE\n\nAnswer in this json schema:\n{\n  categories: MyCategory\n}"
      },
      {
        "code": "\nAnswer in this json schema:\n{\n  categories: \"ONE\" | \"TWO\" | \"THREE\"\n}"
      },
      {
        "code": "MyCategory\n---\nONE\nTWO\nTHREE\n\nAnswer in this json schema:\n{\n  categories: MyCategory\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ctx.output_format"
      },
      "h2": {
        "id": "controlling-the-output_format",
        "title": "Controlling the output_format"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.ctx-output-format-why-baml-doesnt-use-json-schema-format-in-prompts-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/ctx-output-format",
    "pathname": "/ref/prompt-syntax/ctx-output-format",
    "title": "Why BAML doesn't use JSON schema format in prompts",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#why-baml-doesnt-use-json-schema-format-in-prompts",
    "content": "BAML uses \"type definitions\" or \"jsonish\" format instead of the long-winded json-schema format.\nThe tl;dr is that json schemas are\n4x more inefficient than \"type definitions\".\n\nvery unreadable by humans (and hence models)\n\nperform worse than type definitions (especially on deeper nested objects or smaller models)\n\n\nRead our full article on json schema vs type definitions",
    "hierarchy": {
      "h0": {
        "title": "ctx.output_format"
      },
      "h2": {
        "id": "why-baml-doesnt-use-json-schema-format-in-prompts",
        "title": "Why BAML doesn't use JSON schema format in prompts"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.ctx-client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/ctx-client",
    "pathname": "/ref/prompt-syntax/ctx-client",
    "title": "ctx (accessing metadata)",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "If you try rendering {{ ctx }} into the prompt (literally just write that out!), you'll see all the metadata we inject to run this prompt within the playground preview.\nIn the earlier tutorial we mentioned ctx.output_format, which contains the schema, but you can also access client information:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.ctx-client-usecase-conditionally-render-based-on-client-provider-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/ctx-client",
    "pathname": "/ref/prompt-syntax/ctx-client",
    "title": "Usecase: Conditionally render based on client provider",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usecase-conditionally-render-based-on-client-provider",
    "content": "In this example, we render the list of messages in XML tags if the provider is Anthropic (as they recommend using them as delimiters). See also  template_string as it's used in here.",
    "code_snippets": [
      {
        "lang": "baml",
        "code": "template_string RenderConditionally(messages: Message[]) #\"\n  {% for message in messages %}\n    {%if ctx.client.provider == \"anthropic\" %}\n      <Message>{{ message.user_name }}: {{ message.content }}</Message>\n    {% else %}\n      {{ message.user_name }}: {{ message.content }}\n    {% endif %}\n  {% endfor %}\n\"#\n\nfunction MyFuncWithGPT4(messages: Message[]) -> string {\n  client GPT4o\n  prompt #\"\n    {{ RenderConditionally(messages)}}\n  \"#\n}\n\nfunction MyFuncWithAnthropic(messages: Message[]) -> string {\n  client Claude35\n  prompt #\"\n    {{ RenderConditionally(messages )}}\n  #\"\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ctx (accessing metadata)"
      },
      "h2": {
        "id": "usecase-conditionally-render-based-on-client-provider",
        "title": "Usecase: Conditionally render based on client provider"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.role-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/role",
    "pathname": "/ref/prompt-syntax/role",
    "title": "_.role",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "rust",
        "code": "prompt #\"\n  {{ _.role(\"system\") }} Everything after\n  this element will be a system prompt!\n\n  {{ _.role(\"user\")}} \n  And everything after this\n  will be a user role\n\"#"
      }
    ],
    "content": "BAML prompts are compiled into a messages array (or equivalent) that most LLM providers use:\nBAML Prompt -> [{ role: \"user\": content: \"hi there\"}, { role: \"assistant\", ...}]\nBy default, BAML puts everything into a single message with the system role if available (or whichever one is best for the provider you have selected).\nWhen in doubt, the playground always shows you the current role for each message.\nTo specify a role explicitly, add the {{ _.role(\"user\")}} syntax to the prompt\nTry it out in PromptFiddle\n\n\nBAML may change the default role to user if using specific APIs that only support user prompts, like when using prompts with images.\nWe use _ as the prefix of _.role() since we plan on adding more helpers here in the future."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.role-example----using-_role-in-for-loops-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/role",
    "pathname": "/ref/prompt-syntax/role",
    "title": "Example -- Using _.role() in for-loops",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example----using-_role-in-for-loops",
    "content": "Here's how you can inject a list of user/assistant messages and mark each as a user or assistant role:",
    "code_snippets": [
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "class Message {\n  role string\n  message string\n}\n\nfunction ChatWithAgent(input: Message[]) -> string {\n  client GPT4o\n  prompt #\"\n    {% for m in messages %}\n      {{ _.role(m.role) }}\n      {{ m.message }}\n    {% endfor %}\n  \"#\n}"
      },
      {
        "lang": "rust",
        "meta": "BAML",
        "code": "function ChatMessages(messages: string[]) -> string {\n  client GPT4o\n  prompt #\"\n    {% for m in messages %}\n      {{ _.role(\"user\" if loop.index % 2 == 1 else \"assistant\") }}\n      {{ m }}\n    {% endfor %}\n  \"#\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "_.role"
      },
      "h2": {
        "id": "example----using-_role-in-for-loops",
        "title": "Example -- Using _.role() in for-loops"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.variables-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/variables",
    "pathname": "/ref/prompt-syntax/variables",
    "title": "Variables",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "See template_string to learn how to add variables in .baml files"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.conditionals-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/conditionals",
    "pathname": "/ref/prompt-syntax/conditionals",
    "title": "Conditionals",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "jinja",
        "code": "function MyFunc(user: User) -> string {\n  prompt #\"\n    {% if user.is_active %}\n      Welcome back, {{ user.name }}!\n    {% else %}\n      Please activate your account.\n    {% endif %}\n  \"#\n}"
      }
    ],
    "content": "Use conditional statements to control the flow and output of your templates based on conditions:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.loops-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/loops",
    "pathname": "/ref/prompt-syntax/loops",
    "title": "Loops",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "jinja",
        "code": "function MyFunc(messages: Message[]) -> string {\n  prompt #\"\n    {% for message in messages %}\n      {{ message.user_name }}: {{ message.content }}\n    {% endfor %}\n  \"#\n}"
      }
    ],
    "content": "Here's how you can iterate over a list of items, accessing each item's attributes:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.prompt-syntax.loops-loop-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/prompt-syntax/loops",
    "pathname": "/ref/prompt-syntax/loops",
    "title": "loop",
    "breadcrumb": [
      {
        "title": "Prompt Syntax",
        "pathname": "/ref/prompt-syntax"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#loop",
    "content": "Jinja provides a loop object that can be used to access information about the loop. Here are some of the attributes of the loop object:\nVariable Description \nloop.index The current iteration of the loop. (1 indexed) \nloop.index0 The current iteration of the loop. (0 indexed) \nloop.revindex The number of iterations from the end of the loop (1 indexed) \nloop.revindex0 The number of iterations from the end of the loop (0 indexed) \nloop.first True if first iteration. \nloop.last True if last iteration. \nloop.length The number of items in the sequence. \nloop.cycle A helper function to cycle between a list of sequences. See the explanation below. \nloop.depth Indicates how deep in a recursive loop the rendering currently is. Starts at level 1 \nloop.depth0 Indicates how deep in a recursive loop the rendering currently is. Starts at level 0 \nloop.previtem The item from the previous iteration of the loop. Undefined during the first iteration. \nloop.nextitem The item from the following iteration of the loop. Undefined during the last iteration. \nloop.changed(*val) True if previously called with a different value (or not called at all).",
    "code_snippets": [
      {
        "lang": "jinja2",
        "code": "prompt #\"\n  {% for item in items %}\n    {{ loop.index }}: {{ item }}\n  {% endfor %}\n\"#"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Loops"
      },
      "h2": {
        "id": "loop",
        "title": "loop"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.editor-extension-settings.baml-cli-path-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/editor-extension-settings/baml-cli-path",
    "pathname": "/ref/editor-extension-settings/baml-cli-path",
    "title": "baml.cliPath",
    "breadcrumb": [
      {
        "title": "Editor Extension Settings",
        "pathname": "/ref/editor-extension-settings"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Type Value \nstring | null null \n\nIf set, all generated code will use this instead of the packaged generator shipped with the extension.\n\n\nWe recommend this setting! This prevents mismatches between the VSCode Extension and the installed BAML package."
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.editor-extension-settings.baml-cli-path-usage-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/editor-extension-settings/baml-cli-path",
    "pathname": "/ref/editor-extension-settings/baml-cli-path",
    "title": "Usage",
    "breadcrumb": [
      {
        "title": "Editor Extension Settings",
        "pathname": "/ref/editor-extension-settings"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usage",
    "content": "If you use unix, you can run where baml-cli in your project to figure out what the path is.",
    "code_snippets": [
      {
        "lang": "json",
        "meta": "settings.json",
        "code": "{\n  \"baml.cliPath\": \"/path/to/baml-cli\"\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "baml.cliPath"
      },
      "h2": {
        "id": "usage",
        "title": "Usage"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.editor-extension-settings.baml-generate-code-on-save-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/editor-extension-settings/baml-generate-code-on-save",
    "pathname": "/ref/editor-extension-settings/baml-generate-code-on-save",
    "title": "baml.generateCodeOnSave",
    "breadcrumb": [
      {
        "title": "Editor Extension Settings",
        "pathname": "/ref/editor-extension-settings"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "code": "path/to/baml-cli generate"
      }
    ],
    "content": "Type Default Value \n\"always\" | \"never\" \"always\" \n\nalways: Generate code for baml_client on every save\n\nnever: Do not generate baml_client on any save\n\n\nIf you have a generator of type rest/*, \"always\" will not do any code generation. You will have to manually run:"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.editor-extension-settings.baml-restart-ts-server-on-save-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/editor-extension-settings/baml-restart-ts-server-on-save",
    "pathname": "/ref/editor-extension-settings/baml-restart-ts-server-on-save",
    "title": "baml.restartTSServerOnSave",
    "breadcrumb": [
      {
        "title": "Editor Extension Settings",
        "pathname": "/ref/editor-extension-settings"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Type Default Value \nboolean true \n\ntrue: Automatically restarts the TypeScript Language Server in VSCode when the BAML extension generates the TypeScript baml_client files. This is a workaround for VSCode's issues with recognizing newly added directories and files in the TypeScript Language Server. No-op if not generating TypeScript files.\n\nfalse: Does not automatically restart the TypeScript Server. You may need to manually reload the TS server to ensure it recognizes the new types."
  },
  {
    "objectID": "test:test.com:eaa1074a-b676-4a6b-93df-43c52a64d62f-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/boundary-extraction-api/extract",
    "pathname": "/ref/boundary-extraction-api/extract",
    "title": "Overview",
    "breadcrumb": [
      {
        "title": "Boundary Extraction API",
        "pathname": "/ref/boundary-extraction-api"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "We leveraged our expertise in structured data extraction to create a general purpose extraction API that is independent of BAML.\nIf you are interested in converting PDF documents, invoices, images into readable structured data, this API is for you.\nTo try it out visit our Dashboard v2. Note that this is a different website from the current tracing/observability dashboard (app.boundaryml.com). We are working on unifying the two."
  },
  {
    "objectID": "test:test.com:eaa1074a-b676-4a6b-93df-43c52a64d62f.page:03-reference/extract/examples.mdx",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/boundary-extraction-api/extract/extraction-examples",
    "pathname": "/ref/boundary-extraction-api/extract/extraction-examples",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "Boundary Extraction API",
        "pathname": "/ref/boundary-extraction-api"
      },
      {
        "title": "API Reference",
        "pathname": "/ref/boundary-extraction-api/extract"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.boundary-cloud-api.limits",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/cloud/limits",
    "pathname": "/ref/cloud/limits",
    "title": "Limits",
    "breadcrumb": [
      {
        "title": "Boundary Cloud API",
        "pathname": "/ref/boundary-cloud-api"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.ref.ref.boundary-cloud-api.limits-boundary-functions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/cloud/limits",
    "pathname": "/ref/cloud/limits",
    "title": "Boundary Functions",
    "breadcrumb": [
      {
        "title": "Boundary Cloud API",
        "pathname": "/ref/boundary-cloud-api"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#boundary-functions",
    "content": "baml_src, per-project:\nYou may deploy up to 100MiB of baml_src.\n\n\nEnvironment variables, per-project:\nYou may have up to 1000 environment variables.\n\nYou may have up to 64KiB of data across all environment variables combined.",
    "hierarchy": {
      "h0": {
        "title": "Limits"
      },
      "h2": {
        "id": "boundary-functions",
        "title": "Boundary Functions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Changelog",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "All notable changes to this project will be documented in this file. See conventional commits for commit guidelines."
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation",
    "content": "New Documentation Structure: Introduced version 3 of the documentation, enhancing clarity and organization. (#1118)",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0650---2024-10-31",
        "title": "0.65.0 - 2024-10-31"
      },
      "h3": {
        "id": "documentation",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes",
    "content": "Python Type Handling: Moved Python Checked and Check types into baml_client for better type management. (#1122)\n\nLiteral Input Type Checking: Fixed an issue where literal inputs were not being type-checked correctly. (#1121)",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0650---2024-10-31",
        "title": "0.65.0 - 2024-10-31"
      },
      "h3": {
        "id": "bug-fixes",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-1",
    "content": "Playground Stability: Prevented crashes in the playground due to malformed vertex credentials (#1107) - Samuel Lijin\n\nUnion Handling: Addressed an issue with union types in the schema (#1096) - Greg Hale\n\nWASM Function Signatures: Resolved stack overflow when computing WASM function signatures (#1100) - aaronvg\n\nVSCode Extension: Fixed crashes in the VSCode extension that caused the output panel to open unexpectedly (#1103) - hellovai\n\nStatic Analysis Improvements: Enhanced static analysis on Jinja expressions and regex_match functions (#1102, #1104) - hellovai\n\nCodegen Enhancements: Fixed code generation for Python boolean literals and updated integration tests (#1099) - Antonio Sarosi\n\nEnum Handling: Improved substring alias handling for enums (#1098) - Miguel Cárdenas\n\nSyntax Highlighting: Refined span calculations for Jinja expressions and improved VSCode syntax highlighting with Lezer (#1110) - hellovai\n\nRuby Support: Fixed literal boolean tests for Ruby (#1109) - Antonio Sarosi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0640---2024-10-29",
        "title": "0.64.0 - 2024-10-29"
      },
      "h3": {
        "id": "bug-fixes-1",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features",
    "content": "Constraint Support: Added the ability to define constraints using Jinja expressions (#1006) - Greg Hale\n\nVSCode & Fiddle UI: Introduced a new \"Intro to Checks\" UI for easier onboarding (#1106) - Samuel Lijin\n\nDev Container Configurations: Added Dev Container configurations for streamlined development environments (#1112) - Antonio Sarosi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0640---2024-10-29",
        "title": "0.64.0 - 2024-10-29"
      },
      "h3": {
        "id": "features",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-1",
    "content": "Constraints Documentation: Published new documentation for defining constraints in BAML (#1113) - Greg Hale\n\nDynamic Types Linking: Added cross-links to dynamic types documentation for easier navigation (#1116) - Greg Hale",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0640---2024-10-29",
        "title": "0.64.0 - 2024-10-29"
      },
      "h3": {
        "id": "documentation-1",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous",
    "content": "Code Quality: Improved style and fixed typos in the codebase (#1115) - Greg Hale\n\nParsing Stability: Added logic to prevent assertions from parsing errors and ensured checks no longer affect parsing (#1101) - hellovai\n\nVersion Bump: Bumped version to 0.64.0 (#1114, #ff7e152) - Vaibhav Gupta",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0640---2024-10-29",
        "title": "0.64.0 - 2024-10-29"
      },
      "h3": {
        "id": "miscellaneous",
        "title": "Miscellaneous"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-2-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-2",
    "content": "Fix dynamic enums which already are defined in BAML (#1080) - (22d0f1c) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0630---2024-10-23",
        "title": "0.63.0 - 2024-10-23"
      },
      "h3": {
        "id": "bug-fixes-2",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-1",
    "content": "Updated clients.baml to use the latest sonnet model (#1081) - (71df0b7) - aaronvg\n\nImproved clients.baml generated via baml init (#1089) - (682dd66) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0630---2024-10-23",
        "title": "0.63.0 - 2024-10-23"
      },
      "h3": {
        "id": "features-1",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-2-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-2",
    "content": "Support serializing/deserializing baml_py.Image, baml_py.Audio for pydantic (#1062) - (11cb699) - Samuel Lijin\n\nSupport rendering input classes with aliases (#1045) - (3824cda) - aaronvg\n\nAdd unstable_internal_repr on FunctionResult in python (#1068) - (00082e8) - hellovai\n\nAdd literal support for type_builder (#1069) - (c0085d9) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0620---2024-10-21",
        "title": "0.62.0 - 2024-10-21"
      },
      "h3": {
        "id": "features-2",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-3-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-3",
    "content": "Surface errors in fallbacks containing only erroneous clients (#1061) - (b69ef79) - Greg Hale\n\nFix parser so that we are able to correctly detect sequences of empty strings. (#1048) - (977e277) - hellovai\n\nMake substring match algorithm case insensitive (#1056) - (fa2c477) - Antonio Sarosi\n\nFix vertex-ai citation data being optional (#1058) - (5eae0a7) - aaronvg\n\nFix bug to correctly cast to pydantic types in ambiguous scenarios where BAML knows better (#1059) - (830b0cb) - hellovai\n\nParser: Prefer case sensitive match over case insensitive (#1063) - (cd6b141) - Antonio Sarosi\n\nOnly popup the vscode env var dialog once (#1066) - (1951474) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0620---2024-10-21",
        "title": "0.62.0 - 2024-10-21"
      },
      "h3": {
        "id": "bug-fixes-3",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-2-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-2",
    "content": "Docs for literal types (#1030) - (55e5964) - Antonio Sarosi\n\nContribution guide (#1055) - (f09d943) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0620---2024-10-21",
        "title": "0.62.0 - 2024-10-21"
      },
      "h3": {
        "id": "documentation-2",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-misc-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Misc",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#misc",
    "content": "Fix VSCode metrics (#1044) - (a131336) - hellovai\n\nAdd more test cases for unquoted strings in objects (#1054) - (2d1b700) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0620---2024-10-21",
        "title": "0.62.0 - 2024-10-21"
      },
      "h3": {
        "id": "misc",
        "title": "Misc"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-4-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-4",
    "content": "add musl to the ts release artifacts (#1042) - (e74f3e9) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0611---2024-10-15",
        "title": "0.61.1 - 2024-10-15"
      },
      "h3": {
        "id": "bug-fixes-4",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-3-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-3",
    "content": "Implement literal types (#978) - (9e7431f) - Antonio Sarosi\n\nallow installing the TS library on node-alpine (#1029) - (1c37a0d) - Samuel Lijin\n\nAdd WYSIWYG UI (Swagger UI) to baml-cli dev (#1019) - (0c73cab) - Greg Hale\n\nSuppress streaming for Numbers (#1032) - (3f4621b) - Greg Hale",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0610---2024-10-14",
        "title": "0.61.0 - 2024-10-14"
      },
      "h3": {
        "id": "features-3",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-5-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-5",
    "content": "Add limit on connection pool to prevent stalling issues in pyo3 and other ffi boundaries (#1027) - (eb90e62) - hellovai\n\nUpdate docs (#1025) - (2dd1bb6) - Farookh Zaheer Siddiqui\n\nFix parsing for streaming of objects more stable (#1031) - (8aa9c00) - hellovai\n\nFix python BamlValidationError type (#1036) - (59a9510) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0610---2024-10-14",
        "title": "0.61.0 - 2024-10-14"
      },
      "h3": {
        "id": "bug-fixes-5",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-1",
    "content": "Popup settings dialog when no env vars set (#1033) - (b9fa52a) - aaronvg\n\nBump version to 0.61.0 - (ca2242b) - Aaron Villalpando",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0610---2024-10-14",
        "title": "0.61.0 - 2024-10-14"
      },
      "h3": {
        "id": "miscellaneous-1",
        "title": "Miscellaneous"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores",
    "content": "update Dockerfile (#1017) - (51539b7) - Ikko Eltociear Ashimine\n\nRevert \"feat: add a WYSIWYG UI (Swagger UI) to baml-cli dev (#1011)\" (#1018) - (f235050) - Greg Hale",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0600---2024-10-09",
        "title": "0.60.0 - 2024-10-09"
      },
      "h3": {
        "id": "miscellaneous-chores",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-6-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-6",
    "content": "Fix python types for BamlValidationError (#1020) - (520a09c) - aaronvg\n\ncoerce floats and ints with commas and other special cases (#1023) - (904492e) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0600---2024-10-09",
        "title": "0.60.0 - 2024-10-09"
      },
      "h3": {
        "id": "bug-fixes-6",
        "title": "Bug fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-docs-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Docs",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#docs",
    "content": "Add Docs for Jupyter notebook usage (#1008) - (c51d918) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0600---2024-10-09",
        "title": "0.60.0 - 2024-10-09"
      },
      "h3": {
        "id": "docs",
        "title": "Docs"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-4-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-4",
    "content": "(vertex) allow specifying creds as JSON object (#1009) - (98868da) - Samuel Lijin\n\nAdd prompt, raw_output and error message to BamlValidationError in TS and Python (#1005) - (447dbf4) - aaronvg\n\nAdd BamlValidationError to baml-cli serve (#1007) - (3b8cf16) - aaronvg\n\nInclude a WYSIWYG UI (Swagger UI) to baml-cli dev (#1011) - (fe9dde4) - imalsogreg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0590---2024-10-04",
        "title": "0.59.0 - 2024-10-04"
      },
      "h3": {
        "id": "features-4",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-5-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-5",
    "content": "Add client registry support for BAML over Rest (OpenAPI) (#1000) - (abe70bf) - Lorenz Ohly",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0580---2024-10-02",
        "title": "0.58.0 - 2024-10-02"
      },
      "h3": {
        "id": "features-5",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-7-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-7",
    "content": "Improve performance of parsing escaped characters in strings during streaming. (#1002) - (b35ae2c) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0580---2024-10-02",
        "title": "0.58.0 - 2024-10-02"
      },
      "h3": {
        "id": "bug-fixes-7",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-3-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-3",
    "content": "Add Docs for Document Extraction API (#996) - (da1a5e8) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0580---2024-10-02",
        "title": "0.58.0 - 2024-10-02"
      },
      "h3": {
        "id": "documentation-3",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-8-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-8",
    "content": "[BUGFIX] Parser should require a space between class keyword and class name (#990) - (7528247) - Greg Hale\n\nRemove dynamic string attributes (#991) - (0960ab2) - Greg Hale\n\nts fixes (#992) - (36af43f) - aaronvg\n\nBump version to 0.57.1 - (0aa71dd) - Aaron Villalpando",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0571---2024-09-29",
        "title": "0.57.1 - 2024-09-29"
      },
      "h3": {
        "id": "bug-fixes-8",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-4-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-4",
    "content": "Fix Python dynamic types example (#979) - (eade116) - lorenzoh",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0570---2024-09-27",
        "title": "0.57.0 - 2024-09-27"
      },
      "h3": {
        "id": "documentation-4",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-6-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-6",
    "content": "teach vscode/fiddle to explain when we drop information (#897) - (93e2b9b) - Samuel Lijin\n\nAdd ability for users to reset env vars to their desire. (#984) - (69e6c29) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0570---2024-09-27",
        "title": "0.57.0 - 2024-09-27"
      },
      "h3": {
        "id": "features-6",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-9-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-9",
    "content": "Fixed panic during logging for splitting on UTF-8 strings. (#987) - (c27a64f) - hellovai\n\nImprove SAP for triple quoted strings along with unions (#977) - (44202ab) - hellovai\n\nAdd more unit tests for parsing logic inspired by user (#980) - (48dd09f) - hellovai\n\nImprove syntax errors e.g. class / enum parsing and also update pestmodel to handle traling comments (#981) - (adbb6ae) - hellovai\n\nUpdating docs for env vars (#985) - (305d6b3) - hellovai\n\nWhen using openai-generic, use a string as the content type in the api request if theres no media (#988) - (e8fa739) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0570---2024-09-27",
        "title": "0.57.0 - 2024-09-27"
      },
      "h3": {
        "id": "bug-fixes-9",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-10-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-10",
    "content": "Improved parser for unions (#975) - (b390521) - hellovai\n\n[syntax] Allow lists to contain trailing comma (#974) - (9e3dc6c) - Greg Hale",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0561---2024-09-21",
        "title": "0.56.1 - 2024-09-21"
      },
      "h3": {
        "id": "bug-fixes-10",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-0560---2024-09-20-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "0.56.0 - 2024-09-20",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#0560---2024-09-20",
    "content": "Shout outs to Nico for fixing some internal Rust dependencies, and to Lorenz for correcting our documentation! We really appreciate it :)",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0560---2024-09-20",
        "title": "0.56.0 - 2024-09-20"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-7-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-7",
    "content": "use better default for openapi/rust client (#958) - (b74ef15) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0560---2024-09-20",
        "title": "0.56.0 - 2024-09-20"
      },
      "h3": {
        "id": "features-7",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-11-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-11",
    "content": "push optional-list and optional-map validation to post-parse (#959) - (c0480d5) - Samuel Lijin\n\nimprove OpenAPI instructions for windows/java (#962) - (6010efb) - Samuel Lijin\n\nassorted fixes: unquoted strings, openai-generic add api_key for bearer auth, support escape characters in quoted strings (#965) - (847f3a9) - hellovai\n\nserde-serialize can cause a package dependency cycle (#967) - (109ae09) - Nico\n\nmake anthropic work in fiddle/vscode (#970) - (32eccae) - Samuel Lijin\n\nmake dynamic enums work as outputs in Ruby (#972) - (7530402) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0560---2024-09-20",
        "title": "0.56.0 - 2024-09-20"
      },
      "h3": {
        "id": "bug-fixes-11",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-5-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-5",
    "content": "suggest correct python init command in vscode readme (#954) - (e99c5dd) - Samuel Lijin\n\nadd more vscode debugging instructions (#955) - (342b657) - Samuel Lijin\n\nNextJS hook needs to be bound to the correct context (#957) - (ee80451) - aaronvg\n\nupdate nextjs hooks and docs (#952) - (01cf855) - aaronvg\n\nFix some documentation typos (#966) - (5193cd7) - Greg Hale\n\nKeywords AI router (#953) - (1c6f975) - aaronvg\n\nFix post_generate comment (#968) - (919c79f) - lorenzoh",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0560---2024-09-20",
        "title": "0.56.0 - 2024-09-20"
      },
      "h3": {
        "id": "documentation-5",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-12-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-12",
    "content": "show actionable errors for string[]? and map<...>? type validation (#946) - (48879c0) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0560---2024-09-20",
        "title": "0.56.0 - 2024-09-20"
      },
      "h3": {
        "id": "bug-fixes-12",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-6-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-6",
    "content": "add reference docs about env vars (#945) - (dd43bc5) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0560---2024-09-20",
        "title": "0.56.0 - 2024-09-20"
      },
      "h3": {
        "id": "documentation-6",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-13-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-13",
    "content": "use correct locking strategy inside baml-cli serve (#943) - (fcb694d) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0552---2024-09-11",
        "title": "0.55.2 - 2024-09-11"
      },
      "h3": {
        "id": "bug-fixes-13",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-8-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-8",
    "content": "allow using DANGER_ACCEPT_INVALID_CERTS to disable https verification (#901) - (8873fe7) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0552---2024-09-11",
        "title": "0.55.2 - 2024-09-11"
      },
      "h3": {
        "id": "features-8",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-14-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-14",
    "content": "in generated TS code, put eslint-disable before ts-nocheck - (16d04c6) - Sam Lijin\n\nbaml-cli in python works again - (b57ca0f) - Sam Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0551---2024-09-10",
        "title": "0.55.1 - 2024-09-10"
      },
      "h3": {
        "id": "bug-fixes-14",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-7-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-7",
    "content": "update java install instructions (#933) - (b497003) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0551---2024-09-10",
        "title": "0.55.1 - 2024-09-10"
      },
      "h3": {
        "id": "documentation-7",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores-1",
    "content": "add version headers to the openapi docs (#931) - (21545f2) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0551---2024-09-10",
        "title": "0.55.1 - 2024-09-10"
      },
      "h3": {
        "id": "miscellaneous-chores-1",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-0550---2024-09-09-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "0.55.0 - 2024-09-09",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#0550---2024-09-09",
    "content": "With this release, we're announcing support for BAML in all languages: we now\nallow you to call your functions over an HTTP interface, and will generate an\nOpenAPI specification for your BAML functions, so you can now generate a client\nin any language of your choice, be it Golang, Java, PHP, Ruby, Rust, or any of\nthe other languages which OpenAPI supports.\nStart here to learn more: https://docs.boundaryml.com/docs/get-started/quickstart/openapi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0550---2024-09-09",
        "title": "0.55.0 - 2024-09-09"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-9-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-9",
    "content": "implement BAML-over-HTTP (#908) - (484fa93) - Samuel Lijin\n\nAdd anonymous telemetry about playground actions (#925) - (6f58c9e) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0550---2024-09-09",
        "title": "0.55.0 - 2024-09-09"
      },
      "h3": {
        "id": "features-9",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-10-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-10",
    "content": "Add a setting to disable restarting TS server in VSCode (#920) - (628f236) - aaronvg\n\nAdd prompt prefix for map types in ctx.output_format and add more type validation for map params (#919) - (4d304c5) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0542---2024-09-05",
        "title": "0.54.2 - 2024-09-05"
      },
      "h3": {
        "id": "features-10",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-15-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-15",
    "content": "Fix glibC issues for python linux-x86_64 (#922) - (9161bec) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0542---2024-09-05",
        "title": "0.54.2 - 2024-09-05"
      },
      "h3": {
        "id": "bug-fixes-15",
        "title": "Bug fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-8-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-8",
    "content": "Add nextjs hooks (#921) - (fe14f5a) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0542---2024-09-05",
        "title": "0.54.2 - 2024-09-05"
      },
      "h3": {
        "id": "documentation-8",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-breaking-change-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "BREAKING CHANGE",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#breaking-change",
    "content": "Fix escape characters in quoted strings (#905) - (9ba6eb8) - hellovai\n\n\nPrior \"\\n\" was interpreted as \"\\\\n\" in quoted strings. This has been fixed to interpret \"\\n\" as newline characters and true for other escape characters.",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0541---2024-09-03",
        "title": "0.54.1 - 2024-09-03"
      },
      "h3": {
        "id": "breaking-change",
        "title": "BREAKING CHANGE"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-9-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-9",
    "content": "updated dead vs-code-extension link (#914) - (b12f164) - Christian Warmuth\n\nUpdate docs for setting env vars (#904) - (ec1ca94) - hellovai\n\nAdd docs for LMStudio (#906) - (ea4c187) - hellovai\n\nFix docs for anthropic (#910) - (aba2764) - hellovai\n\nUpdate discord links on docs (#911) - (927357d) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0541---2024-09-03",
        "title": "0.54.1 - 2024-09-03"
      },
      "h3": {
        "id": "documentation-9",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-11-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-11",
    "content": "BAML_LOG will truncate messages to 1000 characters (modify using env var BOUNDARY_MAX_LOG_CHUNK_SIZE) (#907) - (d266e5c) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0541---2024-09-03",
        "title": "0.54.1 - 2024-09-03"
      },
      "h3": {
        "id": "features-11",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-16-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-16",
    "content": "Improve parsing parsing when there are initial closing ] or } (#903) - (46b0cde) - hellovai\n\nUpdate build script for ruby to build all platforms (#915) - (df2f51e) - hellovai\n\nAdd unit-test for openai-generic provider and ensure it compiles (#916) - (fde7c50) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0541---2024-09-03",
        "title": "0.54.1 - 2024-09-03"
      },
      "h3": {
        "id": "bug-fixes-16",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-breaking-change-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "BREAKING CHANGE",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#breaking-change-1",
    "content": "Update Default Gemini Base URL to v1beta (#891) - (a5d8c58) - gleed\n\n\nThe default base URL for the Gemini provider has been updated to v1beta. This change is should have no impact on existing users as v1beta is the default version for the Gemini python library, we are mirroring this change in BAML.",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0540---2024-08-27",
        "title": "0.54.0 - 2024-08-27"
      },
      "h3": {
        "id": "breaking-change-1",
        "title": "BREAKING CHANGE"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-17-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-17",
    "content": "Allow promptfiddle to talk to localhost ollama (#886) - (5f02b2a) - Samuel Lijin\n\nUpdate Parser for unions so they handle nested objects better (#900) - (c5b9a75) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0540---2024-08-27",
        "title": "0.54.0 - 2024-08-27"
      },
      "h3": {
        "id": "bug-fixes-17",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-10-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-10",
    "content": "Add ollama to default prompt fiddle example (#888) - (49146c0) - Samuel Lijin\n\nAdding improved docs + unit tests for caching (#895) - (ff7be44) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0540---2024-08-27",
        "title": "0.54.0 - 2024-08-27"
      },
      "h3": {
        "id": "documentation-10",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-12-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-12",
    "content": "Allow local filepaths to be used in tests in BAML files (image and audio) (#871) - (fa6dc03) - Samuel Lijin\n\nAdd support for absolute file paths in the file specifier (#881) - (fcd189e) - hellovai\n\nImplement shorthand clients (You can now use \"openai/gpt-4o\" as short for creating a complete client.) (#879) - (ddd15c9) - Samuel Lijin\n\nAdd support for arbritrary metadata (e.g. cache_policy for anthropic) (#893) - (0d63a70) - hellovai\n\nExpose Exceptions to user code: BamlError, BamlInvalidArgumentError, BamlClientError, BamlClientHttpError, BamlValidationError (#770) - (7da14c4) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0540---2024-08-27",
        "title": "0.54.0 - 2024-08-27"
      },
      "h3": {
        "id": "features-12",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-internal-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Internal",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#internal",
    "content": "AST Restructuring (#857) - (75b51cb) - Anish Palakurthi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0540---2024-08-27",
        "title": "0.54.0 - 2024-08-27"
      },
      "h3": {
        "id": "internal",
        "title": "Internal"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-18-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-18",
    "content": "fix github release not passing params to napi script causing issues in x86_64 (#872)\n\n(06b962b) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0531---2024-08-11",
        "title": "0.53.1 - 2024-08-11"
      },
      "h3": {
        "id": "bug-fixes-18",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-13-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-13",
    "content": "Add Client orchestration graph in playground (#801) - (24b5895) - Anish Palakurthi\n\nincrease range of python FFI support (#870) - (ec9b66c) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0531---2024-08-11",
        "title": "0.53.1 - 2024-08-11"
      },
      "h3": {
        "id": "features-13",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-misc-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Misc",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#misc-1",
    "content": "Bump version to 0.53.1 - (e4301e3) - Aaron Villalpando",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0531---2024-08-11",
        "title": "0.53.1 - 2024-08-11"
      },
      "h3": {
        "id": "misc-1",
        "title": "Misc"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-19-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-19",
    "content": "make image[] render correctly in prompts (#855) - (4a17dce) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0530---2024-08-05",
        "title": "0.53.0 - 2024-08-05"
      },
      "h3": {
        "id": "bug-fixes-19",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-14-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-14",
    "content": "(ruby) implement dynamic types, dynamic clients, images, and audio (#842) - (4a21eed) - Samuel Lijin\n\nCodelenses for test cases (#812) - (7cd8794) - Anish Palakurthi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0530---2024-08-05",
        "title": "0.53.0 - 2024-08-05"
      },
      "h3": {
        "id": "features-14",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-issue-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Issue",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#issue",
    "content": "removed vertex auth token printing (#846) - (b839316) - Anish Palakurthi\n\nFix google type deserialization issue - (a55b9a1) - Aaron Villalpando",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0530---2024-08-05",
        "title": "0.53.0 - 2024-08-05"
      },
      "h3": {
        "id": "issue",
        "title": "Issue"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-2-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores-2",
    "content": "clean up release stuff (#836) - (eed41b7) - Samuel Lijin\n\nAdd bfcl results to readme, fix links icons (#856) - (5ef7f3d) - aaronvg\n\nFix prompt fiddle and playground styles, add more logging, and add stop-reason to playground (#858) - (38e3153) - aaronvg\n\nBump version to 0.53.0 - (fd16839) - Aaron Villalpando",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0530---2024-08-05",
        "title": "0.53.0 - 2024-08-05"
      },
      "h3": {
        "id": "miscellaneous-chores-2",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-20-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-20",
    "content": "build python x86_64-linux with an older glibc (#834) - (db12540) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0521---2024-07-24",
        "title": "0.52.1 - 2024-07-24"
      },
      "h3": {
        "id": "bug-fixes-20",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-15-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-15",
    "content": "Add official support for ruby (#823) - (e81cc79) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0520---2024-07-24",
        "title": "0.52.0 - 2024-07-24"
      },
      "h3": {
        "id": "features-15",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-21-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-21",
    "content": "Fix ClientRegistry for Typescript code-gen (#828) - (b69921f) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0520---2024-07-24",
        "title": "0.52.0 - 2024-07-24"
      },
      "h3": {
        "id": "bug-fixes-21",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-16-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-16",
    "content": "Add support for unions / maps / null in TypeBuilder. (#820) - (8d9e92d) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0512---2024-07-24",
        "title": "0.51.2 - 2024-07-24"
      },
      "h3": {
        "id": "features-16",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-22-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-22",
    "content": "[Playground] Add a feedback button (#818) - (f749f2b) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0512---2024-07-24",
        "title": "0.51.2 - 2024-07-24"
      },
      "h3": {
        "id": "bug-fixes-22",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-11-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-11",
    "content": "Improvements across docs (#807) - (bc0c176) - Anish Palakurthi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0512---2024-07-24",
        "title": "0.51.2 - 2024-07-24"
      },
      "h3": {
        "id": "documentation-11",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-17-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-17",
    "content": "Add a feedback button to VSCode Extension (#811) - (f371912) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0511---2024-07-21",
        "title": "0.51.1 - 2024-07-21"
      },
      "h3": {
        "id": "features-17",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug",
    "content": "Allow default_client_mode in the generator #813 (#815) - (6df7fca) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0511---2024-07-21",
        "title": "0.51.1 - 2024-07-21"
      },
      "h3": {
        "id": "bug",
        "title": "Bug"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-23-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-23",
    "content": "Improve BAML Parser for numbers and single-key objects (#785) - (c5af7b0) - hellovai\n\nAdd docs for VLLM (#792) - (79e8773) - hellovai\n\nLLVM install and rebuild script (#794) - (9ee66ed) - Anish Palakurthi\n\nPrevent version mismatches when generating baml_client (#791) - (d793603) - aaronvg\n\nfiddle build fix (#800) - (d304203) - aaronvg\n\nDont drop extra fields in dynamic classes when passing them as inputs to a function (#802) - (4264c9b) - aaronvg\n\nAdding support for a sync client for Python + Typescript (#803) - (62085e7) - hellovai\n\nFix WASM-related issues introduced in #803 (#804) - (0a950e0) - hellovai\n\nAdding various fixes (#806) - (e8c1a61) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0510---2024-07-19",
        "title": "0.51.0 - 2024-07-19"
      },
      "h3": {
        "id": "bug-fixes-23",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-18-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-18",
    "content": "implement maps in BAML (#797) - (97d7e62) - Samuel Lijin\n\nSupport Vertex AI (Google Cloud SDK) (#790) - (d98ee81) - Anish Palakurthi\n\nAdd copy buttons to test results in playground (#799) - (b5eee3d) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0510---2024-07-19",
        "title": "0.51.0 - 2024-07-19"
      },
      "h3": {
        "id": "features-18",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-3-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores-3",
    "content": "in fern config, defer to installed version (#789) - (479f1b2) - fern\n\npublish docs on every push to the default branch (#796) - (180824a) - Samuel Lijin\n\n🌿 introducing fern docs (#779) - (46f06a9) - fern\n\nAdd test for dynamic list input (#798) - (7528d6a) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0510---2024-07-19",
        "title": "0.51.0 - 2024-07-19"
      },
      "h3": {
        "id": "miscellaneous-chores-3",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-24-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-24",
    "content": "[Playground] Environment variable button is now visible on all themes (#762) - (adc4da1) - aaronvg\n\n[Playground] Fix to cURL rendering and mime_type overriding (#763) - (67f9c6a) - Anish Palakurthi",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0500---2024-07-11",
        "title": "0.50.0 - 2024-07-11"
      },
      "h3": {
        "id": "bug-fixes-24",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-19-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-19",
    "content": "[Runtime] Add support for clients that change at runtime using ClientRegistry (#683) - (c0fb454) - hellovai\nhttps://docs.boundaryml.com/docs/calling-baml/client-registry",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0500---2024-07-11",
        "title": "0.50.0 - 2024-07-11"
      },
      "h3": {
        "id": "features-19",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-12-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-12",
    "content": "Add more documentation for TypeBuilder (#767) - (85dc8ab) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0500---2024-07-11",
        "title": "0.50.0 - 2024-07-11"
      },
      "h3": {
        "id": "documentation-12",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-25-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-25",
    "content": "Fixed Azure / Ollama clients. Removing stream_options from azure and ollama clients (#760) - (30bf88f) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0490---2024-07-08",
        "title": "0.49.0 - 2024-07-08"
      },
      "h3": {
        "id": "bug-fixes-25",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-20-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-20",
    "content": "Add support for arm64-linux (#751) - (adb8ee3) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0490---2024-07-08",
        "title": "0.49.0 - 2024-07-08"
      },
      "h3": {
        "id": "features-20",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-26-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-26",
    "content": "Fix env variables dialoge on VSCode (#750)\n\nPlayground selects correct function after loading (#757) - (09963a0) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0480---2024-07-04",
        "title": "0.48.0 - 2024-07-04"
      },
      "h3": {
        "id": "bug-fixes-26",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-4-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores-4",
    "content": "Better error messages on logging failures to Boundary Studio (#754) - (49c768f) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0480---2024-07-04",
        "title": "0.48.0 - 2024-07-04"
      },
      "h3": {
        "id": "miscellaneous-chores-4",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-27-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-27",
    "content": "make settings dialog work in vscode again (#750) (c94e355) - aaronvg\n\nrestore releases on arm64-linux (#751) - (adb8ee3) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0470---2024-07-03",
        "title": "0.47.0 - 2024-07-03"
      },
      "h3": {
        "id": "bug-fixes-27",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-28-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-28",
    "content": "Fixed tracing issues for Boundary Studio (#740) - (77a4db7) - Samuel Lijin\n\nFixed flush() to be more reliable (#744) - (9dd5fda) - Samuel Lijin\n\nRemove error when user passes in extra fields in a class (#746) - (2755b43) - aaronvg",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0460---2024-07-03",
        "title": "0.46.0 - 2024-07-03"
      },
      "h3": {
        "id": "bug-fixes-28",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-21-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-21",
    "content": "Add support for base_url for the google-ai provider (#747) - (005b1d9) - hellovai\n\nPlayground UX improvements (#742) - (5cb56fd) - hellovai\n\nPrompt Fiddle now auto-switches functions when to change files (#745)",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0460---2024-07-03",
        "title": "0.46.0 - 2024-07-03"
      },
      "h3": {
        "id": "features-21",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-13-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-13",
    "content": "Added a large example project on promptfiddle.com (#741) - (f80da1e) - aaronvg\n\nMark ruby as in beta (#743) - (901109d) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0460---2024-07-03",
        "title": "0.46.0 - 2024-07-03"
      },
      "h3": {
        "id": "documentation-13",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-29-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-29",
    "content": "Fixed streaming in Python Client which didn't show result until later (#726) - (e4f2daa) - Anish Palakurthi\n\nImprove playground stability on first load (#732) - (2ac7b32) - Anish Palakurthi\n\nAdd improved static analysis for jinja (#734) - (423faa1) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0450---2024-06-29",
        "title": "0.45.0 - 2024-06-29"
      },
      "h3": {
        "id": "bug-fixes-29",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-14-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-14",
    "content": "Docs for Dynamic Types (#722) https://docs.boundaryml.com/docs/calling-baml/dynamic-types",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0450---2024-06-29",
        "title": "0.45.0 - 2024-06-29"
      },
      "h3": {
        "id": "documentation-14",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-22-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-22",
    "content": "Show raw cURL request in Playground (#723) - (57928e1) - Anish Palakurthi\n\nSupport bedrock as a provider (#725) - (c64c665) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0450---2024-06-29",
        "title": "0.45.0 - 2024-06-29"
      },
      "h3": {
        "id": "features-22",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-30-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-30",
    "content": "Fix typebuilder for random enums (#721)",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0440---2024-06-26",
        "title": "0.44.0 - 2024-06-26"
      },
      "h3": {
        "id": "bug-fixes-30",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-31-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-31",
    "content": "fix pnpm lockfile issue (#720)",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0430---2024-06-26",
        "title": "0.43.0 - 2024-06-26"
      },
      "h3": {
        "id": "bug-fixes-31",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-32-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-32",
    "content": "correctly propagate LICENSE to baml-py (#695) - (3fda880) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0420---2024-06-26",
        "title": "0.42.0 - 2024-06-26"
      },
      "h3": {
        "id": "bug-fixes-32",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-5-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores-5",
    "content": "update jsonish readme (#685) - (b19f04a) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0420---2024-06-26",
        "title": "0.42.0 - 2024-06-26"
      },
      "h3": {
        "id": "miscellaneous-chores-5",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-vscode-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Vscode",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#vscode",
    "content": "add link to tracing, show token counts (#703) - (64aa18a) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0420---2024-06-26",
        "title": "0.42.0 - 2024-06-26"
      },
      "h3": {
        "id": "vscode",
        "title": "Vscode"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-bug-fixes-33-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Bug Fixes",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#bug-fixes-33",
    "content": "rollback git lfs, images broken in docs rn (#534) - (6945506) - Samuel Lijin\n\nsearch for markdown blocks correctly (#641) - (6b8abf1) - Samuel Lijin\n\nrestore one-workspace-per-folder (#656) - (a464bde) - Samuel Lijin\n\nruby generator should be ruby/sorbet (#661) - (0019f39) - Samuel Lijin\n\nruby compile error snuck in (#663) - (0cb2583) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "bug-fixes-33",
        "title": "Bug Fixes"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-documentation-15-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Documentation",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#documentation-15",
    "content": "add typescript examples (#477) - (532481c) - Samuel Lijin\n\nadd titles to code blocks for all CodeGroup elems (#483) - (76c6b68) - Samuel Lijin\n\nadd docs for round-robin clients (#500) - (221f902) - Samuel Lijin\n\nadd ruby example (#689) - (16e187f) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "documentation-15",
        "title": "Documentation"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-features-23-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Features",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#features-23",
    "content": "implement baml version --check --output json (#444) - (5f076ac) - Samuel Lijin\n\nshow update prompts in vscode (#451) - (b66da3e) - Samuel Lijin\n\nadd tests to check that baml version --check works (#454) - (be1499d) - Samuel Lijin\n\nparse typescript versions in version --check (#473) - (b4b2250) - Samuel Lijin\n\nimplement round robin client strategies (#494) - (599fcdd) - Samuel Lijin\n\nadd integ-tests support to build (#542) - (f59cf2e) - Samuel Lijin\n\nmake ruby work again (#650) - (6472bec) - Samuel Lijin\n\nAdd RB2B tracking script (#682) - (54547a3) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "features-23",
        "title": "Features"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-miscellaneous-chores-6-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Miscellaneous Chores",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#miscellaneous-chores-6",
    "content": "add nodemon config to typescript/ (#435) - (231b396) - Samuel Lijin\n\nfinish gloo to BoundaryML renames (#452) - (88a7fda) - Samuel Lijin\n\nset up lfs (#511) - (3a43143) - Samuel Lijin\n\nadd internal build tooling for sam (#512) - (9ebacca) - Samuel Lijin\n\ndelete clients dir, this is now dead code (#652) - (ec2627f) - Samuel Lijin\n\nconsolidate vscode workspace, bump a bunch of deps (#654) - (82bf6ab) - Samuel Lijin\n\nAdd RB2B tracking script to propmt fiddle (#681) - (4cf806b) - hellovai\n\nAdding better release script (#688) - (5bec282) - hellovai",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "miscellaneous-chores-6",
        "title": "Miscellaneous Chores"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-auto-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "[AUTO",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#auto",
    "content": "patch] Version bump for nightly release [NIGHTLY:cli] [NIGHTLY:vscode_ext] [NIGHTLY:client-python] - (d05a22c) - GitHub Action",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "auto",
        "title": "[AUTO"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-build-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Build",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#build",
    "content": "fix baml-core-ffi script (#521) - (b1b7f4a) - Samuel Lijin\n\nfix engine/ (#522) - (154f646) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "build",
        "title": "Build"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-integ-tests-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Integ-tests",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#integ-tests",
    "content": "add ruby test - (c0bc101) - Sam Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "integ-tests",
        "title": "Integ-tests"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-readme-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Readme",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#readme",
    "content": "add function calling, collapse the table (#505) - (2f9024c) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "readme",
        "title": "Readme"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-release-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Release",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#release",
    "content": "bump versions for everything (#662) - (c0254ae) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "release",
        "title": "Release"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.changelog.changelog.changelog-vscode-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/changelog/changelog",
    "pathname": "/changelog/changelog",
    "icon": "fa-regular fa-history",
    "title": "Vscode",
    "breadcrumb": [],
    "tab": {
      "title": "Changelog",
      "pathname": "/changelog"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#vscode-1",
    "content": "check for updates on the hour (#434) - (c70a3b3) - Samuel Lijin",
    "hierarchy": {
      "h0": {
        "title": "Changelog"
      },
      "h2": {
        "id": "0410---2024-06-20",
        "title": "[0.41.0] - 2024-06-20"
      },
      "h3": {
        "id": "vscode-1",
        "title": "Vscode"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:eaa1074a-b676-4a6b-93df-43c52a64d62f.extractData",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/boundary-extraction-api/extract/extract-data",
    "pathname": "/ref/boundary-extraction-api/extract/extract-data",
    "title": "Extract",
    "breadcrumb": [
      {
        "title": "Boundary Extraction API",
        "pathname": "/ref/boundary-extraction-api"
      },
      {
        "title": "API Reference",
        "pathname": "/ref/boundary-extraction-api/extract"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "eaa1074a-b676-4a6b-93df-43c52a64d62f",
    "api_endpoint_id": "endpoint_.extractData",
    "method": "POST",
    "endpoint_path": "/extract",
    "endpoint_path_alternates": [
      "/extract",
      "https://api2.boundaryml.com/extract",
      "https://api2.boundaryml.com/extract"
    ],
    "response_type": "json",
    "description": "Upload one or more files along with a prompt to extract data. The API processes the files based on the prompt and returns the extracted information.\nA PDF may generate an array of many extracted JSON blobs, 1 per page for example.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api2.boundaryml.com/v3"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ErrorResponse",
      "ErrorResponse",
      "HttpValidationError",
      "ErrorResponse"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:eaa1074a-b676-4a6b-93df-43c52a64d62f.extractData-response",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/ref/boundary-extraction-api/extract/extract-data",
    "pathname": "/ref/boundary-extraction-api/extract/extract-data",
    "title": "Extract",
    "breadcrumb": [
      {
        "title": "Boundary Extraction API",
        "pathname": "/ref/boundary-extraction-api"
      },
      {
        "title": "API Reference",
        "pathname": "/ref/boundary-extraction-api/extract"
      }
    ],
    "tab": {
      "title": "BAML Reference",
      "pathname": "/ref"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "eaa1074a-b676-4a6b-93df-43c52a64d62f",
    "api_endpoint_id": "endpoint_.extractData",
    "method": "POST",
    "endpoint_path": "/extract",
    "endpoint_path_alternates": [
      "/extract",
      "https://api2.boundaryml.com/extract",
      "https://api2.boundaryml.com/extract"
    ],
    "response_type": "json",
    "description": "Successful Response",
    "environments": [
      {
        "id": "Default",
        "url": "https://api2.boundaryml.com/v3"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ErrorResponse",
      "ErrorResponse",
      "HttpValidationError",
      "ErrorResponse"
    ],
    "type": "api-reference",
    "hash": "#response"
  }
]