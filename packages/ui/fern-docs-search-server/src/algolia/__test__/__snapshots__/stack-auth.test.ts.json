[
  {
    "objectID": "test:test.com:root.uv.docs.docs.overview-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/overview",
    "pathname": "/overview",
    "icon": "fa-regular fa-globe",
    "title": "Overview",
    "breadcrumb": [],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Welcome to Stack Auth, the open-source authentication platform!",
    "content": "You can get started in five minutes with our setup guide, or jump straight into the documentation.\n\n\n\n\nGet started with Stack in 5 minutes\n\n\nLearn how to use Stack's SDKs for Next.js\n\n\nExplore Stack's REST API for your backends\n\n\nJoin our Discord community"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.overview-why-choose-stack-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/overview",
    "pathname": "/overview",
    "icon": "fa-regular fa-globe",
    "title": "Why Choose Stack?",
    "breadcrumb": [],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#why-choose-stack",
    "content": "Authentication is inherently difficult. Few things are more sensitive than user data and more complex than cryptography. Not surprisingly, many online businesses struggle to get it right.\nThe optimal authentication solution should be secure, yet approachable. If a developer has to worry about JWTs, OAuth flows, or password hashing, then we have failed. If an authentication solution uses closed-source, unauditable code for the most critical parts of your application, then we have failed.\nIn truth, the authentication services industry has collectively failed. It's dominated by proprietary giants with predatory \"bait-and-switch\" pricing, providing no transparency into their codebase and delivering a subpar developer experience â€” because they know enterprises will pay more if setting up auth systems is painful.\nThat's why we built Stack. Integrating secure authentication into your app should take 5 minutes, not 5 days.\nAt the core of Stack are deep integrations into frontend and backend frameworks. We offer the best developer experience with Next.js. Instead of providing mediocre support for numerous frameworks, we focused on making a few integrations excellent before adding new ones. We also offer a cross-compatible REST API as a fallback.\nHere's an example. To get the current user, simply call:\nThat's it! Stack will either return a User object or redirect the user to the login page.\nYou can also add a button to change the user's name:\nThe user data will update in both the frontend and backend automatically. The updated user data will be reflected in all other components on your page as well.\nYou also get pages and components for the authentication flow out-of-the-box. This is the sign-in page you get without writing a single line of code:\nStack sign in page\nNotice, there's no branding on our components. We believe we should grow by building the best product, not by forcing our brand onto your users. This means we rely on you to spread the word about Stack. If you like what you're reading, please take a moment to tell one or two of your friends about us.\nIf you prefer a fully customized UI, you can use our low-level functions like signInWithOAuth or signInWithCredential to build your own sign-in page:\nTo manage everything efficiently, there is a powerful admin dashboard:\nStack dashboard\nBest of all, Stack is 100% open-source. This means the client, server, dashboard, and even this documentation you're reading right now. Check out our GitHub to open an issue or pull request.\nThis is just a glimpse of what Stack can do. Stack also handles many other tasks like backend integration, data storage, emails, teams, permissions, and more, which you will learn about later in the documentation.\nIf this sounds interesting, get started with our interactive setup wizard, or join our Discord community to ask questions and get help from our team.\nWe're excited to have you on board! ðŸš€",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "export function MyComponent() {\n  const user = useUser({ or: \"redirect\" });\n  return <div>Hi, {user.displayName}</div>;\n}"
      },
      {
        "lang": "tsx",
        "code": "<button onClick={async () => await user.update({ displayName: \"New Name\" })}>\n  Change Name\n</button>"
      },
      {
        "lang": "tsx",
        "code": "export default function CustomOAuthSignIn() {\n  const app = useStackApp();\n  return (\n    <div>\n      <button onClick={async () => await app.signInWithOAuth('google')}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Overview"
      },
      "h2": {
        "id": "why-choose-stack",
        "title": "Why Choose Stack?"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.faq",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/faq",
    "pathname": "/faq",
    "icon": "fa-regular fa-circle-question",
    "title": "FAQ",
    "breadcrumb": [],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Frequently asked questions about Stack"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.faq-languages--frameworks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/faq",
    "pathname": "/faq",
    "icon": "fa-regular fa-circle-question",
    "title": "Languages & Frameworks",
    "breadcrumb": [],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#languages--frameworks",
    "content": "In the frontend, Stack supports TypeScript and JavaScript with Next.js. In the backend, Stack has a flexible REST API that can be used with any language or framework.\n\n\nWhile you can use any backend framework with Stack, the frontend is tightly integrated with Next.js. If you want to use a different frontend framework, you will have to build the integration ourselves with the client endpoints of our REST API. Some members of our community have started projects to do this, so you may want to join our Discord to coordinate with them.\n\n\nOnly the Next.js app router is currently supported. However, just like any other unsupported framework, you can use the client endpoints of our REST API to build your own integration.",
    "hierarchy": {
      "h0": {
        "title": "FAQ"
      },
      "h2": {
        "id": "languages--frameworks",
        "title": "Languages & Frameworks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.faq-product-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/faq",
    "pathname": "/faq",
    "icon": "fa-regular fa-circle-question",
    "title": "Product",
    "breadcrumb": [],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#product",
    "content": "Ask yourself about <X>:\nIs <X> open-source?\n\nIs <X> developer-friendly, well-documented, and lets you get started in minutes?\n\nBesides authentication, does <X> also do authorization and user management (see feature list below)?\n\n\nIf you answered \"no\" to any of these questions, then that's how Stack Auth is different from <X>.\n\n\nWhile you can use any backend framework with Stack, the frontend is tightly integrated with Next.js. If you want to use a different frontend framework, you will have to build the integration ourselves with the client endpoints of our REST API. Some members of our community have started projects to do this, so you may want to join our Discord to coordinate with them.\n\n\nOnly the Next.js app router is currently supported. However, just like any other unsupported framework, you can use the client endpoints of our REST API to build your own integration.",
    "hierarchy": {
      "h0": {
        "title": "FAQ"
      },
      "h2": {
        "id": "product",
        "title": "Product"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.faq-other-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/faq",
    "pathname": "/faq",
    "icon": "fa-regular fa-circle-question",
    "title": "Other",
    "breadcrumb": [],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#other",
    "content": "Please carefully read our CONTRIBUTING.md.",
    "hierarchy": {
      "h0": {
        "title": "FAQ"
      },
      "h2": {
        "id": "other",
        "title": "Other"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/setup",
    "pathname": "/getting-started/setup",
    "icon": "fa-regular fa-download",
    "title": "Installation & Setup",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Getting started with Stack in 5 minutes"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup-setup-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/setup",
    "pathname": "/getting-started/setup",
    "icon": "fa-regular fa-download",
    "title": "Setup",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setup",
    "content": "To get started with Stack, you need a Next.js project with the app router. The pages router is not supported.\nWe recommend using our setup wizard, which will automatically detect your project structure and guide you through the installation process. In case it fails, you can choose to do the manual installation instead.\n\n\n\n\n\n\nRun installation wizard\nRun Stack's installation wizard with the following command:\nUpdate API keys\nThen, create an account on the Stack Auth dashboard, create a new project with an API key, and copy its environment variables into the .env.local file of your Next.js project:\nDone!\nThat's it! The following files should have been created or updated in your project:\napp/handler/[...stack]/page.tsx: This file contains the default pages for sign-in, sign-out, account settings, and more. If you prefer, later you will learn how to use custom pages instead.\n\napp/layout.tsx: The layout file was updated to wrap the entire body with StackProvider and StackTheme.\n\napp/loading.tsx: If not yet found, Stack automatically adds a Suspense boundary to your app. This is shown to the user while Stack's async hooks, like useUser, are loading.\n\nstack.ts: This file contains the stackServerApp which you can use to access Stack from Server Components, Server Actions, API routes, and middleware.\n\n\n\n\nNote: The setup wizard also supports existing, complicated projects. Cases where manual installation is necessary are rare.\nIf you are struggling with the setup wizard, please reach out to us on our Discord first, where we'll be happy to help you.\n\n\nInstall npm package\nFirst, install Stack with npm, yarn, or pnpm:\nCreate API keys\nIf you haven't already, register a new account on Stack. Create a project in the dashboard, create a new API key from the left sidebar, and copy the project ID, publishable client key, and secret server key into a new file called .env.local in the root of your Next.js project:\nCreate stack.ts file\nCreate a new file stack.ts in your root directory and fill it with the following:\nThis will read the environment variables automatically and create a server app that you can later use to access Stack from your Next.js server.\nCheck out the StackServerApp documentation to learn more about its other options.\nCreate Stack handler\nCreate a new file in app/handler/[...stack]/page.tsx and paste the following code:\nThis will create pages for sign-in, sign-up, password reset, and others. Additionally, it will be used as a callback URL for OAuth. You can replace them with your own pages later.\nAdd StackProvider to layout.tsx\nIn your app/layout.tsx, wrap the entire body with a StackProvider and StackTheme. Afterwards, it should look like this:\nAdd Suspense boundary\nBy default, Stack uses Suspense to handle loading states. To show a loading indicator while Stack is fetching user data, make sure there is a loading.tsx file in your app directory:\nDone!",
    "code_snippets": [
      {
        "lang": "sh",
        "meta": "title=\"Terminal\"",
        "code": "npx @stackframe/init-stack@latest"
      },
      {
        "lang": "sh",
        "meta": "title=\".env.local\"",
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>"
      },
      {
        "lang": "sh",
        "meta": "title=\"Terminal\"",
        "code": "npx @stackframe/init-stack@latest"
      },
      {
        "lang": "sh",
        "meta": "title=\".env.local\"",
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>"
      },
      {
        "lang": "bash",
        "meta": "title=\"Terminal\"",
        "code": "npm install @stackframe/stack"
      },
      {
        "lang": "sh",
        "meta": "title=\".env.local\"",
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>"
      },
      {
        "lang": "tsx",
        "meta": "title=\"stack.ts\"",
        "code": "import \"server-only\";\nimport { StackServerApp } from \"@stackframe/stack\";\n\nexport const stackServerApp = new StackServerApp({\n  tokenStore: \"nextjs-cookie\", // storing auth tokens in cookies\n});"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/handler/[...stack]/page.tsx\"",
        "code": "import { StackHandler } from \"@stackframe/stack\";\nimport { stackServerApp } from \"@/stack\";\n\nexport default function Handler(props: any) {\n  return <StackHandler fullPage app={stackServerApp} {...props} />;\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/layout.tsx\"",
        "code": "import React from \"react\";\nimport { StackProvider, StackTheme } from \"@stackframe/stack\";\nimport { stackServerApp } from \"@/stack\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <StackProvider app={stackServerApp}>\n          <StackTheme>\n            {children}\n          </StackTheme>\n        </StackProvider>\n      </body>\n    </html>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/loading.tsx\"",
        "code": "export default function Loading() {\n  // You can use any loading indicator here\n  return <>\n    Loading...\n  </>;\n}"
      },
      {
        "lang": "bash",
        "meta": "title=\"Terminal\"",
        "code": "npm install @stackframe/stack"
      },
      {
        "lang": "sh",
        "meta": "title=\".env.local\"",
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>"
      },
      {
        "lang": "tsx",
        "meta": "title=\"stack.ts\"",
        "code": "import \"server-only\";\nimport { StackServerApp } from \"@stackframe/stack\";\n\nexport const stackServerApp = new StackServerApp({\n  tokenStore: \"nextjs-cookie\", // storing auth tokens in cookies\n});"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/handler/[...stack]/page.tsx\"",
        "code": "import { StackHandler } from \"@stackframe/stack\";\nimport { stackServerApp } from \"@/stack\";\n\nexport default function Handler(props: any) {\n  return <StackHandler fullPage app={stackServerApp} {...props} />;\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/layout.tsx\"",
        "code": "import React from \"react\";\nimport { StackProvider, StackTheme } from \"@stackframe/stack\";\nimport { stackServerApp } from \"@/stack\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <StackProvider app={stackServerApp}>\n          <StackTheme>\n            {children}\n          </StackTheme>\n        </StackProvider>\n      </body>\n    </html>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/loading.tsx\"",
        "code": "export default function Loading() {\n  // You can use any loading indicator here\n  return <>\n    Loading...\n  </>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Installation & Setup"
      },
      "h2": {
        "id": "setup",
        "title": "Setup"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup-post-setup-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/setup",
    "pathname": "/getting-started/setup",
    "icon": "fa-regular fa-download",
    "title": "Post-setup",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#post-setup",
    "content": "That's it! Stack is now configured in your Next.js project. If you start your Next.js app with npm run dev and navigate to http://localhost:3000/handler/signup, you will see the Stack sign-up page.\nStack sign in page\nAfter signing up/in, you will be redirected back to the home page. We will show you how to add user information to it in the next section. You can also check out the http://localhost:3000/handler/account-settings page which looks like this:\nStack account settings page",
    "hierarchy": {
      "h0": {
        "title": "Installation & Setup"
      },
      "h2": {
        "id": "post-setup",
        "title": "Post-setup"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup-next-steps-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/setup",
    "pathname": "/getting-started/setup",
    "icon": "fa-regular fa-download",
    "title": "Next steps",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#next-steps",
    "content": "Next up, we will show you how to retrieve and update user information, and how to protect a page.",
    "hierarchy": {
      "h0": {
        "title": "Installation & Setup"
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/components",
    "pathname": "/getting-started/components",
    "icon": "fa-regular fa-puzzle",
    "title": "Components",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Pre-built Next.js components to make your life easier",
    "content": "In the last guide, we initialized Stack. This time, we will take a quick look at some of the most useful Next.js components.\nFor the full documentation of all available components, please refer to the components reference."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-userbutton--chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/components",
    "pathname": "/getting-started/components",
    "icon": "fa-regular fa-puzzle",
    "title": "",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#userbutton-",
    "content": "The <UserButton /> component shows the user's avatar and opens a dropdown with various user settings.\nUserButton",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"page.tsx\"",
        "code": "import { UserButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <UserButton />\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Components"
      },
      "h2": {
        "id": "userbutton-",
        "title": "<UserButton />"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-signin--and-signup--chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/components",
    "pathname": "/getting-started/components",
    "icon": "fa-regular fa-puzzle",
    "title": "and",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#signin--and-signup-",
    "content": "These components show a sign-in and sign-up form, respectively.\nSign-in Component\nAll of Stack's components are modular and built from smaller primitives. For example, the <SignIn /> component is composed of the following:\nAn <OAuthButtonGroup />, which itself is composed of multiple <OAuthButton /> components\n\nA <MagicLinkSignIn />, which has a text field and calls useStackApp().signInWithMagicLink()\n\nA <CredentialSignIn />, which has two text fields and calls useStackApp().signInWithCredential()\n\n\nYou can use these components individually to build a custom sign-in component.\nTo change the default sign-in URL to your own, see the documentation on custom pages.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"page.tsx\"",
        "code": "import { SignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <SignIn />\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Components"
      },
      "h2": {
        "id": "signin--and-signup-",
        "title": "<SignIn /> and <SignUp />"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-others-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/components",
    "pathname": "/getting-started/components",
    "icon": "fa-regular fa-puzzle",
    "title": "Others",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#others",
    "content": "Stack has many more components available. For a comprehensive list, please check the documentation on components.",
    "hierarchy": {
      "h0": {
        "title": "Components"
      },
      "h2": {
        "id": "others",
        "title": "Others"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-next-steps-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/components",
    "pathname": "/getting-started/components",
    "icon": "fa-regular fa-puzzle",
    "title": "Next steps",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#next-steps",
    "content": "In the next guide, we will do a deep-dive into retrieving and modifying user objects, as well as how to protect a page.",
    "hierarchy": {
      "h0": {
        "title": "Components"
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Users",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Reading and writing user information, and protecting pages",
    "content": "You will inevitably build custom components that access the user in one way or another. In this section, we will take a closer look at the functions and hooks that let you do this."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-client-component-basics-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Client Component basics",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#client-component-basics",
    "content": "The useUser() hook returns the current user in a Client Component. By default, it will return null if the user is not signed in.\nThe useUser() hook is simply a shorthand for useStackApp().useUser(). useStackApp() also contains other useful hooks and methods for clients, which will be described later.\nSometimes, you want to retrieve the user only if they're signed in, and redirect to the sign-in page otherwise. In this case, simply pass { or: \"redirect\" }, and the function will never return null.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"my-client-component.tsx\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\"\n\nexport function MyClientComponent() {\n  const user = useUser();\n  return <div>{user ? `Hello, ${user.displayName ?? \"anon\"}` : 'You are not logged in'}</div>;\n}"
      },
      {
        "lang": "tsx",
        "code": "  const user = useUser({ or: \"redirect\" });\n  return <div>{`Hello, ${user.displayName ?? \"anon\"}`}</div>;"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "client-component-basics",
        "title": "Client Component basics"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-server-component-basics-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Server Component basics",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#server-component-basics",
    "content": "Since useUser() is a stateful hook, you can't use it on server components. Instead, you can import stackServerApp from stack.ts and call getUser():\n\n\nSince useUser() is a hook, it will re-render the component on user changes (eg. signout), while getUser() will only fetch the user once (on page load). You can also call useStackApp().getUser() on the client side to get the user in a non-component context.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"my-server-component.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function MyServerComponent() {\n  const user = await stackServerApp.getUser();  // or: stackServerApp.getUser({ or: \"redirect\" })\n  return <div>{user ? `Hello, ${user.displayName ?? \"anon\"}` : 'You are not logged in'}</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "server-component-basics",
        "title": "Server Component basics"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-protecting-a-page-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Protecting a page",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#protecting-a-page",
    "content": "There are three ways to protect a page: in Client Components with useUser({ or: \"redirect\" }), in Server Components with await getUser({ or: \"redirect\" }), or with middleware.\nOn Client Components, the useUser({ or: 'redirect' }) hook will redirect the user to the sign-in page if they are not logged in. Similarly, on Server Components, call await getUser({ or: \"redirect\" }) to protect a page (or component).\nMiddleware can be used whenever it is easy to tell whether a page should be protected given just the URL, for example, when you have a /private section only accessible to logged-in users.\n\n\n\n\n\n\n\n\n\n\nIf you have sensitive information hidden in the page HTML itself, be aware of Next.js differences when using Server vs. Client Components.\nClient Components: Client components are always sent to the browser, regardless of page protection. This is standard Next.js behavior. For more information, please refer to the Next.js documentation.\n\nServer Components: If a component is protected, it is guaranteed that its bundled HTML will not be sent to the browser if the user is not logged in. However, this is not necessarily true for its children and the rest of the page, as Next.js may split components on the same page and send them to the client separately for performance.\nFor example, if your page is <Parent><Child /></Parent>, where Parent is protected and Child is not, Next.js may still send <Child /> to the browser even if the user is not logged in. (Normal browsers will never display it, but attackers may be able to retrieve it.) Notably, this also applies to unprotected pages inside protected layouts.\nTo remediate this, every component/page that contains sensitive information should protect itself, instead of relying on an outer layout. This is good practice anyways; it prevents you from accidentally exposing the data.\n\nMiddleware: Because middleware runs on the edge, it ensures that the protected URLs are not accessible to anyone who is not authorized, so you don't have to worry about Next.js pre-sending unprotected components to the client.\n\n\nIrregardless of which method you use, attackers will never be able to, say, impersonate a user.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"middleware.tsx\"",
        "code": "export async function middleware(request: NextRequest) {\n  const user = await stackServerApp.getUser();\n  if (!user) {\n    return NextResponse.redirect(new URL('/handler/sign-in', request.url));\n  }\n  return NextResponse.next();\n}\n\nexport const config = {\n  // You can add your own route protection logic here\n  // Make sure not to protect the root URL, as it would prevent users from accessing static Next.js files or Stack's /handler path\n  matcher: '/protected/:path*',\n};"
      },
      {
        "lang": "tsx",
        "meta": "title=\"middleware.tsx\"",
        "code": "export async function middleware(request: NextRequest) {\n  const user = await stackServerApp.getUser();\n  if (!user) {\n    return NextResponse.redirect(new URL('/handler/sign-in', request.url));\n  }\n  return NextResponse.next();\n}\n\nexport const config = {\n  // You can add your own route protection logic here\n  // Make sure not to protect the root URL, as it would prevent users from accessing static Next.js files or Stack's /handler path\n  matcher: '/protected/:path*',\n};"
      },
      {
        "lang": "tsx",
        "meta": "title=\"my-protected-client-component.tsx\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function MyProtectedClientComponent() {\n  useUser({ or: 'redirect' });\n  return <h1>You can only see this if you are logged in</h1>\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"my-protected-client-component.tsx\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function MyProtectedClientComponent() {\n  useUser({ or: 'redirect' });\n  return <h1>You can only see this if you are logged in</h1>\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"my-protected-server-component.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function MyProtectedServerComponent() {\n  await stackServerApp.getUser({ or: 'redirect' });\n  return <h1>You can only see this if you are logged in</h1>\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"my-protected-server-component.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function MyProtectedServerComponent() {\n  await stackServerApp.getUser({ or: 'redirect' });\n  return <h1>You can only see this if you are logged in</h1>\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "protecting-a-page",
        "title": "Protecting a page"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-user-data-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "User data",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#user-data",
    "content": "You can update attributes on a user object with the user.update() function.\nYou can also store custom user data in the clientMetadata, serverMetadata, or clientReadonlyMetadata fields. More information here.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"my-client-component.tsx\"",
        "code": "'use client';\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function MyClientComponent() {\n  const user = useUser();\n  return <button onClick={async () => await user.update({ displayName: \"New Name\" })}>\n    Change Name\n  </button>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "user-data",
        "title": "User data"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-signing-out-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Signing out",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#signing-out",
    "content": "You can sign out the user by redirecting them to /handler/sign-out or simply by calling user.signOut(). They will be redirected to the URL configured as afterSignOut in the StackServerApp.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"sign-out-button.tsx\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function SignOutButton() {\n  const user = useUser();\n  return user ? <button onClick={() => user.signOut()}>Sign Out</button> : \"Not signed in\";\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"sign-out-button.tsx\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function SignOutButton() {\n  const user = useUser();\n  return user ? <button onClick={() => user.signOut()}>Sign Out</button> : \"Not signed in\";\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"sign-out-link.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function SignOutLink() {\n  // stackServerApp.urls.signOut is equal to /handler/sign-out\n  return <a href={stackServerApp.urls.signOut}>Sign Out</a>;\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"sign-out-link.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function SignOutLink() {\n  // stackServerApp.urls.signOut is equal to /handler/sign-out\n  return <a href={stackServerApp.urls.signOut}>Sign Out</a>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "signing-out",
        "title": "Signing out"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-example-custom-profile-page-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Example: Custom profile page",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example-custom-profile-page",
    "content": "Stack automatically creates a user profile on sign-up. Let's build a page that displays this information. In app/profile/page.tsx:\n\n\n\n\n\n\nAfter saving your code, you can see the profile page on http://localhost:3000/profile.\nFor more examples on how to use the User object, check the the SDK documentation.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"app/profile/page.tsx\"",
        "code": "'use client';\nimport { useUser, useStackApp, UserButton } from \"@stackframe/stack\";\n\nexport default function PageClient() {\n  const user = useUser();\n  const app = useStackApp();\n  return (\n    <div>\n      {user ? (\n        <div>\n          <UserButton />\n          <p>Welcome, {user.displayName ?? \"anonymous user\"}</p>\n          <p>Your e-mail: {user.primaryEmail}</p>\n          <button onClick={() => user.signOut()}>Sign Out</button>\n        </div>\n      ) : (\n        <div>\n          <p>You are not logged in</p>\n          <button onClick={() => app.redirectToSignIn()}>Sign in</button>\n          <button onClick={() => app.redirectToSignUp()}>Sign up</button>\n        </div>\n      )}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/profile/page.tsx\"",
        "code": "'use client';\nimport { useUser, useStackApp, UserButton } from \"@stackframe/stack\";\n\nexport default function PageClient() {\n  const user = useUser();\n  const app = useStackApp();\n  return (\n    <div>\n      {user ? (\n        <div>\n          <UserButton />\n          <p>Welcome, {user.displayName ?? \"anonymous user\"}</p>\n          <p>Your e-mail: {user.primaryEmail}</p>\n          <button onClick={() => user.signOut()}>Sign Out</button>\n        </div>\n      ) : (\n        <div>\n          <p>You are not logged in</p>\n          <button onClick={() => app.redirectToSignIn()}>Sign in</button>\n          <button onClick={() => app.redirectToSignUp()}>Sign up</button>\n        </div>\n      )}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/profile/page.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\nimport { UserButton } from \"@stackframe/stack\";\n\nexport default async function Page() {\n  const user = await stackServerApp.getUser();\n  return (\n    <div>\n      {user ? (\n        <div>\n          <UserButton />\n          <p>Welcome, {user.displayName ?? \"anonymous user\"}</p>\n          <p>Your e-mail: {user.primaryEmail}</p>\n          <p><a href={stackServerApp.urls.signOut}>Sign Out</a></p>\n        </div>\n      ) : (\n        <div>\n          <p>You are not logged in</p>\n          <p><a href={stackServerApp.urls.signIn}>Sign in</a></p>\n          <p><a href={stackServerApp.urls.signUp}>Sign up</a></p>\n        </div>\n      )}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"app/profile/page.tsx\"",
        "code": "import { stackServerApp } from \"@/stack\";\nimport { UserButton } from \"@stackframe/stack\";\n\nexport default async function Page() {\n  const user = await stackServerApp.getUser();\n  return (\n    <div>\n      {user ? (\n        <div>\n          <UserButton />\n          <p>Welcome, {user.displayName ?? \"anonymous user\"}</p>\n          <p>Your e-mail: {user.primaryEmail}</p>\n          <p><a href={stackServerApp.urls.signOut}>Sign Out</a></p>\n        </div>\n      ) : (\n        <div>\n          <p>You are not logged in</p>\n          <p><a href={stackServerApp.urls.signIn}>Sign in</a></p>\n          <p><a href={stackServerApp.urls.signUp}>Sign up</a></p>\n        </div>\n      )}\n    </div>\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "example-custom-profile-page",
        "title": "Example: Custom profile page"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-next-steps-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/users",
    "pathname": "/getting-started/users",
    "icon": "fa-regular fa-address-book",
    "title": "Next steps",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#next-steps",
    "content": "In the next guide, we will show you how to put your application into production.",
    "hierarchy": {
      "h0": {
        "title": "Users"
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/production",
    "pathname": "/getting-started/production",
    "icon": "fa-regular fa-rocket",
    "title": "Going to Production",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Steps to prepare Stack for production use",
    "content": "Stack makes development easy with various default settings, but these settings need to be optimized for security and user experience when moving to production. Here's a checklist of things you need to do before switching to production mode:"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-domains-and-handlers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/production",
    "pathname": "/getting-started/production",
    "icon": "fa-regular fa-rocket",
    "title": "Domains and handlers",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#domains-and-handlers",
    "content": "By default, Stack allows all localhost paths as valid callback URLs. This is convenient for development but poses a security risk in production because attackers could use their own domains as callback URLs to intercept sensitive information. Therefore, in production, Stack must know your domain (e.g., https://your-website.com) and only allow callbacks from those domains.\nFollow these steps when you're ready to push your application to production:\nAdd Your Domain: Navigate to the Domain & Handlers tab in the Stack dashboard. If you haven't configured your handler, you can leave it as the default. (Learn more about handlers here).\n\nDisable Localhost Callbacks: For enhanced security, disable the Allow all localhost callbacks for development option.",
    "hierarchy": {
      "h0": {
        "title": "Going to Production"
      },
      "h3": {
        "id": "domains-and-handlers",
        "title": "Domains and handlers"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-oauth-providers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/production",
    "pathname": "/getting-started/production",
    "icon": "fa-regular fa-rocket",
    "title": "OAuth providers",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#oauth-providers",
    "content": "Stack uses shared OAuth keys for development to simplify setup when using \"Sign in with Google/GitHub/etc.\" However, this isn't secure for production as it displays \"Stack Development\" on the providers' consent screens, making it unclear to users if the OAuth request is genuinely from your site. Thus, you should configure your own OAuth keys with the providers and connect them to Stack.\nTo use your own OAuth provider setups in production, follow these steps for each provider you use:\nCreate an OAuth App: On the provider's website, create an OAuth app and set the callback URL to the corresponding Stack callback URL. Copy the client ID and client secret.\n\n\n\n\nGoogle OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/google\n\n\nGitHub OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/github\n\n\nFacebook OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/facebook\n\n\nMicrosoft Azure OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/microsoft\n\n\nSpotify OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/spotify\n\n\nGitlab OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/gitlab\n\n\nBitbucket OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/bitbucket\n\n\nLinkedIn OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/linkedin\n\n\nX OAuth Setup Guide\n\nCallback URL:\n\nhttps://api.stack-auth.com/api/v1/auth/oauth/callback/x\n\nEnter OAuth Credentials: Go to the Auth Methods section in the Stack dashboard, open the provider's settings, switch from shared keys to custom keys, and enter the client ID and client secret.",
    "hierarchy": {
      "h0": {
        "title": "Going to Production"
      },
      "h3": {
        "id": "oauth-providers",
        "title": "OAuth providers"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-email-server-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/production",
    "pathname": "/getting-started/production",
    "icon": "fa-regular fa-rocket",
    "title": "Email server",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#email-server",
    "content": "For development, Stack uses a shared email server, which sends emails from Stack's domain. This is not ideal for production as users may not trust emails from an unfamiliar domain. You should set up an email server connected to your own domain.\nSteps to connect your own email server with Stack:\nSetup Email Server: Configure your own email server and connect it to your domain (this step is beyond Stack's documentation scope).\n\nConfigure Stack's Email Settings: Navigate to the Emails section in the Stack dashboard, click Edit in the Email Server section, switch from Shared to Custom SMTP server, enter your SMTP configurations, and save.",
    "hierarchy": {
      "h0": {
        "title": "Going to Production"
      },
      "h3": {
        "id": "email-server",
        "title": "Email server"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-enabling-production-mode-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/production",
    "pathname": "/getting-started/production",
    "icon": "fa-regular fa-rocket",
    "title": "Enabling production mode",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/docs/getting-started"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#enabling-production-mode",
    "content": "After completing the steps above, you can enable production mode on the Project Settings tab in the Stack dashboard, ensuring that your website runs securely with Stack in a production environment.",
    "hierarchy": {
      "h0": {
        "title": "Going to Production"
      },
      "h3": {
        "id": "enabling-production-mode",
        "title": "Enabling production mode"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/stack-app",
    "pathname": "/concepts/stack-app",
    "icon": "fa-regular fa-folder-gear",
    "title": "The StackApp Object",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "The most important object of your Stack project",
    "content": "By now, you may have seen the useApp() hook and the stackServerApp variable. Both return a StackApp, of type StackClientApp and StackServerApp respectively.\nNearly all of Stack's functionality is on your StackApp object. Think of this object as the \"connection\" from your code to Stack's servers. Each app is always associated with one specific project ID (by default the one found in your environment variables).\nThere is also a page on StackApp in the SDK reference, which lists all available functions."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object-getxyzlistxyz-vs-usexyz-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/stack-app",
    "pathname": "/concepts/stack-app",
    "icon": "fa-regular fa-folder-gear",
    "title": "getXyz/listXyz vs. useXyz",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getxyzlistxyz-vs-usexyz",
    "content": "You will see that most of the asynchronous functions on StackApp come in two flavors: getXyz/listXyz and useXyz. The former are asynchronous fetching functions which return a Promise, while the latter are React hooks that suspend the current component until the data is available.\nNormally, you would choose between the two based on whether you are in a React Server Component or a React Client Component. However, there are some scenarios where you use getXyz on the client, for example as the callback of an onClick handler.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "// server-component.tsx\nasync function ServerComponent() {\n  const app = stackServerApp;\n  // returns a Promise, must be awaited\n  const user = await app.getUser();\n\n  return <div>{user.displayName}</div>;\n}\n\n\n// client-component.tsx\n\"use client\";\nfunction ClientComponent() {\n  const app = useApp();\n  // returns the value directly\n  const user = app.useUser();\n\n  return <div>{user.displayName}</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "The StackApp Object"
      },
      "h2": {
        "id": "getxyzlistxyz-vs-usexyz",
        "title": "getXyz/listXyz vs. useXyz"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object-client-vs-server-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/stack-app",
    "pathname": "/concepts/stack-app",
    "icon": "fa-regular fa-folder-gear",
    "title": "Client vs. server",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#client-vs-server",
    "content": "StackClientApp contains everything needed to build a frontend application, for example the currently authenticated user. It requires a publishable client key in its initialization (usually set by the NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY environment variable).\nStackServerApp has all the functionality of StackClientApp, but also some functions with elevated permissions, eg. listing or modifying ALL users. This requires a secret server key (usually set by the STACK_SECRET_SERVER_KEY environment variable), which must always be kept secret.\nThere is also a third type, StackAdminApp, but it is rarely used. You can use it for automation or internal tools, and can edit your project's configuration.\n\n\nSome of the functions have different return types; for example, StackClientApp.getUser() returns a Promise<User> while StackServerApp.getUser() returns a Promise<ServerUser>. The Server or Admin prefixes indicate that the object contains server-/admin-only functionality.",
    "hierarchy": {
      "h0": {
        "title": "The StackApp Object"
      },
      "h2": {
        "id": "client-vs-server",
        "title": "Client vs. server"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/custom-user-data",
    "pathname": "/concepts/custom-user-data",
    "icon": "fa-regular fa-user-pen",
    "title": "Custom User Data",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "How to store custom user metadata in Stack Auth",
    "content": "Stack Auth allows storing additional user information through three types of metadata fields:\nclientMetadata: Readable and writable from a client.\n\nserverMetadata: Readable and writable only from a server.\n\nclientReadOnlyMetadata: Readable from a client, writable only from a server."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-client-metadata-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/custom-user-data",
    "pathname": "/concepts/custom-user-data",
    "icon": "fa-regular fa-user-pen",
    "title": "Client metadata",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#client-metadata",
    "content": "You can use the clientMetadata field to store non-sensitive information that both the client and server can read and write.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await user.update({\n  clientMetadata: {\n    mailingAddress: \"123 Main St\",\n  },\n});\n\n// On the client:\nconst user = useUser();\nconsole.log(user.clientMetadata);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Custom User Data"
      },
      "h2": {
        "id": "client-metadata",
        "title": "Client metadata"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-server-side-metadata-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/custom-user-data",
    "pathname": "/concepts/custom-user-data",
    "icon": "fa-regular fa-user-pen",
    "title": "Server-side metadata",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#server-side-metadata",
    "content": "For sensitive information, use the serverMetadata field. This ensures the data is only accessible and modifiable by the server.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const user = await stackServerApp.getUser();\nawait user.update({\n  serverMetadata: {\n    secretInfo: \"This is a secret\",\n  },\n});\n\n// To read:\nconst user = await stackServerApp.getUser();\nconsole.log(user.serverMetadata);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Custom User Data"
      },
      "h2": {
        "id": "server-side-metadata",
        "title": "Server-side metadata"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-client-read-only-metadata-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/custom-user-data",
    "pathname": "/concepts/custom-user-data",
    "icon": "fa-regular fa-user-pen",
    "title": "Client read-only metadata",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#client-read-only-metadata",
    "content": "Use clientReadOnlyMetadata for data that clients need to read but never modify, such as subscription status.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "// On the server:\nconst user = await stackServerApp.getUser();\nawait user.update({\n  clientReadOnlyMetadata: {\n    subscriptionPlan: \"premium\",\n  },\n});\n\n// On the client:\nconst user = useUser();\nconsole.log(user.clientReadOnlyMetadata);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Custom User Data"
      },
      "h2": {
        "id": "client-read-only-metadata",
        "title": "Client read-only metadata"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.user-onboarding-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/user-onboarding",
    "pathname": "/concepts/user-onboarding",
    "icon": "fa-regular fa-user-check",
    "title": "User Onboarding",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Implementing a user onboarding page and collecting information on sign-up",
    "content": "By default, Stack Auth collects information such as email addresses from OAuth providers. Sometimes, you may want to collect additional information from users during sign-up, for example a name or address.\nThe most straightforward approach is to redirect users to an onboarding page right after they sign up. However, this is not recommended for the following reasons:\nUsers can accidentally (or purposefully) close or navigate away from the page before completing the onboarding.\n\nRedirect URLs may vary depending on the context. For instance, if a user is redirected to a sign-in page after trying to access a protected page, they'll expect to return to the original protected page post-authentication.\n\n\nInstead, a more reliable strategy is to store an onboarded flag in the user's metadata and redirect users to the onboarding page if they haven't completed it yet."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.user-onboarding-example-implementation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/user-onboarding",
    "pathname": "/concepts/user-onboarding",
    "icon": "fa-regular fa-user-check",
    "title": "Example implementation",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example-implementation",
    "content": "Let's say you have an onboarding page that asks for an address and stores it in the user's metadata:\n\n\nWhile the above implementation offers a basic onboarding process, users can still skip onboarding by directly sending an API request to update the clientMetadata.onboarded flag. If you want to ensure that onboarding cannot be bypassed on the API level, you should create a server endpoint to validate and store the data, then save the onboarded flag in the clientReadonlyMetadata on the server side after validation.\nNext, we can create a hook/function to check if the user has completed onboarding and redirect them to the onboarding page:\n\n\n\n\n\n\nYou can then use these functions wherever onboarding is required:",
    "code_snippets": [
      {
        "lang": "jsx",
        "meta": "title=\"app/onboarding/page.tsx\"",
        "code": "export default function OnboardingPage() {\n  const user = useUser();\n  const router = useRouter();\n  const [address, setAddress] = useState('');\n\n\n  return <>\n    <input \n      type=\"text\" \n      value={address} \n      onChange={(e) => setAddress(e.target.value)} \n    />\n\n    <button onClick={async () => {\n      await user.update({\n        clientMetadata: {\n          onboarded: true,\n          address,\n        },\n      });\n      router.push('/');\n    }}>\n      Submit\n    </button>\n    </>\n  );\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/onboarding-hooks.ts\"",
        "code": "'use client';\nimport { useEffect } from 'react';\nimport { useUser } from '@stackframe/stack';\nimport { useRouter } from 'next/navigation';\n\nexport function useOnboarded() {\n  const user = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!user.clientMetadata.onboarded) {\n      router.push('/onboarding');\n    }\n  }, [user]);\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/onboarding-hooks.ts\"",
        "code": "'use client';\nimport { useEffect } from 'react';\nimport { useUser } from '@stackframe/stack';\nimport { useRouter } from 'next/navigation';\n\nexport function useOnboarded() {\n  const user = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!user.clientMetadata.onboarded) {\n      router.push('/onboarding');\n    }\n  }, [user]);\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/onboarding-functions.ts\"",
        "code": "import { stackServerApp } from '@/stack';\nimport { redirect } from 'next/navigation';\n\nexport async function ensureOnboarded() {\n  const user = await stackServerApp.getUser();\n  if (!user.serverMetadata.onboarded) {\n    redirect('/onboarding');\n  }\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/onboarding-functions.ts\"",
        "code": "import { stackServerApp } from '@/stack';\nimport { redirect } from 'next/navigation';\n\nexport async function ensureOnboarded() {\n  const user = await stackServerApp.getUser();\n  if (!user.serverMetadata.onboarded) {\n    redirect('/onboarding');\n  }\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/page.tsx\"",
        "code": "import { useOnboarding } from '@/app/onboarding-hooks';\nimport { useUser } from '@stackframe/stack';\n\nexport default function HomePage() {\n  useOnboarding();\n  const user = useUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/page.tsx\"",
        "code": "import { useOnboarding } from '@/app/onboarding-hooks';\nimport { useUser } from '@stackframe/stack';\n\nexport default function HomePage() {\n  useOnboarding();\n  const user = useUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/page.tsx\"",
        "code": "import { ensureOnboarding } from '@/app/onboarding-functions';\nimport { stackServerApp } from '@/stack';\n\nexport default async function HomePage() {\n  await ensureOnboarding();\n  const user = await stackServerApp.getUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"app/page.tsx\"",
        "code": "import { ensureOnboarding } from '@/app/onboarding-functions';\nimport { stackServerApp } from '@/stack';\n\nexport default async function HomePage() {\n  await ensureOnboarding();\n  const user = await stackServerApp.getUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User Onboarding"
      },
      "h2": {
        "id": "example-implementation",
        "title": "Example implementation"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/oauth",
    "pathname": "/concepts/oauth",
    "icon": "fa-regular fa-link",
    "title": "Connected OAuth Accounts",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Managing third-party OAuth access tokens",
    "content": "Stack has good support for working with OAuth and OIDC providers, such as Google, Facebook, Microsoft, and others.\nBeyond using OAuth for signing in, Stack can manage your users' access token so you can invoke APIs on their behalf. For example, you can use this to send emails with Gmail, access repositories on GitHub, or access files on OneDrive.\nA connected account is simply an external account that is linked to the user in some way. If you are not using shared keys (see note below), any user created with \"Sign up with OAuth\" is automatically connected to the account they signed up with, but it's also possible to connect a user with a provider that is unavailable for sign in.\n\n\nYou cannot connect a user's accounts with shared OAuth keys. You need to set up your own OAuth client ID and client secret in Stack's dashboard. For more details, check Going to Production."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-connecting-with-oauth-providers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/oauth",
    "pathname": "/concepts/oauth",
    "icon": "fa-regular fa-link",
    "title": "Connecting with OAuth providers",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#connecting-with-oauth-providers",
    "content": "You can access a user's connected account with the user.getConnectedAccount(providerId) function or user.useConnectedAccount(providerId) hook.\nOften, you'll want to redirect the user to the OAuth provider's authorization page if they have not connected the account yet. Just like the getUser(...) function, getConnectedAccount(...) can also take an { or: \"redirect\" } argument to achieve this.\nHere's how to connect with Google:",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "'use client';\n\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  // Redirects to Google authorization if not already connected\n  const account = user.useConnectedAccount('google', { or: 'redirect' });\n  // Account is always defined because of the redirect\n  return <div>Google account connected</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts"
      },
      "h2": {
        "id": "connecting-with-oauth-providers",
        "title": "Connecting with OAuth providers"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-providing-scopes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/oauth",
    "pathname": "/concepts/oauth",
    "icon": "fa-regular fa-link",
    "title": "Providing scopes",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#providing-scopes",
    "content": "Most providers have access control in the form of OAuth scopes. These are the permissions that the user will see on the authorization screen (eg. \"Your App wants access to your calendar\"). For instance, to read Google Drive content, you need the https://www.googleapis.com/auth/drive.readonly scope:\nCheck your provider's API documentation to find a list of available scopes.",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "'use client';\n\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  // Redirects to the Google authorization page, requesting access to Google Drive\n  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/authdrive.readonly'] });\n  // Account is always defined because of the redirect\n  return <div>Google Drive connected</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts"
      },
      "h2": {
        "id": "providing-scopes",
        "title": "Providing scopes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-retrieving-the-access-token-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/oauth",
    "pathname": "/concepts/oauth",
    "icon": "fa-regular fa-link",
    "title": "Retrieving the access token",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#retrieving-the-access-token",
    "content": "Once connected with an OAuth provider, obtain the access token with the account.getAccessToken() function. Check your provider's API documentation to understand how you can use this token to authorize the user in requests.",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/auth/drive.readonly'] });\n  const { accessToken } = account.useAccessToken();\n  const [response, setResponse] = useState<any>();\n\n  useEffect(() => {\n    fetch('https://www.googleapis.com/drive/v3/files', {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then((res) => res.json())\n      .then((data) => setResponse(data))\n      .catch((err) => console.error(err));\n  }, [accessToken]);\n\n  return <div>{response ? JSON.stringify(response) : 'Loading...'}</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts"
      },
      "h2": {
        "id": "retrieving-the-access-token",
        "title": "Retrieving the access token"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-sign-in-default-scopes-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/oauth",
    "pathname": "/concepts/oauth",
    "icon": "fa-regular fa-link",
    "title": "Sign-in default scopes",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#sign-in-default-scopes",
    "content": "To avoid showing the authorization page twice, you can already request scopes during the sign-in flow. This approach is optional. Some applications may prefer to request extra permissions only when needed, while others might want to obtain all necessary permissions upfront.\nTo do this, edit the oauthScopesOnSignIn setting of your stackServerApp:",
    "code_snippets": [
      {
        "lang": "jsx",
        "meta": "title='stack.ts'",
        "code": "export const stackServerApp = new StackServerApp({\n  // ...your other settings...\n  oauthScopesOnSignIn: {\n    google: ['https://www.googleapis.com/authdrive.readonly']\n  }\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts"
      },
      "h2": {
        "id": "sign-in-default-scopes",
        "title": "Sign-in default scopes"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Teams",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Manage teams and team members",
    "content": "Teams provide a structured way to group users and manage their permissions. Users can belong to multiple teams simultaneously, allowing them to represent departments, B2B customers, or projects.\nThe server can perform all operations on a team, but the client can only carry out some actions if the user has the necessary permissions. This applies to all actions that can be performed on a server/client-side User object and a Team object."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-team-permissions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Team permissions",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#team-permissions",
    "content": "If you attempt to perform an action without the necessary team permissions, the function will throw an error. Always check if the user has the required permission before performing any action. Learn more about permissions here.\nHere is an example of how to check if a user has a specific permission on the client",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const user = useUser({ or: 'redirect' });\nconst team = user.useTeam('some-team-id');\n\nif (!team) {\n  return <div>Team not found</div>;\n}\n\nconst hasPermission = user.usePermission(team, '$invite_members');\n\nif (!hasPermission) {\n  return <div>No permission</div>;\n}\n\n// Perform corresponding action like inviting a user"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "concepts",
        "title": "Concepts"
      },
      "h3": {
        "id": "team-permissions",
        "title": "Team permissions"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-team-profile-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Team profile",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#team-profile",
    "content": "A user can have a different profile for each team they belong to (Note this is different to the user's personal profile). This profile contains information like displayName and profileImageUrl. The team profile can be left empty and it will automatically take the user's personal profile information.\nThe team profile is visible to all the other users in the team that have the $read_members permission.",
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "concepts",
        "title": "Concepts"
      },
      "h3": {
        "id": "team-profile",
        "title": "Team profile"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-retrieving-a-users-teams-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Retrieving a user's teams",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#retrieving-a-users-teams",
    "content": "You can list all teams a user belongs to using the listTeams or useTeams functions or fetch a specific team with getTeam or useTeam. These functions work on both clients and servers.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const user = useUser({ or: 'redirect' });\nconst allTeams = user.useTeams();\nconst someTeam = user.useTeam('some-team-id'); // May be null if the user is not a member of this team\n\nreturn (\n  <div>\n    {allTeams.map(team => (\n      <div key={team.id}>{team.displayName}</div>\n    ))}\n  </div>\n  <div>\n    {someTeam ? someTeam.displayName : 'Not a member of this team'}\n  </div>\n);"
      },
      {
        "lang": "tsx",
        "code": "const user = useUser({ or: 'redirect' });\nconst allTeams = user.useTeams();\nconst someTeam = user.useTeam('some-team-id'); // May be null if the user is not a member of this team\n\nreturn (\n  <div>\n    {allTeams.map(team => (\n      <div key={team.id}>{team.displayName}</div>\n    ))}\n  </div>\n  <div>\n    {someTeam ? someTeam.displayName : 'Not a member of this team'}\n  </div>\n);"
      },
      {
        "lang": "tsx",
        "code": "const user = await stackServerApp.getUser({ or: 'redirect' });\nconst allTeams = await user.listTeams();\nconst someTeam = await user.getTeam('some-team-id'); // May be null if the user is not a member of this team\n\nreturn (\n  <div>\n    {allTeams.map(team => (\n      <div key={team.id}>{team.displayName}</div>\n    ))}\n  </div>\n  <div>\n    {someTeam ? someTeam.displayName : 'Not a member of this team'}\n  </div>"
      },
      {
        "lang": "tsx",
        "code": "const user = await stackServerApp.getUser({ or: 'redirect' });\nconst allTeams = await user.listTeams();\nconst someTeam = await user.getTeam('some-team-id'); // May be null if the user is not a member of this team\n\nreturn (\n  <div>\n    {allTeams.map(team => (\n      <div key={team.id}>{team.displayName}</div>\n    ))}\n  </div>\n  <div>\n    {someTeam ? someTeam.displayName : 'Not a member of this team'}\n  </div>"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "retrieving-a-users-teams",
        "title": "Retrieving a user's teams"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-creating-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Creating a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#creating-a-team",
    "content": "To create a team, use the createTeam function on the User object. The user will be added to the team with the default team creator permissions (You can change this on the permissions tab in the Stack dashboard).\nOn the client side, this requires enabling the \"client side team creation\" on the team settings tab in the Stack dashboard.\nTo create a team on the server without adding a specific user, use the createTeam function on the ServerApp object:",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "const team = await user.createTeam({\n  displayName: 'New Team',\n});"
      },
      {
        "lang": "jsx",
        "code": "const team = await stackServerApp.createTeam({\n  displayName: 'New Team',\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "creating-a-team",
        "title": "Creating a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-updating-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Updating a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#updating-a-team",
    "content": "You can update a team with the update function on the Team object.\nOn the client, the user must have the $update_team permission to perform this action.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.update({\n  displayName: 'New Name',\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "updating-a-team",
        "title": "Updating a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-custom-team-metadata-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Custom team metadata",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#custom-team-metadata",
    "content": "You can store custom metadata on a team object, similar to the user object. The metadata can be any JSON object.\nclientMetadata: Can be read and updated on both the client and server sides.\n\nserverMetadata: Can only be read and updated on the server side.\n\nclientReadOnlyMetadata: Can be read on both the client and server sides, but can only be updated on the server side.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.update({\n  clientMetadata: {\n    customField: 'value',\n  },\n});\n\nconsole.log(team.clientMetadata.customField); // 'value'"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "custom-team-metadata",
        "title": "Custom team metadata"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-list-users-in-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "List users in a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#list-users-in-a-team",
    "content": "You can list all users in a team with the listUsers function or the useUsers hook on the Team object. Note that if you want to get the team profile, you need to get it with user.teamProfile.\nOn the client, the current user must have the $read_members permission in the team to perform this action.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "// ... retrieve the team and ensure user has the necessary permissions\n\nconst users = team.useUsers();\n\nreturn (\n  <div>\n    {users.map(user => (\n      <div key={user.id}>{user.teamProfile.displayName}</div>\n    ))}\n  </div>\n);"
      },
      {
        "lang": "tsx",
        "code": "// ... retrieve the team and ensure user has the necessary permissions\n\nconst users = team.useUsers();\n\nreturn (\n  <div>\n    {users.map(user => (\n      <div key={user.id}>{user.teamProfile.displayName}</div>\n    ))}\n  </div>\n);"
      },
      {
        "lang": "tsx",
        "code": "// ... retrieve the team\n\nconst users = await team.listUsers();\n\nreturn (\n  <div>\n    {users.map(user => (\n      <div key={user.id}>{user.teamProfile.displayName}</div>\n    ))}\n  </div>\n);"
      },
      {
        "lang": "tsx",
        "code": "// ... retrieve the team\n\nconst users = await team.listUsers();\n\nreturn (\n  <div>\n    {users.map(user => (\n      <div key={user.id}>{user.teamProfile.displayName}</div>\n    ))}\n  </div>\n);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "list-users-in-a-team",
        "title": "List users in a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-get-current-users-team-profile-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Get current user's team profile",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#get-current-users-team-profile",
    "content": "You can get the current user's team profile with the getTeamProfile or useTeamProfile function on the User object. This function returns the team profile for the team with the given ID.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const teamProfile = user.useTeamProfile(team);"
      },
      {
        "lang": "tsx",
        "code": "const teamProfile = user.useTeamProfile(team);"
      },
      {
        "lang": "tsx",
        "code": "const teamProfile = await user.getTeamProfile(team);"
      },
      {
        "lang": "tsx",
        "code": "const teamProfile = await user.getTeamProfile(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "get-current-users-team-profile",
        "title": "Get current user's team profile"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-invite-a-user-to-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Invite a user to a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#invite-a-user-to-a-team",
    "content": "You can invite a user to a team using the inviteUser function on the Team object. The user will receive an email with a link to join the team.\nOn the client side, the current user must have the $invite_members permission to perform this action.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.inviteUser(email);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "invite-a-user-to-a-team",
        "title": "Invite a user to a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-adding-a-user-to-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Adding a user to a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#adding-a-user-to-a-team",
    "content": "If you want to add a user to a team without sending an email, use the addUser function on the ServerTeam object. This function can only be called on the server side.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.addUser(user.id);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "adding-a-user-to-a-team",
        "title": "Adding a user to a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-removing-a-user-from-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Removing a user from a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#removing-a-user-from-a-team",
    "content": "You can remove a user from a team with the removeUser function on the Team object.\nOn the client side, the current user must have the $remove_members permission to perform this action.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.removeUser(user.id);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "removing-a-user-from-a-team",
        "title": "Removing a user from a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-leaving-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Leaving a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#leaving-a-team",
    "content": "All users can leave a team without any permissions required.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const team = await user.getTeam('some-team-id');\nawait user.leaveTeam(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "leaving-a-team",
        "title": "Leaving a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-deleting-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/orgs-and-teams",
    "pathname": "/concepts/orgs-and-teams",
    "icon": "fa-regular fa-users",
    "title": "Deleting a team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#deleting-a-team",
    "content": "You can delete a team with the delete function on the Team object.\nOn the client side, the current user must have the $delete_team permission to perform this action.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.delete();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Teams"
      },
      "h2": {
        "id": "deleting-a-team",
        "title": "Deleting a team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/team-selection",
    "pathname": "/concepts/team-selection",
    "icon": "fa-regular fa-exchange",
    "title": "Selecting a Team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Switch between multiple teams of a user",
    "content": "A user can be a member of multiple teams, so most websites using teams will need a way to select a \"current team\" that the user is working on. There are two primary methods to accomplish this:\nDeep Link: Each team has a unique URL, for example, your-website.com/team/<team-id>. When a team is selected, it redirects to a page with that team's URL.\n\nCurrent Team: When a user selects a team, the app stores the team as a global \"current team\" state. In this way, the URL of the current team might be something like your-website.com/current-team, and the URL won't change after switching teams."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-deep-link-method-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/team-selection",
    "pathname": "/concepts/team-selection",
    "icon": "fa-regular fa-exchange",
    "title": "Deep Link Method",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#deep-link-method",
    "content": "The deep link method is generally recommended because it avoids some common issues associated with the current team method. If two users share a link while using deep link URLs, the receiving user will always be directed to the correct team's information based on the link.",
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team"
      },
      "h2": {
        "id": "deep-link-method",
        "title": "Deep Link Method"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-current-team-method-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/team-selection",
    "pathname": "/concepts/team-selection",
    "icon": "fa-regular fa-exchange",
    "title": "Current Team Method",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#current-team-method",
    "content": "While the current team method can be simpler to implement, it has a downside. If a user shares a link, the recipient might see information about the wrong team (if their \"current team\" is set differently). This method can also cause problems when a user has multiple browser tabs open with different teams.",
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team"
      },
      "h2": {
        "id": "current-team-method",
        "title": "Current Team Method"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-selected-team-switcher-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/team-selection",
    "pathname": "/concepts/team-selection",
    "icon": "fa-regular fa-exchange",
    "title": "Selected Team Switcher",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#selected-team-switcher",
    "content": "To facilitate team selection, Stack provides a component that looks like this:\nTeamSwitcher\nYou can import and use the SelectedTeamSwitcher component for the \"current team\" method. It updates the selectedTeam when a user selects a team:\nTo combine the switcher with the deep link method, you can pass in urlMap and selectedTeam. The urlMap is a function to generate a URL based on the team information, and selectedTeam is the team that the user is currently working on. This lets you implement \"deep link\" + \"most recent team\". The component will update the user.selectedTeam with the selectedTeam prop:\nTo implement the \"deep link\" + \"default team\" method, where you update the selectedTeam only when the user clicks \"set to default team\" or similar, pass noUpdateSelectedTeam:",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "import { SelectedTeamSwitcher } from \"@stackframe/stack\";\n\nexport function MyPage() {\n  return (\n    <div>\n      <SelectedTeamSwitcher/>\n    </div>\n  );\n}"
      },
      {
        "lang": "jsx",
        "code": "<SelectedTeamSwitcher \n  urlMap={team => `/team/${team.id}`} \n  selectedTeam={team}\n/>"
      },
      {
        "lang": "jsx",
        "code": "<SelectedTeamSwitcher \n  urlMap={team => `/team/${team.id}`} \n  selectedTeam={team} \n  noUpdateSelectedTeam\n/>"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team"
      },
      "h2": {
        "id": "selected-team-switcher",
        "title": "Selected Team Switcher"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-example-deep-link--most-recent-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/team-selection",
    "pathname": "/concepts/team-selection",
    "icon": "fa-regular fa-exchange",
    "title": "Example: Deep Link + Most Recent Team",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example-deep-link--most-recent-team",
    "content": "First, create a page at /app/team/[teamId]/page.tsx to display information about a specific team:\nNext, create a page to display all teams at /app/team/page.tsx:\nNow, if you navigate to http://localhost:3000/team, you should be able to see and interact with the teams.",
    "code_snippets": [
      {
        "lang": "jsx",
        "meta": "title=\"/app/team/[teamId]/page.tsx\" ",
        "code": "\"use client\";\n\nimport { useUser, SelectedTeamSwitcher } from \"@stackframe/stack\";\n\nexport default function TeamPage({ params }: { params: { teamId: string } }) {\n  const user = useUser({ or: 'redirect' });\n  const team = user.useTeam(params.teamId);\n\n  if (!team) {\n    return <div>Team not found</div>;\n  }\n\n  return (\n    <div>\n      <SelectedTeamSwitcher \n        urlMap={team => `/team/${team.id}`} \n        selectedTeam={team}\n      />\n      \n      <p>Team Name: {team.displayName}</p>\n      <p>You are a member of this team.</p>\n    </div>\n  );\n}"
      },
      {
        "lang": "jsx",
        "meta": "title=\"/app/team/page.tsx\"",
        "code": "\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function TeamsPage() {\n  const user = useUser({ or: 'redirect' });\n  const teams = user.useTeams();\n  const router = useRouter();\n  const selectedTeam = user.selectedTeam;\n\n  return (\n    <div>\n      {selectedTeam && \n        <button onClick={() => router.push(`/team/${selectedTeam.id}`)}>\n          Most recent team\n        </button>}\n\n      <h2>All Teams</h2>\n      {teams.map(team => (\n        <button key={team.id} onClick={() => router.push(`/team/${team.id}`)}>\n          Open {team.displayName}\n        </button>\n      ))}\n    </div>\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team"
      },
      "h2": {
        "id": "example-deep-link--most-recent-team",
        "title": "Example: Deep Link + Most Recent Team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Permissions & RBAC",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Control what each user can do and access with the permission system"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-team-permissions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Team Permissions",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#team-permissions",
    "content": "Team permissions control what a user can do within each team. You can create and assign permissions to team members from the Stack dashboard. These permissions could include actions like create_post or read_secret_info, or roles like admin or moderator. Within your app, you can verify if a user has a specific permission within a team.\nPermissions can be nested to create a hierarchical structure. For example, an admin permission can include both moderator and user permissions. We provide tools to help you verify whether a user has a permission directly or indirectly.",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-creating-a-permission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Creating a Permission",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#creating-a-permission",
    "content": "To create a new permission, navigate to the Team Permissions section of the Stack dashboard. You can select the permissions that the new permission will contain. Any permissions included within these selected permissions will also be recursively included.",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      },
      "h3": {
        "id": "creating-a-permission",
        "title": "Creating a Permission"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-system-permissions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "System Permissions",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#system-permissions",
    "content": "Stack comes with a few predefined team permissions known as system permissions. These permissions start with a dollar sign ($). While you can assign these permissions to members or include them within other permissions, you cannot modify them as they are integral to the Stack backend system.",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      },
      "h3": {
        "id": "system-permissions",
        "title": "System Permissions"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-checking-if-a-user-has-a-permission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Checking if a User has a Permission",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#checking-if-a-user-has-a-permission",
    "content": "To check whether a user has a specific permission, use the getPermission method or the usePermission hook on the User object. This returns the Permission object if the user has it; otherwise, it returns null. Always perform permission checks on the server side for business logic, as client-side checks can be bypassed. Here's an example:",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"Check user permission on the client\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function CheckUserPermission() {\n  const user = useUser({ or: 'redirect' });\n  const permission = user.usePermission('read');\n\n  // Don't rely on client-side permission checks for business logic.\n  return (\n    <div>\n      {permission ? 'You have the read permission' : 'You shall not pass'}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"Check user permission on the client\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function CheckUserPermission() {\n  const user = useUser({ or: 'redirect' });\n  const permission = user.usePermission('read');\n\n  // Don't rely on client-side permission checks for business logic.\n  return (\n    <div>\n      {permission ? 'You have the read permission' : 'You shall not pass'}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"Check user permission on the server\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function CheckUserPermission() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permission = await user.getPermission('read');\n\n  // This is a server-side check, so it's secure.\n  return (\n    <div>\n      {permission ? 'You have the read permission' : 'You shall not pass'}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"Check user permission on the server\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function CheckUserPermission() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permission = await user.getPermission('read');\n\n  // This is a server-side check, so it's secure.\n  return (\n    <div>\n      {permission ? 'You have the read permission' : 'You shall not pass'}\n    </div>\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      },
      "h3": {
        "id": "checking-if-a-user-has-a-permission",
        "title": "Checking if a User has a Permission"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-listing-all-permissions-of-a-user-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Listing All Permissions of a User",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listing-all-permissions-of-a-user",
    "content": "To get a list of all permissions a user has, use the listPermissions method or the usePermissions hook on the User object. This method retrieves both direct and indirect permissions. Here is an example:",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"List user permissions on the client\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function DisplayUserPermissions() {\n  const user = useUser({ or: 'redirect' });\n  const permissions = user.usePermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"List user permissions on the client\"",
        "code": "\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function DisplayUserPermissions() {\n  const user = useUser({ or: 'redirect' });\n  const permissions = user.usePermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"List user permissions on the server\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function DisplayUserPermissions() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permissions = await user.listPermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"List user permissions on the server\"",
        "code": "import { stackServerApp } from \"@/stack\";\n\nexport default async function DisplayUserPermissions() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permissions = await user.listPermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      },
      "h3": {
        "id": "listing-all-permissions-of-a-user",
        "title": "Listing All Permissions of a User"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-granting-a-permission-to-a-user-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Granting a Permission to a User",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#granting-a-permission-to-a-user",
    "content": "To grant a permission to a user, use the grantPermission method on the ServerUser. Here's an example:",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const team = await stackServerApp.getTeam('teamId');\nconst user = await stackServerApp.getUser();\nawait user.grantPermission(team, 'read');"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      },
      "h3": {
        "id": "granting-a-permission-to-a-user",
        "title": "Granting a Permission to a User"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-revoking-a-permission-from-a-user-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/permissions",
    "pathname": "/concepts/permissions",
    "icon": "fa-regular fa-user-lock",
    "title": "Revoking a Permission from a User",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#revoking-a-permission-from-a-user",
    "content": "To revoke a permission from a user, use the revokePermission method on the ServerUser. Here's an example:\nBy following these guidelines, you can efficiently manage and verify team permissions within your application.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const team = await stackServerApp.getTeam('teamId');\nconst user = await stackServerApp.getUser();\nawait user.revokePermission(team, 'read');"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC"
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions"
      },
      "h3": {
        "id": "revoking-a-permission-from-a-user",
        "title": "Revoking a Permission from a User"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/webhooks",
    "pathname": "/concepts/webhooks",
    "icon": "fa-regular fa-webhook",
    "title": "Webhooks",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Syncing team & user data with your backend",
    "content": "Webhooks are a powerful way to keep your backend in sync with Stack. They allow you to receive real-time updates when events occur in your Stack project, such as when a user or team is created, updated, or deleted."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-setting-up-webhooks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/webhooks",
    "pathname": "/concepts/webhooks",
    "icon": "fa-regular fa-webhook",
    "title": "Setting up webhooks",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setting-up-webhooks",
    "content": "In the Stack dashboard, you can create a webhook endpoint in the \"Webhooks\" section. After creating this endpoint with your server URL, you will start receiving POST requests with a JSON payload at that endpoint. The event payload will look something like this:",
    "code_snippets": [
      {
        "lang": "json",
        "code": "{\n  \"type\": \"team.created\",\n  \"data\": {\n    \"id\": \"2209422a-eef7-4668-967d-be79409972c5\",\n    \"display_name\": \"My Team\",\n    ...\n  }\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Webhooks"
      },
      "h2": {
        "id": "setting-up-webhooks",
        "title": "Setting up webhooks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-testing-webhooks-locally-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/webhooks",
    "pathname": "/concepts/webhooks",
    "icon": "fa-regular fa-webhook",
    "title": "Testing webhooks locally",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#testing-webhooks-locally",
    "content": "You can use services like Svix Playground or Webhook.site to test the receiving of webhooks or relay them to your local development environment.",
    "hierarchy": {
      "h0": {
        "title": "Webhooks"
      },
      "h2": {
        "id": "testing-webhooks-locally",
        "title": "Testing webhooks locally"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-verifying-webhooks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/webhooks",
    "pathname": "/concepts/webhooks",
    "icon": "fa-regular fa-webhook",
    "title": "Verifying webhooks",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#verifying-webhooks",
    "content": "To ensure the webhook is coming from Stack (and not from a malicious actor) and is not prone to replay attacks, you should verify the request.\nStack signs the webhook payload with a secret key that you can find in the endpoint details on the dashboard. You can verify the signature using the Svix client library. Check out the Svix documentation for instructions on how to verify the signature in JavaScript, Python, Ruby, and other languages. Here is an quick example in JavaScript:\nIf you do not want to install the Svix client library or are using a language that is not supported, you can verify the signature manually.",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "import { Webhook } from \"svix\";\n\nconst secret = \"<from the dashboard>\";\nconst headers = {\n  \"svix-id\": \"<from the webhook request headers>\",\n  \"svix-timestamp\": \"<from the webhook request headers>\",\n  \"svix-signature\": \"<from the webhook request headers>\",\n};\nconst payload = \"<the webhook request body>\";\n\nconst wh = new Webhook(secret);\n// Throws on error, returns the verified content on success\nconst payload = wh.verify(payload, headers);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Webhooks"
      },
      "h2": {
        "id": "verifying-webhooks",
        "title": "Verifying webhooks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-event-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/webhooks",
    "pathname": "/concepts/webhooks",
    "icon": "fa-regular fa-webhook",
    "title": "Event types",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#event-types",
    "content": "Please refer to the webhook endpoint API reference for more details on the available event types and their payload structures.\nuser.created\n\nuser.updated\n\nuser.deleted\n\nteam.created\n\nteam.updated\n\nteam.deleted",
    "hierarchy": {
      "h0": {
        "title": "Webhooks"
      },
      "h2": {
        "id": "event-types",
        "title": "Event types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/webhooks",
    "pathname": "/concepts/webhooks",
    "icon": "fa-regular fa-webhook",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#examples",
    "content": "Some members of the community have shared their webhook implementations. For example, here is an example by Clark GredoÃ±a that validates the Webhook schema and update a database user.",
    "hierarchy": {
      "h0": {
        "title": "Webhooks"
      },
      "h2": {
        "id": "examples",
        "title": "Examples"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/backend-integration",
    "pathname": "/concepts/backend-integration",
    "icon": "fa-regular fa-network-wired",
    "title": "Backend Integration",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Integrate Stack Auth with your own server with the REST APIs",
    "content": "To authenticate your endpoints, you need to send the user's access token in the headers of the request to your server, and then make a request to Stack's server API to verify the user's identity."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration-sending-requests-to-your-server-endpoints-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/backend-integration",
    "pathname": "/concepts/backend-integration",
    "icon": "fa-regular fa-network-wired",
    "title": "Sending requests to your server endpoints",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#sending-requests-to-your-server-endpoints",
    "content": "To authenticate your own server endpoints using Stack's server API, you need to protect your endpoints by sending the user's access token in the headers of the request.\nOn the client side, you can retrieve the access token from the user object by calling user.getAuthJson(). This will return an object containing accessToken.\nThen, you can call your server endpoint with these two tokens in the headers, like this:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const { accessToken } = await user.getAuthJson();\nconst response = await fetch('/api/users/me', {\n  headers: {\n    'x-stack-access-token': accessToken,\n  },\n  // your other options and parameters\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Backend Integration"
      },
      "h2": {
        "id": "sending-requests-to-your-server-endpoints",
        "title": "Sending requests to your server endpoints"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration-authenticating-the-user-on-the-server-endpoints-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/concepts/backend-integration",
    "pathname": "/concepts/backend-integration",
    "icon": "fa-regular fa-network-wired",
    "title": "Authenticating the user on the server endpoints",
    "breadcrumb": [
      {
        "title": "Concepts",
        "pathname": "/docs/concepts"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#authenticating-the-user-on-the-server-endpoints",
    "content": "On the server side, you can extract the access token from the headers of the request and use it to authenticate the user with the REST API.",
    "code_snippets": [
      {
        "lang": "javascript",
        "code": "const url = 'https://api.stack-auth.com/api/v1/users/me';\nconst headers = {\n  'x-stack-access-type': 'server',\n  'x-stack-project-id': 'generated on the Stack Auth dashboard',\n  'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n  'x-stack-access-token': 'access token from the headers',\n};\n\nfetch(url, { headers })\n  .then(response => response.json())\n  .then(data => {\n    if (data.id) {\n      console.log('User is authenticated');\n    } else {\n      console.log('User is not authenticated');\n    }\n  });"
      },
      {
        "lang": "javascript",
        "code": "const url = 'https://api.stack-auth.com/api/v1/users/me';\nconst headers = {\n  'x-stack-access-type': 'server',\n  'x-stack-project-id': 'generated on the Stack Auth dashboard',\n  'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n  'x-stack-access-token': 'access token from the headers',\n};\n\nfetch(url, { headers })\n  .then(response => response.json())\n  .then(data => {\n    if (data.id) {\n      console.log('User is authenticated');\n    } else {\n      console.log('User is not authenticated');\n    }\n  });"
      },
      {
        "lang": "python",
        "code": " import requests\n\n url = 'https://api.stack-auth.com/api/v1/users/me'\n headers = {\n   'x-stack-access-type': 'server',\n   'x-stack-project-id': 'generated on the Stack Auth dashboard',\n   'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n   'x-stack-access-token': 'access token from the headers',\n }\n\n response = requests.get(url, headers=headers)\n if (response.json()['id'] is not None):\n   print('User is authenticated')\n else:\n   print('User is not authenticated')"
      },
      {
        "lang": "python",
        "code": " import requests\n\n url = 'https://api.stack-auth.com/api/v1/users/me'\n headers = {\n   'x-stack-access-type': 'server',\n   'x-stack-project-id': 'generated on the Stack Auth dashboard',\n   'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n   'x-stack-access-token': 'access token from the headers',\n }\n\n response = requests.get(url, headers=headers)\n if (response.json()['id'] is not None):\n   print('User is authenticated')\n else:\n   print('User is not authenticated')"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Backend Integration"
      },
      "h2": {
        "id": "authenticating-the-user-on-the-server-endpoints",
        "title": "Authenticating the user on the server endpoints"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.dark-light-mode-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/dark-mode",
    "pathname": "/customization/dark-mode",
    "icon": "fa-regular fa-circle-half-stroke",
    "title": "Dark/Light Mode",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "npm install next-themes"
      },
      {
        "lang": "jsx",
        "code": "import { ThemeProvider } from 'next-themes'\n\nexport default function Layout({ children }) {\n  return (\n    <ThemeProvider>\n      <StackTheme>\n        {children}\n      </StackTheme>\n    </ThemeProvider>\n  )\n}"
      },
      {
        "lang": "jsx",
        "code": "'use client';\nimport { useTheme } from 'next-themes'\n\nexport default function ColorModeSwitcher() {\n  const { theme, setTheme } = useTheme()\n  return (\n    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n      Toggle theme\n    </button>\n  )\n}"
      }
    ],
    "content": "Stack components support light and dark mode out of the box. You can switch between light and dark mode using next-themes (or any other library that changes the data-theme or class to dark or light attribute of the html element).\nHere is an example of how to set up next-themes with Stack (find more details in the next-themes documentation):\nInstall next-themes:\n\n\nAdd the ThemeProvider to your layout.tsx file:\n\n\nBuild a color mode switcher component:\n\n\nNow if you put the ColorModeSwitcher component in your app, you should be able to switch between light and dark mode. There should be no flickering or re-rendering of the page after reloading."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.colors-and-styles-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/custom-styles",
    "pathname": "/customization/custom-styles",
    "icon": "fa-regular fa-paint-brush",
    "title": "Colors and Styles",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "jsx",
        "meta": "title=\"app/layout.tsx\"",
        "code": "const theme = {\n  light: {\n    primary: 'red',\n  },\n  dark: {\n    primary: '#00FF00',\n  },\n  radius: '8px',\n}\n\n// ...\n\n<StackTheme theme={theme}>\n  {/* children */}\n</StackTheme>"
      }
    ],
    "content": "If you want to spend minimal time on styling but still want to align with your brand, you can customize the colors of the Stack app. Colors are stored in React context and can be easily overridden.\nThere are some color variables that you can customize:\nbackground\n\nforeground\n\ncard\n\ncardForeground\n\npopover\n\npopoverForeground\n\nprimary\n\nprimaryForeground\n\nsecondary\n\nsecondaryForeground\n\nmuted\n\nmutedForeground\n\naccent\n\naccentForeground\n\ndestructive\n\ndestructiveForeground\n\nborder\n\ninput\n\nring\n\n\nAnd some other variables:\nradius: border radius of components like buttons, inputs, etc.\n\n\nThese variables are css variables so you can use the syntax like hsl(0, 0%, 0%), black, #fff, etc.\nThe colors can be different for light and dark mode. You can pass these into the StackTheme component (in your layout.tsx file if you followed the get started guide) as follows:"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/internationalization",
    "pathname": "/customization/internationalization",
    "icon": "fa-regular fa-language",
    "title": "Internationalization",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization-setup-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/internationalization",
    "pathname": "/customization/internationalization",
    "icon": "fa-regular fa-language",
    "title": "Setup",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setup",
    "content": "Internationalization with Stack is very straightforward. Simply pass the lang prop to the StackProvider component, and all the pages will be translated to the specified language.\nBy default, if no language is provided, it will be set to en-US.\nYou can choose which languages to use by employing your own methods, such as storing the language in localStorage or using the user's browser language.",
    "code_snippets": [
      {
        "lang": "jsx",
        "meta": "title=\"layout.tsx\"",
        "code": "...\n  <StackProvider ... lang={'de-DE'}>\n    ...\n  </StackProvider>\n..."
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Internationalization"
      },
      "h2": {
        "id": "setup",
        "title": "Setup"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization-supported-languages-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/internationalization",
    "pathname": "/customization/internationalization",
    "icon": "fa-regular fa-language",
    "title": "Supported languages",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#supported-languages",
    "content": "en-US: English (United States)\n\nde-DE: German (Germany)\n\nes-419: Spanish (Latin America)\n\nes-ES: Spanish (Spain)\n\nfr-CA: French (Canada)\n\nfr-FR: French (France)\n\nit-IT: Italian (Italy)\n\npt-BR: Portuguese (Brazil)\n\npt-PT: Portuguese (Portugal)",
    "hierarchy": {
      "h0": {
        "title": "Internationalization"
      },
      "h2": {
        "id": "supported-languages",
        "title": "Supported languages"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/custom-pages",
    "pathname": "/customization/custom-pages",
    "icon": "fa-regular fa-table-layout",
    "title": "Custom Layouts and Pages",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "If you want to have full control over the layout and logic flow, you can build your own pages using our built-in components or low-level functions.\nBy default, StackHandler creates all pages you need, however, you can replace them with your own pages."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages-simple-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/custom-pages",
    "pathname": "/customization/custom-pages",
    "icon": "fa-regular fa-table-layout",
    "title": "Simple Example",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#simple-example",
    "content": "For example, if you want to create a custom sign-in page with a customized title on the top, you can create a file at app/signin/page.tsx:\nThen you can instruct the Stack app in stack.ts to use your custom sign in page:\nYou are now all set! If you visit the /signin page, you should see your custom sign in page. If your user visits a protected page or the old /handler/sign-in URL, they will be redirected to your new sign-in page.\nFor more examples, please refer to the Examples.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"app/signin/page.tsx\"",
        "code": "import { SignIn } from \"@stackframe/stack\";\n\nexport default function CustomSignInPage() {\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <SignIn />\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"stack.ts\"",
        "code": "export const stackServerApp = new StackServerApp({\n  // ...\n  // add these three lines\n  urls: {\n    signIn: '/signin',\n  }\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Custom Layouts and Pages"
      },
      "h2": {
        "id": "simple-example",
        "title": "Simple Example"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages-from-scratch-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/custom-pages",
    "pathname": "/customization/custom-pages",
    "icon": "fa-regular fa-table-layout",
    "title": "From scratch",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#from-scratch",
    "content": "We also provide the low-level functions powering our components, so that you can build your own logic. For example, to build a custom OAuth sign-in button, create a file at app/signin/page.tsx:\nAgain, edit the Stack app in stack.ts to use your custom sign in page:\nAs above, visit the /signin page to see your newly created custom OAuth page.",
    "code_snippets": [
      {
        "lang": "tsx",
        "meta": "title=\"app/signin/page.tsx\"",
        "code": "'use client';\nimport { useStackApp } from \"@stackframe/stack\";\n\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <button onClick={async () => {\n        // this will redirect to the OAuth provider's login page\n        await app.signInWithOAuth('google');\n      }}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"stack.ts\"",
        "code": "export const stackServerApp = new StackServerApp({\n  // ...\n  // add these three lines\n  urls: {\n    signIn: '/signin',\n  }\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Custom Layouts and Pages"
      },
      "h2": {
        "id": "from-scratch",
        "title": "From scratch"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signin",
    "pathname": "/customization/page-examples/signin",
    "title": "Sign In",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-custom-page-with-signin-component-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signin",
    "pathname": "/customization/page-examples/signin",
    "title": "Custom page with SignIn component",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#custom-page-with-signin-component",
    "content": "You can also use useUser at the beginning of the sign in page to check if wether the user is already signed in and redirect them to some other page if they are.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "'use client';\nimport { SignIn } from \"@stackframe/stack\";\n\nexport default function DefaultSignIn() {\n  // optionally redirect to some other page if the user is already signed in\n  // const user = useUser();\n  // if (user) { redirect to some other page }\n  return <SignIn fullPage />;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Sign In"
      },
      "h2": {
        "id": "custom-page-with-signin-component",
        "title": "Custom page with SignIn component"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-other-useful-components-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signin",
    "pathname": "/customization/page-examples/signin",
    "title": "Other useful components",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#other-useful-components",
    "content": "CredentialSignIn: A component that contains a form for signing in with email and password.\nOAuthGroup: A list of available OAuth provider signin buttons components. The available provider list is fetched from the server.\nOAuthButton: A single OAuth sign in button.",
    "hierarchy": {
      "h0": {
        "title": "Sign In"
      },
      "h2": {
        "id": "other-useful-components",
        "title": "Other useful components"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signup",
    "pathname": "/customization/page-examples/signup",
    "title": "Sign Up",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-page-with-signup-component-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signup",
    "pathname": "/customization/page-examples/signup",
    "title": "Custom page with SignUp component",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#custom-page-with-signup-component",
    "content": "You can also use useUser at the beginning of the sign in page to check if wether the user is already signed in and redirect them to some other page if they are.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "'use client';\nimport { SignUp } from \"@stackframe/stack\";\n\nexport default function DefaultSignUp() {\n  // optionally redirect to some other page if the user is already signed in\n  // const user = useUser();\n  // if (user) { redirect to some other page }\n  return <SignUp fullPage />;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Sign Up"
      },
      "h2": {
        "id": "custom-page-with-signup-component",
        "title": "Custom page with SignUp component"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-other-useful-components-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signup",
    "pathname": "/customization/page-examples/signup",
    "title": "Other useful components",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#other-useful-components",
    "content": "CredentialSignUp: A component that contains a form for signing in with email and password.\nOAuthGroup: A list of available OAuth provider sign-up buttons components. The available provider list is fetched from the server.\nOAuthButton: A single OAuth sign-up button.",
    "hierarchy": {
      "h0": {
        "title": "Sign Up"
      },
      "h2": {
        "id": "other-useful-components",
        "title": "Other useful components"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-oauth-sign-up-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signup",
    "pathname": "/customization/page-examples/signup",
    "title": "Custom OAuth Sign Up",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#custom-oauth-sign-up",
    "content": "OAuth sign-in and sign-up shares the same function. Check out the Sign In example for more information.",
    "hierarchy": {
      "h0": {
        "title": "Sign Up"
      },
      "h2": {
        "id": "custom-oauth-sign-up",
        "title": "Custom OAuth Sign Up"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-magic-link-sign-up-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/customization/page-examples/signup",
    "pathname": "/customization/page-examples/signup",
    "title": "Custom Magic Link Sign Up",
    "breadcrumb": [
      {
        "title": "Customization",
        "pathname": "/docs/customization"
      },
      {
        "title": "Custom Page Examples",
        "pathname": "/docs/customization/custom-page-examples"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#custom-magic-link-sign-up",
    "content": "Magic link sign-in and sign-up shares the same function. Check out the Sign In example for more information.",
    "hierarchy": {
      "h0": {
        "title": "Sign Up"
      },
      "h2": {
        "id": "custom-magic-link-sign-up",
        "title": "Custom Magic Link Sign Up"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.supabase-integration-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/supabase",
    "pathname": "/others/supabase",
    "icon": "fa-regular fa-bolt",
    "title": "Supabase Integration",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Integrate Stack Auth with Supabase RLS",
    "content": "This guide shows how to integrate Stack Auth with Supabase row level security (RLS).\n\n\nThis guide only focuses on the RLS/JWT integration and does not sync user data between Supabase and Stack. You should use webhooks to achieve data sync."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.supabase-integration-setup-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/supabase",
    "pathname": "/others/supabase",
    "icon": "fa-regular fa-bolt",
    "title": "Setup",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setup",
    "content": "Let's create a sample table and some RLS policies to demonstrate how to integrate Stack Auth with Supabase RLS. You can apply the same logic to your own tables and policies.\n\n\nSetup Supabase\nFirst, let's create a Supabase project, then go to the SQL Editor and create a new table with some sample data and RLS policies.\nSetup a new Next.js project\nNow let's create a new Next.js project and install Stack Auth and Supabase client. (more details on Next.js setup, Stack Auth setup, and Supabase setup)\nNow copy the environment variables from the Supabase dashboard to the .env.local file:\nNEXT_PUBLIC_SUPABASE_URL\n\nNEXT_PUBLIC_SUPABASE_ANON_KEY\n\nSUPABASE_JWT_SECRET\n\n\nCopy environment variables from the Stack dashboard to the .env.local file.\nNEXT_PUBLIC_STACK_PROJECT_ID\n\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY\n\nSTACK_SECRET_SERVER_KEY\n\n\nSet up Supbase client\nNow let's create a server action that mints a supabase JWT with the Stack Auth user ID if the user is authenticated.\nAnd now create a helper function to create a Supabase client with the JWT signed by the server action\nFetch data from Supabase\nLet's create an example page that fetches data from Supabase and displays it.\nNow you should be able to compare the data you can view with an anonymous user, an authenticated user. You can also add your user Id to the row 3 of the Supabase table, and you should be able to see the row if and only if you are signed in with that user.\nYou can find the full example here on GitHub.",
    "code_snippets": [
      {
        "lang": "sql",
        "meta": "title=\"Supabase SQL Editor\"",
        "code": "-- Create the 'data' table\nCREATE TABLE data (\n  id bigint PRIMARY KEY,\n  text text NOT NULL,\n  user_id UUID\n);\n\n-- Insert sample data\nINSERT INTO data (id, text, user_id) VALUES\n  (1, 'Everyone can see this', NULL),\n  (2, 'Only authenticated users can see this', NULL),\n  (3, 'Only user with specific id can see this', NULL);\n\n-- Enable Row Level Security\nALTER TABLE data ENABLE ROW LEVEL SECURITY;\n\n-- Allow everyone to read the first row\nCREATE POLICY \"Public read\" ON \"public\".\"data\" TO public\nUSING (id = 1);\n\n-- Allow authenticated users to read the second row\nCREATE POLICY \"Authenticated access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 2);\n\n-- Allow only the owner of the row to read it\nCREATE POLICY \"User access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 3 AND auth.uid() = user_id);"
      },
      {
        "lang": "bash",
        "meta": "title=\"Terminal\"",
        "code": "npx create-next-app@latest -e with-supabase stack-supabase\ncd stack-supabase\nnpx @stackframe/init-stack@latest"
      },
      {
        "lang": "tsx",
        "meta": "title=\"/utils/actions.ts\"",
        "code": "'use server';\n\nimport { stackServerApp } from \"@/stack\";\nimport * as jose from \"jose\";\n\nexport const getSupabaseJwt = async () => {\n  const user = await stackServerApp.getUser();\n\n  if (!user) {\n    return null;\n  }\n\n  const token = await new jose.SignJWT({\n    sub: user.id,\n    role: \"authenticated\",\n  })\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime('1h')\n    .sign(new TextEncoder().encode(process.env.SUPABASE_JWT_SECRET));\n\n  return token;\n};"
      },
      {
        "lang": "tsx",
        "meta": "title=\"/utils/supabase-client.ts\"",
        "code": "import { createBrowserClient } from \"@supabase/ssr\";\nimport { getSupabaseJwt } from \"./actions\";\n\nexport const createSupabaseClient = () => {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { accessToken: async () => await getSupabaseJwt() || \"\" }\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"/app/page.tsx\"",
        "code": "'use client';\n\nimport { createSupabaseClient } from \"@/utils/supabase-client\";\nimport { useStackApp, useUser } from \"@stackframe/stack\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Page() {\n  const app = useStackApp();\n  const user = useUser();\n  const supabase = createSupabaseClient();\n  const [data, setData] = useState<null | any[]>(null);\n\n  useEffect(() => {\n    supabase.from(\"data\").select().then(({ data }) => setData(data ?? []));\n  }, []);\n\n  const listContent = data === null ? \n    <p>Loading...</p> :\n    data.length === 0 ?\n      <p>No notes found</p> :\n      data.map((note) => <li key={note.id}>{note.text}</li>);\n\n  return (\n    <div>\n      {\n        user ? \n        <>\n          <p>You are signed in</p>\n          <p>User ID: {user.id}</p>\n          <Link href={app.urls.signOut}>Sign Out</Link>\n        </> : \n        <Link href={app.urls.signIn}>Sign In</Link>\n      }\n      <h3>Supabase data</h3>\n      <ul>{listContent}</ul>\n    </div>\n  )\n}"
      },
      {
        "lang": "sql",
        "meta": "title=\"Supabase SQL Editor\"",
        "code": "-- Create the 'data' table\nCREATE TABLE data (\n  id bigint PRIMARY KEY,\n  text text NOT NULL,\n  user_id UUID\n);\n\n-- Insert sample data\nINSERT INTO data (id, text, user_id) VALUES\n  (1, 'Everyone can see this', NULL),\n  (2, 'Only authenticated users can see this', NULL),\n  (3, 'Only user with specific id can see this', NULL);\n\n-- Enable Row Level Security\nALTER TABLE data ENABLE ROW LEVEL SECURITY;\n\n-- Allow everyone to read the first row\nCREATE POLICY \"Public read\" ON \"public\".\"data\" TO public\nUSING (id = 1);\n\n-- Allow authenticated users to read the second row\nCREATE POLICY \"Authenticated access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 2);\n\n-- Allow only the owner of the row to read it\nCREATE POLICY \"User access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 3 AND auth.uid() = user_id);"
      },
      {
        "lang": "bash",
        "meta": "title=\"Terminal\"",
        "code": "npx create-next-app@latest -e with-supabase stack-supabase\ncd stack-supabase\nnpx @stackframe/init-stack@latest"
      },
      {
        "lang": "tsx",
        "meta": "title=\"/utils/actions.ts\"",
        "code": "'use server';\n\nimport { stackServerApp } from \"@/stack\";\nimport * as jose from \"jose\";\n\nexport const getSupabaseJwt = async () => {\n  const user = await stackServerApp.getUser();\n\n  if (!user) {\n    return null;\n  }\n\n  const token = await new jose.SignJWT({\n    sub: user.id,\n    role: \"authenticated\",\n  })\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime('1h')\n    .sign(new TextEncoder().encode(process.env.SUPABASE_JWT_SECRET));\n\n  return token;\n};"
      },
      {
        "lang": "tsx",
        "meta": "title=\"/utils/supabase-client.ts\"",
        "code": "import { createBrowserClient } from \"@supabase/ssr\";\nimport { getSupabaseJwt } from \"./actions\";\n\nexport const createSupabaseClient = () => {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { accessToken: async () => await getSupabaseJwt() || \"\" }\n  );\n}"
      },
      {
        "lang": "tsx",
        "meta": "title=\"/app/page.tsx\"",
        "code": "'use client';\n\nimport { createSupabaseClient } from \"@/utils/supabase-client\";\nimport { useStackApp, useUser } from \"@stackframe/stack\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Page() {\n  const app = useStackApp();\n  const user = useUser();\n  const supabase = createSupabaseClient();\n  const [data, setData] = useState<null | any[]>(null);\n\n  useEffect(() => {\n    supabase.from(\"data\").select().then(({ data }) => setData(data ?? []));\n  }, []);\n\n  const listContent = data === null ? \n    <p>Loading...</p> :\n    data.length === 0 ?\n      <p>No notes found</p> :\n      data.map((note) => <li key={note.id}>{note.text}</li>);\n\n  return (\n    <div>\n      {\n        user ? \n        <>\n          <p>You are signed in</p>\n          <p>User ID: {user.id}</p>\n          <Link href={app.urls.signOut}>Sign Out</Link>\n        </> : \n        <Link href={app.urls.signIn}>Sign In</Link>\n      }\n      <h3>Supabase data</h3>\n      <ul>{listContent}</ul>\n    </div>\n  )\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Supabase Integration"
      },
      "h2": {
        "id": "setup",
        "title": "Setup"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Self-Hosting",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "Self-host Stack Auth on your own server",
    "content": "Stack Auth is fully open-source and can be self-hosted on your own infrastructure. This guide will introduce each component of the project and how to set them up.\n\n\nIf you are unsure whether you should self-host, here are some things to consider:\nComplexity: Stack Auth is a complex project with many interdependent services. Self-hosting requires managing these services and ensuring they work together seamlessly.\n\nUpdates: Stack Auth is a rapidly evolving project with frequent feature and fix releases. Self-hosting requires you to manage updates and apply them timely.\n\nReliability: Self-hosting requires you to ensure the reliability of your infrastructure. Downtimes and outages can be costly to handle.\n\nSecurity: Self-hosting requires ensuring the security of your infrastructure. A compromised service can affect your users.\n\n\nFor most users, we recommend using Stack Auth's cloud hosted solution. However, if you understand the above challenges and are comfortable managing them, follow the instructions below to self-host!"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-services-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Services",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#services",
    "content": "On a high level, Stack Auth is composed of the following services:\nAPI backend: The core of Stack Auth, providing the REST API that the dashboard and your app connect to. This is what api.stack-auth.com provides.\n\nDashboard: The interface for managing users, teams, auth methods, etc. This is available at app.stack-auth.com.\n\nClient SDK: An SDK used to connect your app to the Stack Auth API backend, wrapping API calls and providing easy-to-use interfaces. More details here.\n\nPostgres database: Used to store all user data. We use Prisma as the ORM and manage the database schema migrations.\n\nSvix: Used to send webhooks. Svix is open-source and can be self-hosted, but also offers a cloud hosted solution. More on Svix here\n\nEmail server: We use Inbucket as a local email server for development and a separate SMTP server for production. Any email service supporting SMTP will work.",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "services",
        "title": "Services"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-setup-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Setup",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setup",
    "content": "Clone the repository and check out the directory:\nPre-populated .env files for the setup below are available and used by default in .env.development in each package. Copy all the .env.development files to .env.local in the respective packages for local development.\nIn a terminal, start the dependencies (Postgres and Inbucket) as Docker containers:\nThen open a new terminal:\nYou can now open the dashboard at http://localhost:8101, the API on port 8102, a demo on port 8103, docs on port 8104, Inbucket (emails) on port 8105, and Prisma Studio on port 8106.\nYour IDE may show errors on all @stackframe/XYZ imports. To fix this, restart the TypeScript language server; for example, in VSCode, you can open the command palette (Ctrl+Shift+P) and run Developer: Reload Window or TypeScript: Restart TS server.",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "git clone git@github.com:stack-auth/stack.git\ncd stack"
      },
      {
        "lang": "sh",
        "code": "docker compose -f dependencies.compose.yaml up"
      },
      {
        "lang": "sh",
        "code": "pnpm install\n\n# Build everything once\npnpm run build\n\n# Initialize the database and seed it with some data\npnpm prisma db push\npnpm prisma db seed\n\n# Run code generation (repeat this after e.g., changing the Prisma schema). This is part of the build script but faster.\npnpm run codegen\n\n# Start the dev server\npnpm run dev\n\n# In a different terminal, run tests in watch mode\npnpm run test"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "local-development",
        "title": "Local development"
      },
      "h3": {
        "id": "setup",
        "title": "Setup"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-database-migrations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Database migrations",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#database-migrations",
    "content": "If you make changes to the Prisma schema, you need to run the following command to create a migration:",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "pnpm run prisma migrate dev"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "local-development",
        "title": "Local development"
      },
      "h3": {
        "id": "database-migrations",
        "title": "Database migrations"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-database-svix-email-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Database, Svix, email",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#database-svix-email",
    "content": "Deploy these services with your preferred platform. Copy the URLs/API keysâ€”you'll need them in the next step.",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment"
      },
      "h3": {
        "id": "database-svix-email",
        "title": "Database, Svix, email"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-api-backend-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "API backend",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#api-backend",
    "content": "Clone the repository and check out the root directory:\nSet all the necessary environment variables (you can check out apps/backend/.env). Note that STACK_BASE_URL should be the URL of your deployed domain (e.g., https://your-backend-url.com).\nBuild and start the server:",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "git clone git@github.com:stack-auth/stack.git\ncd stack"
      },
      {
        "lang": "sh",
        "code": "pnpm install\npnpm build:backend\npnpm start:backend"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment"
      },
      "h3": {
        "id": "api-backend",
        "title": "API backend"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-dashboard-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Dashboard",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#dashboard",
    "content": "Clone the repository (if you are running it on a separate server, or skip this step if you are using the same server as the API backend) and check out the dashboard directory:\nSet all the necessary environment variables (you can check out apps/dashboard/.env). Note that NEXT_PUBLIC_STACK_URL should be the URL of your deployed backend (e.g., https://your-backend-url.com).\nBuild and start the server:",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "git clone git@github.com:stack-auth/stack.git\ncd stack"
      },
      {
        "lang": "sh",
        "code": "pnpm install\npnpm build:dashboard\npnpm start:dashboard"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment"
      },
      "h3": {
        "id": "dashboard",
        "title": "Dashboard"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-initialize-the-database-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/others/self-host",
    "pathname": "/others/self-host",
    "icon": "fa-regular fa-house-laptop",
    "title": "Initialize the database",
    "breadcrumb": [
      {
        "title": "Others",
        "pathname": "/docs/others"
      }
    ],
    "tab": {
      "title": "Documentation",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#initialize-the-database",
    "content": "You need to initialize the database with the following command with the backend environment variables set:\nThe database is still empty; you need to create a project with the ID \"internal\" used by the dashboard to authenticate itself. You can do this with the following command:\nNow you can go to the dashboard (e.g., https://your-dashboard-url.com) and sign up for an account.\nTo manage your dashboard configs with this account, manually go into the database, find the user you just created, and add { managedProjectIds: [\"internal\"] } to the serverMetadata jsonb column.\nGo back to the dashboard, refresh the page, and you should see the \"Stack Dashboard\" project. We recommend disabling new user sign-ups to your internal project to avoid unauthorized account and project creations.\nNow, create a new project for your app and follow the normal setup process. Add NEXT_PUBLIC_STACK_URL=https://your-backend-url.com to your app's environment variables so that it connects to your API backend instead of the default Stack Auth API backend (https://api.stack-auth.com).",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "pnpm prisma migrate deploy"
      },
      {
        "lang": "sh",
        "code": "pnpm prisma db seed"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting"
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment"
      },
      "h3": {
        "id": "initialize-the-database",
        "title": "Initialize the database"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.user-button-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/user-button",
    "pathname": "/components/user-button",
    "title": "<UserButton />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Renders a user button component with optional user information, color mode toggle, and extra menu items.\nUserButton"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.user-button-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/user-button",
    "pathname": "/components/user-button",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "showUserInfo: boolean - Whether to display user information (display name and email) or only show the avatar.\n\ncolorModeToggle: () => void | Promise<void> - Function to be called when the color mode toggle button is clicked. If specified, a color mode toggle button will be shown.\n\nextraItems: Array<{text: string, icon: React.ReactNode, onClick: Function}> - Additional menu items to display.",
    "hierarchy": {
      "h0": {
        "title": "<UserButton />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.selected-team-switcher-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/selected-team-switcher",
    "pathname": "/components/selected-team-switcher",
    "title": "<SelectedTeamSwitcher />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A React component for switching between teams. It displays a dropdown of teams and allows the user to select a team.\nSelectedTeamSwitcher\nFor a comprehensive guide on using this component, refer to our Team Selection documentation."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.selected-team-switcher-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/selected-team-switcher",
    "pathname": "/components/selected-team-switcher",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "urlMap (optional): (team: Team) => string - A function that maps a team to a URL. If provided, the component will navigate to this URL when a team is selected.\n\nselectedTeam (optional): Team - The initially selected team.\n\nnoUpdateSelectedTeam (optional): boolean - If true, prevents updating the selected team in the user's settings when a new team is selected. Default is false.",
    "hierarchy": {
      "h0": {
        "title": "<SelectedTeamSwitcher />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.account-settings-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/account-settings",
    "pathname": "/components/account-settings",
    "title": "<AccountSettings />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Renders an account settings page with customizable sidebar items and optional full-page layout."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.account-settings-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/account-settings",
    "pathname": "/components/account-settings",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "fullPage (optional): boolean - If true, renders the component in full-page mode.\n\nextraItems (optional): Array - Additional items to be added to the sidebar. Each item should have the following properties:\ntitle: string - The title of the item.\n\nicon: LucideIcon - The icon component for the item.\n\ncontent: React.ReactNode - The content to be rendered for the item.\n\nsubpath: string - The subpath for the item's route.",
    "hierarchy": {
      "h0": {
        "title": "<AccountSettings />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.sign-in-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/sign-in",
    "pathname": "/components/sign-in",
    "title": "<SignIn />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Renders a sign-in component with customizable options.\nSignIn\nFor more information, please refer to the custom pages guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.sign-in-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/sign-in",
    "pathname": "/components/sign-in",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "fullPage (optional): boolean - If true, renders the sign-in page in full-page mode.\n\nautomaticRedirect (optional): boolean - If true, redirect to afterSignIn URL if the user is already signed-in.\n\nextraInfo (optional): React.ReactNode - Additional content to be displayed on the sign-in page.\n\nfirstTab (optional): 'magic-link' | 'password' - Determines which tab is initially active. Defaults to 'magic-link' if not specified.",
    "hierarchy": {
      "h0": {
        "title": "<SignIn />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.sign-up-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/sign-up",
    "pathname": "/components/sign-up",
    "title": "<SignUp />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A component that renders a sign-up page with various customization options.\nSignUp\nFor more information, please refer to the custom pages guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.sign-up-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/sign-up",
    "pathname": "/components/sign-up",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "fullPage (optional): boolean - If true, renders the sign-up page in full-page mode.\n\nautomaticRedirect (optional): boolean - If true, redirect to afterSignUp URL if the user is already signed-in.\n\nnoPasswordRepeat (optional): boolean - If true, removes the password confirmation field.\n\nextraInfo (optional): React.ReactNode - Additional information to display on the sign-up page.\n\nfirstTab (optional): `'magic-link' | 'password' - Determines which tab is initially active. Defaults to 'magic-link' if not specified.",
    "hierarchy": {
      "h0": {
        "title": "<SignUp />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-in-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/credential-sign-in",
    "pathname": "/components/credential-sign-in",
    "title": "<CredentialSignIn />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A component that renders a sign-in form with email and password fields.\nCredentialSignIn\nNote that if credential sign-in is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.\nFor more information, please refer to the custom pages guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-in-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/credential-sign-in",
    "pathname": "/components/credential-sign-in",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "This component does not accept any props.",
    "hierarchy": {
      "h0": {
        "title": "<CredentialSignIn />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-up-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/credential-sign-up",
    "pathname": "/components/credential-sign-up",
    "title": "<CredentialSignUp />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A component that renders a sign-up form with email and password fields.\nCredentialSignUp\nNote that if credential sign-up is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.\nFor more information, please refer to the custom pages guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-up-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/credential-sign-up",
    "pathname": "/components/credential-sign-up",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "noPasswordRepeat (optional): boolean - If set to true, the form will not include a password repeat field.",
    "hierarchy": {
      "h0": {
        "title": "<CredentialSignUp />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/oauth-button",
    "pathname": "/components/oauth-button",
    "title": "<OAuthButton />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Renders a customized OAuth button for various providers to initiate sign-in or sign-up processes.\nOAuthButton\nNote that if the specific OAuth provider is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.\nFor more information, please refer to the custom pages guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/oauth-button",
    "pathname": "/components/oauth-button",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "provider: string - The name of the OAuth provider (e.g., 'google', 'github', 'facebook').\n\ntype: 'sign-in' | 'sign-up' - Determines whether the button text is for signing in or signing up. (both are the same in terms of functionality)",
    "hierarchy": {
      "h0": {
        "title": "<OAuthButton />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/oauth-button",
    "pathname": "/components/oauth-button",
    "title": "Example",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example",
    "content": "The OAuthButton component automatically styles itself based on the provided OAuth provider and handles the sign-in or sign-up process when clicked.",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "import { OAuthButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <OAuthButton provider=\"google\" type=\"sign-in\" />\n      <OAuthButton provider=\"github\" type=\"sign-up\" />\n    </div>\n  );\n}\n"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "<OAuthButton />"
      },
      "h2": {
        "id": "example",
        "title": "Example"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-group-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/oauth-button-group",
    "pathname": "/components/oauth-button-group",
    "title": "<OAuthButtonGroup />",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Renders all the available OAuth buttons for sign-in or sign-up functionality.\nOAuthButtonGroup\nNote that if there are no OAuth providers enabled in the dashboard, this component will be empty."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-group-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/oauth-button-group",
    "pathname": "/components/oauth-button-group",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Components",
        "pathname": "/components/components"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "type: 'sign-in' | 'sign-up' - Specifies whether the buttons text are for sign-in or sign-up (both are the same in terms of functionality).",
    "hierarchy": {
      "h0": {
        "title": "<OAuthButtonGroup />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-handler-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/stack-handler",
    "pathname": "/components/stack-handler",
    "title": "<StackHandler />",
    "breadcrumb": [
      {
        "title": "Utilities",
        "pathname": "/components/utilities"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "Renders the appropriate authentication or account-related component based on the current route.\nFor detailed usage instructions, please refer to the manual section of the setup guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-handler-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/stack-handler",
    "pathname": "/components/stack-handler",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Utilities",
        "pathname": "/components/utilities"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "app: StackServerApp - The Stack server application instance.\n\nparams: { stack?: string[] } - The route parameters, where stack is an array of path segments.\n\nsearchParams: Record<string, string> - The URL search parameters.\n\nfullPage: boolean - Whether to render the component in full-page mode.\n\ncomponentProps: { [K in keyof Components]?: Partial<ComponentProps<Components[K]>> } - Props to pass to the rendered components.",
    "hierarchy": {
      "h0": {
        "title": "<StackHandler />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-provider-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/stack-provider",
    "pathname": "/components/stack-provider",
    "title": "<StackProvider />",
    "breadcrumb": [
      {
        "title": "Utilities",
        "pathname": "/components/utilities"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A React component that provides Stack context to its children.\nFor detailed usage instructions, please refer to the manual section of the setup guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-provider-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/stack-provider",
    "pathname": "/components/stack-provider",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Utilities",
        "pathname": "/components/utilities"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "children: React.ReactNode - The child components to be wrapped by the StackProvider.\n\napp: StackClientApp | StackServerApp - The Stack app instance to be used.\n\nlang (optional): \"en-US\" | \"de-DE\" | \"es-419\" | \"es-ES\" | \"fr-CA\" | \"fr-FR\" | \"it-IT\" | \"pt-BR\" | \"pt-PT\" - The language to be used for translations.",
    "hierarchy": {
      "h0": {
        "title": "<StackProvider />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-theme-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/stack-theme",
    "pathname": "/components/stack-theme",
    "title": "<StackTheme />",
    "breadcrumb": [
      {
        "title": "Utilities",
        "pathname": "/components/utilities"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A component that applies a theme to its children.\nFor more information, please refer to the color and styles guide."
  },
  {
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-theme-props-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/components/stack-theme",
    "pathname": "/components/stack-theme",
    "title": "Props",
    "breadcrumb": [
      {
        "title": "Utilities",
        "pathname": "/components/utilities"
      }
    ],
    "tab": {
      "title": "Components",
      "pathname": "/components"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#props",
    "content": "theme (optional): ThemeConfig - Custom theme configuration to override the default theme.\n\nchildren (optional): React.ReactNode - Child components to be rendered within the themed context.",
    "hierarchy": {
      "h0": {
        "title": "<StackTheme />"
      },
      "h2": {
        "id": "props",
        "title": "Props"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "User",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "This is a detailed reference for the User object. If you're looking for a more high-level overview, please refer to our guide on users here."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-different-types-of-user-objects-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "Different types of User objects",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#different-types-of-user-objects",
    "content": "There are a few types of user objects in Stack Auth:\nCurrentUser\nRepresents the authenticated user on the client side\n\nHas an active session (typically stored in browser cookies)\n\nUsed in client-side code\n\nObtained by calling useUser() in a Client Component\n\n\n\nServerUser\nRepresents a user on the server side without an active session\n\nextends most of the attributes and methods of CurrentUser\n\nHas additional capabilities like being able to update emails or passwords without confirmation\n\nLacks session-dependent functions like signOut()\n\nObtained by calling stackServerApp.getUser('user_id_123') or stackServerApp.listUsers() on the server side\n\n\n\nCurrentServerUser\nCombines attributes and methods of both ServerUser and CurrentUser\n\nObtained by calling stackServerApp.getUser() on the server side\n\n\n\n\nThese user types provide flexible and secure user management across both client and server environments, each serving a specific purpose in different application contexts.",
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "different-types-of-user-objects",
        "title": "Different types of User objects"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-currentuser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "CurrentUser",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#currentuser",
    "content": "You can call useUser() or stackServerApp.getUser() to get the CurrentUser object.",
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The user ID. This is the unique identifier of the user.\n\n\nThe display name of the user. Can be changed by the user.\n\n\nThe primary email of the user. Note: this is not unique.\n\n\nWhether the primary email is verified.\n\n\nThe profile image URL of the user.\n\n\nThe Date when the user signed up.\n\n\nWhether the user has a password set.\n\n\nThe JSON metadata that is visible on the client side. Note that this should not contain information that should be kept private on the server side or information that should not be modified by the client.\n\n\nMetadata that can be read on the client side but can only be modified on the server side.\n\n\nThe currently selected team for the user, if applicable.",
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-update-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "update()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update",
    "content": "Update the user information.\nParameters:\n\n\n\n\n\n\n\n\nThe new display name for the user.\n\n\nCustom metadata visible to the client.\n\n\nThe ID of the team to set as selected, or null to clear selection.\n\n\nThe URL of the user's new profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await user.update({\n  displayName: \"New Display Name\",\n  clientMetadata: {\n    address: \"123 Main St\",\n  },\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "update",
        "title": "update()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "getTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getteam",
    "content": "Get the team with the given ID.\nParameters:\n\n\n\n\nThe ID of the team to get.\nReturns:\n\n\nPromise<Team | null>: The team object, or null if the team is not found (either because it doesn't exist or because the user is not a member of the team).\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const team = await user.getTeam(\"teamId\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "getteam",
        "title": "getTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-useteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "useTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useteam",
    "content": "Get the team with the given ID.\nThis is the same as getTeam but it is a React hook.\nParameters:\n\n\n\n\nThe ID of the team to get.\nReturns:\n\n\nTeam | null: The team object, or null if the team is not found (either because it doesn't exist or because the user is not a member of the team).\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const team = user.useTeam(\"teamId\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "useteam",
        "title": "useTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listteams-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "listTeams()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listteams",
    "content": "List all the teams the user is a member of.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<Team[]>: The list of teams.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const teams = await user.listTeams();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "listteams",
        "title": "listTeams()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-useteams-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "useTeams()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useteams",
    "content": "List all the teams the user is a member of.\nThis is the same as listTeams but it is a React hook.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nTeam[]: The list of teams.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const teams = user.useTeams();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "useteams",
        "title": "useTeams()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-setselectedteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "setSelectedTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#setselectedteam",
    "content": "Parameters:\n\n\n\n\nThe team to set as selected, or null to clear selection.\nReturns:\n\n\nPromise<void>\nSet the currently selected team for the user.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const team = await user.getTeam(\"team_id_123\");\nawait user.setSelectedTeam(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "setselectedteam",
        "title": "setSelectedTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-createteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "createTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#createteam",
    "content": "Create a new team for the user. The user will be added to the team and be given the creator permissions.\nNote that if client side team creation is disabled in the Stack dashboard, this will throw an error.\nParameters:\n\n\n\n\n\n\n\n\nThe display name for the team.\n\n\nThe URL of the team's profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\nReturns:\n\n\nPromise<Team>: The created team.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const team = await user.createTeam({\n  displayName: \"New Team\",\n  profileImageUrl: \"https://example.com/profile.jpg\",\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "createteam",
        "title": "createTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-leaveteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "leaveTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#leaveteam",
    "content": "Leave a team.\nNote that if the user is not a member of the team, this will throw an error.\nParameters:\n\n\n\n\nThe team to leave.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await user.leaveTeam(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "leaveteam",
        "title": "leaveTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getteamprofile-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "getTeamProfile()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getteamprofile",
    "content": "Get the user's profile for a team.\nParameters:\n\n\n\n\nThe team to get the profile for.\nReturns:\n\n\nPromise<EditableTeamMemberProfile>: The editable team member profile\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const profile = await user.getTeamProfile(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "getteamprofile",
        "title": "getTeamProfile()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-useteamprofile-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "useTeamProfile()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useteamprofile",
    "content": "Get the user's profile for a team.\nThis is the same as getTeamProfile but it is a React hook.\nParameters:\n\n\n\n\nThe team to get the profile for.\nReturns:\nEditableTeamMemberProfile: The editable team member profile\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const profile = user.useTeamProfile(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "useteamprofile",
        "title": "useTeamProfile()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-haspermission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "hasPermission()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#haspermission",
    "content": "Parameters:\n\n\n\n\nThe team to check the permission for.\n\n\nThe ID of the permission to check.\nReturns:\n\n\nPromise<boolean>: Whether the user has the permission.\nThis will check if the user has a permission for a team. Note that if the permission is not defined in the Stack dashboard, it will still return false.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const hasPermission = await user.hasPermission(team, \"permissionId\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "haspermission",
        "title": "hasPermission()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getpermission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "getPermission()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getpermission",
    "content": "Parameters:\n\n\n\n\nThe team to get the permission for.\n\n\nThe ID of the permission to get.\n\n\n\n\n\n\nWhether to get the permission recursively. default true.\nReturns:\n\n\nPromise<TeamPermission | null>: The permission object, or null if the permission is not found.\nThis will get the permission of a user for a team. Note that if the permission is not defined in the Stack dashboard, it will still return null.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const permission = await user.getPermission(team, \"read_secret_info\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "getpermission",
        "title": "getPermission()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usepermission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "usePermission()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usepermission",
    "content": "TeamPermission | null: The permission object, or null if the permission is not found.\n\n\nThis will get the permission of a user for a team. Note that if the permission is not defined in the Stack dashboard, it will still return null.\nThis is the same as getPermission but it is a React hook.\nParameters:\n\n\n\n\nThe team to get the permission for.\n\n\nThe ID of the permission to get.\n\n\n\n\n\n\nWhether to get the permission recursively. default true.\nReturns:\n\n\nTeamPermission | null: The permission object, or null if the permission is not found.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const permission = user.usePermission(team, \"read_secret_info\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "usepermission",
        "title": "usePermission()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listpermissions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "listPermissions()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listpermissions",
    "content": "List all the permissions a user has for a team.\nParameters:\n\n\n\n\nThe team to list the permissions for.\n\n\n\n\n\n\nWhether to list the permissions recursively. default true.\nReturns:\n\n\nPromise<TeamPermission[]>: The list of permissions.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const permissions = await user.listPermissions(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "listpermissions",
        "title": "listPermissions()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usepermissions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "usePermissions()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usepermissions",
    "content": "List all the permissions a user has for a team.\nThis is the same as listPermissions but it is a React hook.\nParameters:\n\n\n\n\nThe team to use the permissions for.\n\n\n\n\n\n\nWhether to use the permissions recursively. default true.\nReturns:\n\n\nTeamPermission[]: The list of permissions.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const permissions = user.usePermissions(team);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "usepermissions",
        "title": "usePermissions()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listcontactchannels-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "listContactChannels()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listcontactchannels",
    "content": "List all the contact channels of the user.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<ContactChannel[]>: The list of contact channels.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const contactChannels = await user.listContactChannels();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "listcontactchannels",
        "title": "listContactChannels()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usecontactchannels-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "useContactChannels()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usecontactchannels",
    "content": "List all the contact channels of the user.\nThis is the same as listContactChannels but it is a React hook.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nContactChannel[]: The list of contact channels.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const contactChannels = user.useContactChannels();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "usecontactchannels",
        "title": "useContactChannels()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-updatepassword-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "updatePassword()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#updatepassword",
    "content": "This will update the user's password. It will return an error object (not throw an error) if the passwords mismatch or if the new password does not meet the requirements. If successful, it will return undefined.\nParameters:\n\n\n\n\n\n\n\n\nThe old password.\n\n\nThe new password.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const result = await user.updatePassword({\n  oldPassword: \"currentPassword\",\n  newPassword: \"newPassword\",\n});\nif (result.status === \"error\" ) {\n  console.error(\"Error updating password\", result.error);\n} else {\n  console.log(\"Password updated\");\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "updatepassword",
        "title": "updatePassword()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getauthjson-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "getAuthJson()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getauthjson",
    "content": "This will return the authentication tokens of the user. This is normally then used for authentication to an external server. See more details here.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<{ accessToken: string | null }>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const { accessToken } = await user.getAuthJson();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "getauthjson",
        "title": "getAuthJson()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-signout-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "signOut()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#signout",
    "content": "This will sign out the user and clear the session.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await user.signOut();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "signout",
        "title": "signOut()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-delete-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "delete()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#delete",
    "content": "Delete the user. Use it with caution as it is irreversible. Note that this only works if the \"allow client side user deletion\" option is enabled in the Stack dashboard.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await user.delete();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser"
      },
      "h3": {
        "id": "delete",
        "title": "delete()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-serveruser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "ServerUser",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#serveruser",
    "content": "ServerUser is only available on the server side. Some of the methods on the StackServerApp return ServerUser objects, for example stackServerApp.listUsers() or stackServerApp.getUser('user_id_123').\nThe ServerUser object contains everything in the CurrentUser object, except for the following methods:\nsignOut()\n\ngetAuthJson()\n\n\nIt also has some additional properties and methods (some of the methods have the same name but more capabilities):",
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-properties-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties-1",
    "content": "The last active at date of the user.\n\n\nThe server metadata of the user. Only readable and writable on the server side.",
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-update-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "update()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update-1",
    "content": "Update the user information.\nThis is similar to the CurrentUser.update() method, but is strictly more powerful (like update password, update server metadata, etc.)\nParameters:\n\n\n\n\n\n\n\n\nThe new display name for the user.\n\n\nCustom metadata visible to the client.\n\n\nThe ID of the team to set as selected, or null to clear selection.\n\n\nThe URL of the user's new profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\n\n\nMetadata that can be read on the client side but can only be modified on the server side.\n\n\nMetadata that can be read and modified on the server side.\n\n\nThe new password for the user.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await serverUser.update({\n  displayName: \"New Display Name\",\n  password: \"newPassword\",\n  serverMetadata: {\n    secret: \"shh\",\n  },\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      },
      "h3": {
        "id": "update-1",
        "title": "update()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listcontactchannels-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "listContactChannels()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listcontactchannels-1",
    "content": "List all the contact channels of the user.\nThis is similar to CurrentUser.listContactChannels() but it returns a list of ServerContactChannel objects instead of ContactChannel objects.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<ServerContactChannel[]>: The list of contact channels.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const contactChannels = await serverUser.listContactChannels();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      },
      "h3": {
        "id": "listcontactchannels-1",
        "title": "listContactChannels()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usecontactchannels-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "useContactChannels()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#usecontactchannels-1",
    "content": "List all the contact channels of the user.\nThis is the same as listContactChannels but it is a React hook. This is also similar to CurrentUser.useContactChannels() but it returns a list of ServerContactChannel objects instead of ContactChannel objects.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nServerContactChannel[]: The list of contact channels.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const contactChannels = serverUser.useContactChannels();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      },
      "h3": {
        "id": "usecontactchannels-1",
        "title": "useContactChannels()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-grantpermission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "grantPermission()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#grantpermission",
    "content": "Grant a permission to a user for a team.\nThis action will still succeed if the permission is already granted. It will throw an error if the permission is not defined in the Stack dashboard.\nParameters:\n\n\n\n\nThe team to grant the permission to.\n\n\nThe ID of the permission to grant.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await serverUser.grantPermission(team, \"read_secret_info\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      },
      "h3": {
        "id": "grantpermission",
        "title": "grantPermission()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-revokepermission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "revokePermission()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#revokepermission",
    "content": "Revoke a permission from a user for a team.\nThis action will still succeed if the permission is not granted in the first place. It will throw an error if the permission is not defined in the Stack dashboard.\nParameters:\n\n\n\n\nThe team to revoke the permission from.\n\n\nThe ID of the permission to revoke.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await serverUser.revokePermission(team, \"read_secret_info\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser"
      },
      "h3": {
        "id": "revokepermission",
        "title": "revokePermission()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-currentserveruser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/user",
    "pathname": "/sdk/user",
    "title": "CurrentServerUser",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#currentserveruser",
    "content": "The CurrentServerUser has the same properties and methods from ServerUser and CurrentUser combined (for the overloaded methods like update, the ServerUser methods take precedence).\nTo get a CurrentServerUser object, you can use the stackServerApp.getUser() method. Note that this can only be used on the server side.",
    "hierarchy": {
      "h0": {
        "title": "User"
      },
      "h2": {
        "id": "currentserveruser",
        "title": "CurrentServerUser"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "StackApp",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "This is a detailed reference for the StackApp object. Here is a more high-level overview."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-different-types-of-stackapp-objects-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "Different types of StackApp objects",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#different-types-of-stackapp-objects",
    "content": "Stack offers two types of app objects: StackClientApp and StackServerApp.\nStackClientApp:\nDesigned for client-side applications\n\nProvides functionality like signInWithOAuth, useUser, useProject, etc.\n\nObtain it by calling useStackApp() in a Client Component\n\n\n\nStackServerApp:\nextends StackClientApp\n\nHas additional capabilities like being able to listing all the users in the project\n\nAccess it by importing the object from the file where you created it (import { stackServerApp } from '@/stack')\n\nWhile StackServerApp includes useXYZ hooks, they are generally not usable in server-side code due to its non-reactive nature. These hooks are primarily designed for client-side use where reactivity is supported.\n\n\n\n\nChoose the appropriate type based on your application's needs and environment.",
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "different-types-of-stackapp-objects",
        "title": "Different types of StackApp objects"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-stackclientapp-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "StackClientApp",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#stackclientapp",
    "content": "You can get a StackClientApp instance by calling useStackApp() in a Client Component.",
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-initialization-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "Initialization",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#initialization",
    "content": "In most cases, we don't create a StackClientApp directly. Instead, we typically:\nCreate a StackServerApp instance, pass it into the StackProvider component\n\nUse the useStackApp() hook to obtain a StackClientApp from it\n\n\nCheck out the manual setup guide for more details. For details on how to initialize a StackServerApp, refer to the StackServerApp section below.",
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "initialization",
        "title": "Initialization"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The ID of the project that the app is associated with.\n\n\nThe URLs that Stack uses to route and redirect.\n\n\n\n\nThe URL of the home page.\n\n\nThe URL of the sign-in page.\n\n\nThe URL that the user will be redirected to after successful signing in.\n\n\nThe URL of the sign-up page.\n\n\nThe URL that the user will be redirected to after successful signing up.\n\n\nThe URL that the user will be redirected to after successful signing out.\n\n\nThe URL of the email verification page.\n\n\nThe URL of the password reset page.\n\n\nThe URL of the forgot password page.\n\n\nThe URL of the account settings page.\n\n\nThe URL of the handler root.",
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getuser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "getUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getuser",
    "content": "Get the current user.\nParameters:\n\n\n\n\n\n\n\n\nWhat to do if the user is not signed in. Can be:\n\"redirect\": Redirects the user to the signIn URL.\n\n\"throw\": Throws an error.\n\n\nReturns:\n\n\nIf or is not provided, returns Promise<CurrentUser | null>.\n\nIf or is \"redirect\" or \"throw\", always returns Promise<CurrentUser>.\n\n\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const user = await stackClientApp.getUser({ or: \"redirect\" });\nconsole.log(user); // always defined\n\nconst user = await stackClientApp.getUser();\nconsole.log(user); // null if not signed in"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "getuser",
        "title": "getUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-useuser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "useUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useuser",
    "content": "Get the current user.\nThis is the same as getUser() but it is a React hook. The useUser hook imported from the package is an alias for this function.\nParameters:\n\n\n\n\n\n\n\n\nWhat to do if the user is not signed in. Can be:\n\"redirect\": Redirects the user to the signIn URL.\n\n\"throw\": Throws an error.\n\n\nReturns:\n\n\nIf or is not provided, returns CurrentUser | null.\n\nIf or is \"redirect\" or \"throw\", always returns CurrentUser.\n\n\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const user = useUser({ or: \"redirect\" });\nconsole.log(user); // always defined\n\nconst user = useUser();\nconsole.log(user); // null if not signed in"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "useuser",
        "title": "useUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-signinwithoauth-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "signInWithOAuth()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#signinwithoauth",
    "content": "Initiates the OAuth sign-in process with the specified provider. This method:\nRedirects the user to the OAuth provider's sign-in page.\n\nAfter successful authentication, redirects the user back to your application.\n\nThe final redirect destination is determined as follows:\nIf an after_auth_return_to query parameter was provided when calling this function, it uses that URL.\n\nOtherwise, it uses the afterSignIn URL configured in the app settings.\n\n\n\n\nParameters:\n\n\n\n\nThe type of the OAuth provider to sign in with.\nReturns:\n\n\nPromise<void>: A promise that resolves when the redirect is complete.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await stackClientApp.signInWithOAuth(\"google\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "signinwithoauth",
        "title": "signInWithOAuth()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-signinwithcredential-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "signInWithCredential()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#signinwithcredential",
    "content": "Sign in using email and password credentials. The behavior is as follows:\nIf sign-in is successful:\nBy default, redirects the user to the afterSignIn URL.\n\nIf after_auth_return_to is provided in the query parameters, redirects to that URL instead.\n\nIf noRedirect is set to true, it will not redirect and instead return a success Result object.\n\n\n\nIf sign-in fails:\nNo redirection occurs.\n\nReturns a Result object containing error information.\n\n\n\n\nParameters:\n\n\n\n\n\n\n\n\nThe email of the user to sign in with.\n\n\nThe password of the user to sign in with.\n\n\nWhether to not redirect the user after sign-in. Defaults to false.\nReturns:\n\n\nPromise<Result<undefined, KnownErrors[\"EmailPasswordMismatch\"]>>: A promise that resolves to a Result object.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const result = await stackClientApp.signInWithCredential({\n  email: \"test@example.com\",\n  password: \"password\",\n});\n\nif (result.status === \"error\") {\n  console.error(\"Sign in failed\", result.error.message);\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "signinwithcredential",
        "title": "signInWithCredential()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-signupwithcredential-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "signUpWithCredential()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#signupwithcredential",
    "content": "Sign up using email and password credentials. The behavior is as follows:\nIf sign-up is successful:\nBy default, redirects the user to the afterSignUp URL.\n\nIf after_auth_return_to is provided in the query parameters, redirects to that URL instead.\n\nIf noRedirect is set to true, it will not redirect and instead return a success Result object.\n\n\n\nIf sign-up fails:\nNo redirection occurs.\n\nReturns a Result object containing error information.\n\n\n\n\nParameters:\n\n\n\n\n\n\n\n\nThe email of the user to sign up with.\n\n\nThe password of the user to sign up with.\n\n\nWhether to not redirect the user after sign-up. Defaults to false.\nReturns:\n\n\nPromise<Result<undefined, KnownErrors[\"UserEmailAlreadyExists\"] | KnownErrors[\"PasswordRequirementsNotMet\"]>>: A promise that resolves to a Result object.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const result = await stackClientApp.signUpWithCredential({\n  email: \"test@example.com\",\n  password: \"password\",\n});\n\nif (result.status === \"error\") {\n  console.error(\"Sign up failed\", result.error.message);\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "signupwithcredential",
        "title": "signUpWithCredential()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-sendforgotpasswordemail-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "sendForgotPasswordEmail()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#sendforgotpasswordemail",
    "content": "Send a forgot password email to an email address.\nParameters:\n\n\n\n\nThe email of the user to send the forgot password email to.\nReturns:\n\n\nPromise<Result<undefined, KnownErrors[\"UserNotFound\"]>>: A promise that resolves to a Result object.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const result = await stackClientApp.sendForgotPasswordEmail(\"test@example.com\");\n\nif (result.status === \"success\") {\n  console.log(\"Forgot password email sent\");\n} else {\n  console.error(\"Failed to send forgot password email\", result.error.message);\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "sendforgotpasswordemail",
        "title": "sendForgotPasswordEmail()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-sendmagiclinkemail-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "sendMagicLinkEmail()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#sendmagiclinkemail",
    "content": "Send a magic link/OTP sign-in email to an email address.\nParameters:\n\n\n\n\nThe email of the user to send the magic link email to.\nReturns:\n\n\nPromise<Result<{ nonce: string }, KnownErrors[\"RedirectUrlNotWhitelisted\"]>>: A promise that resolves to a Result object.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const result = await stackClientApp.sendMagicLinkEmail(\"test@example.com\");"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "sendmagiclinkemail",
        "title": "sendMagicLinkEmail()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getproject-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "getProject()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getproject",
    "content": "Get the current project.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nPromise<Project>: The current project.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const project = await stackClientApp.getProject();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "getproject",
        "title": "getProject()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-useproject-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "useProject()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useproject",
    "content": "Get the current project.\nThis is the same as getProject() but it is a React hook. The useProject hook imported from the package is an alias for this function.\nParameters:\n\n\nNo parameters.\nReturns:\n\n\nProject: The current project.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const project = useProject();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp"
      },
      "h3": {
        "id": "useproject",
        "title": "useProject()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-stackserverapp-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "StackServerApp",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#stackserverapp",
    "content": "StackServerApp extends StackClientApp, so it has all the same capabilities, plus some extra ones listed below.\nNote that although the useXYZ hooks are available on StackServerApp, they are generally not usable in server-side code due to its non-reactive nature. These hooks are primarily designed for client-side use where reactivity is supported.",
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-initialization-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "Initialization",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#initialization-1",
    "content": "Parameters:\n\n\n\n\n\n\n\n\nWhere to store the auth tokens. Currently only \"nextjs-cookie\" is supported.\n\n\nExtra OAuth scopes to request when signing in. It is an object of format { [provider: string]: string[] }, where the key is the provider type (e.g. \"google\", \"apple\", etc.) and the value is an array of scopes to request. Checkout the OAuth page for more details.\n\n\nThe base URL of the Stack server. By default it is read from the NEXT_PUBLIC_STACK_URL environment variable if it exists, or use https://api.stack-auth.com if it doesn't.\n\n\nThe ID of the project to use. By default it is read from the NEXT_PUBLIC_STACK_PROJECT_ID environment variable.\n\n\nThe publishable client key to use. By default it is read from the NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY environment variable.\n\n\nThe secret server key to use. By default it is read from the STACK_SECRET_SERVER_KEY environment variable.\n\n\nModify the URLs that Stack uses to route and redirect.\n\n\n\n\nThe URL of the home page.\n\n\nThe URL of the sign-in page.\n\n\nThe URL that the user will be redirected to after successful signing in.\n\n\nThe URL of the sign-up page.\n\n\nThe URL that the user will be redirected to after successful signing up.\n\n\nThe URL that the user will be redirected to after successful signing out.\n\n\nThe URL of the email verification page.\n\n\nThe URL of the password reset page.\n\n\nThe URL of the forgot password page.\n\n\nThe URL of the account settings page.\n\n\nThe URL of the handler root. When changing this, you should also change the location of the StackHandler component and the domain handler path on the dashboard. Currently putting the handler at the root / is not supported.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const stackServerApp = new StackServerApp({\n  tokenStore: \"nextjs-cookie\",\n  oauthScopesOnSignIn: {\n    google: [\"extra-scope\"],\n  },\n  urls: {\n    signIn: '/my-custom-sign-in-page',\n  },\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "initialization-1",
        "title": "Initialization"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-properties-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties-1",
    "content": "Same as StackClientApp.",
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getuser-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "getUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getuser-1",
    "content": "Get a user. There are two overloads:\nOverload 1 (get current server user):\nParameters:\n\n\n\n\n\n\n\n\nWhat to do if the user is not signed in. Can be:\n\"redirect\": Redirects the user to the signIn URL.\n\n\"throw\": Throws an error.\n\n\nReturns:\n\n\nIf or is not provided, returns Promise<ServerUser | null>.\n\nIf or is \"redirect\" or \"throw\", always returns Promise<ServerUser>.\n\n\nExample:\nOverload 2 (get user by ID):\nParameters:\n\n\n\n\nThe ID of the user to get.\nReturns:\n\n\nPromise<ServerUser | null>: The user, or null if not found.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const user = await stackServerApp.getUser({ or: \"redirect\" });\nconsole.log(user); // always defined\n\nconst user = await stackServerApp.getUser();\nconsole.log(user); // null if not signed in"
      },
      {
        "lang": "typescript",
        "code": "const user = await stackServerApp.getUser(\"user_id_123\");\nconsole.log(user); // null if not found"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "getuser-1",
        "title": "getUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-listusers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "listUsers()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listusers",
    "content": "Lists users.\nIf limit is not provided, it will return all users by making multiple requests to the server (this might be slow for a large number of users, so it is recommended to always use pagination).\nParameters:\n\n\n\n\n\n\n\n\nThe cursor to start the result set from.\n\n\nThe maximum number of items to return. If not provided, it will return all users.\n\n\nThe field to sort the results by. Currently only signedUpAt is supported.\n\n\nWhether to sort the results in descending order.\n\n\nA query to filter the results by. This is a free-text search on the user's display name and emails.\nReturns:\n\n\nPromise<ServerUser[] & { nextCursor: string | null }>: The list of users. If nextCursor is not null, there is a next page.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const users = await stackServerApp.listUsers({ limit: 20 });\nconsole.log(users);\n\nif (users.nextCursor) {\n  const nextPageUsers = await stackServerApp.listUsers({ cursor: users.nextCursor, limit: 20 });\n  console.log(nextPageUsers);\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "listusers",
        "title": "listUsers()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-useusers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "useUsers()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useusers",
    "content": "Get the list of users.\nIf limit is not provided, it will return all users by making multiple requests to the server (this might be slow for a large number of users, so it is recommended to always use pagination).\nThis is the same as listUsers() but it is a React hook.\nParameters:\n\n\n\n\n\n\n\n\nThe cursor to start the result set from.\n\n\nThe maximum number of items to return. If not provided, it will return all users.\n\n\nThe field to sort the results by. Currently only signedUpAt is supported.\n\n\nWhether to sort the results in descending order.\n\n\nA query to filter the results by. This is a free-text search on the user's display name and emails.\nReturns:\n\n\nServerUser[] & { nextCursor: string | null }: The list of users. If nextCursor is not null, there is a next page.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const [cursor, setCursor] = useState<string | null>(null);\nconst users = useUsers({ cursor: nextCursor, limit: 20 });\n\nreturn <div>\n  {users.map((user) => <div key={user.id}>{user.displayName}</div>)}\n  {users.nextCursor && <button onClick={() => setCursor(users.nextCursor)}>Next</button>}\n</div>"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "useusers",
        "title": "useUsers()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-createuser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "createUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#createuser",
    "content": "Create a new user.\nParameters:\n\n\n\n\n\n\n\n\nThe primary email of the user to create.\n\n\nWhether the primary email is enabled. When using password or otp auth, this must be set to true, otherwise the user will not be able to sign in.\n\n\nThe password for the new user. An error will be thrown if a password is provided\nbut password authentication is not enabled for the project in the dashboard.\n\n\nEnables OTP (One-Time Password) or magic link sign-in using the primary email.\nNote: Only verified emails can be used for OTP sign-in. An error will be thrown\nif set to true when OTP authentication is not enabled in the dashboard.\n\n\nThe display name of the user to create.\n\n\nWhether the primary email is verified.\nReturns:\n\n\nPromise<ServerUser>: The created user.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "// Create a user with password authentication\nconst user = await stackServerApp.createUser({\n  primaryEmail: \"test@example.com\",\n  primaryEmailAuthEnabled: true,\n  password: \"password123\",\n});\n\n// Create a user with OTP authentication\nconst user = await stackServerApp.createUser({\n  primaryEmail: \"test@example.com\",\n  primaryEmailVerified: true,\n  primaryEmailAuthEnabled: true,\n  otpAuthEnabled: true,\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "createuser",
        "title": "createUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "getTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#getteam",
    "content": "Get a team by ID.\nParameters:\n\n\n\n\nThe ID of the team to get.\nReturns:\n\n\nPromise<ServerTeam | null>: The team, or null if not found.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const team = await stackServerApp.getTeam(\"team_id_123\");\nconsole.log(team); // null if not found"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "getteam",
        "title": "getTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-listteams-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "listTeams()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listteams",
    "content": "List all teams.\nReturns:\n\n\nPromise<ServerTeam[]>: The list of teams.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const teams = await stackServerApp.listTeams();\nconsole.log(teams);"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "listteams",
        "title": "listTeams()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-createteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/stack-app",
    "pathname": "/sdk/stack-app",
    "title": "createTeam()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#createteam",
    "content": "create a team without a user.\nThis is similar to user.createTeam(), except it does not add the user to the team.\nParameters:\n\n\n\n\n\n\n\n\nThe display name for the team.\n\n\nThe URL of the team's profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\nReturns:\n\n\nPromise<ServerTeam>: The created team.\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "const team = await stackServerApp.createTeam({\n  displayName: \"New Team\",\n  profileImageUrl: \"https://example.com/profile.jpg\",\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "StackApp"
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp"
      },
      "h3": {
        "id": "createteam",
        "title": "createTeam()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "Team",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "This is a detailed reference for the Team object. If you're looking for a more high-level overview, please refer to our guide on teams here."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-different-types-of-team-objects-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "Different types of Team objects",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#different-types-of-team-objects",
    "content": "Stack Auth provides two types of Team objects:\nTeam\nRepresents a team on the client side\n\nProvides functions like update and inviteUser\n\nRequires appropriate user permissions for function usage\n\nObtained by calling user.useTeam('team_id_123') or user.useTeams()\n\n\n\nServerTeam\nRepresents a team on the server side\n\nIncludes additional capabilities such as delete and addUser\n\nNo user permissions required for function usage\n\nObtained by calling stackServerApp.getTeam('team_id_123') or stackServerApp.listTeams()",
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h3": {
        "id": "different-types-of-team-objects",
        "title": "Different types of Team objects"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-team-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "Team",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#team",
    "content": "You can call user.useTeam('team_id_123') or user.useTeams() to get the Team object.",
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "team",
        "title": "Team"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The team ID. This is the unique identifier of the team.\n\n\nThe display name of the team.\n\n\nThe profile image URL of the team.\n\n\nThe client metadata of the team.\n\n\nThe client read-only metadata of the team.",
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "team",
        "title": "Team"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-update-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "update()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update",
    "content": "Update the team information.\nNote that this operation requires the current user to have the $update_team permission. If the user lacks this permission, an error will be thrown.\nParameters\n\n\n\n\n\n\n\n\nThe display name of the team.\n\n\nThe profile image URL of the team.\n\n\nThe client metadata of the team.\nReturns\n\n\nPromise<void>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.update({\n  displayName: 'New Team Name',\n  profileImageUrl: 'https://example.com/profile.png',\n  clientMetadata: {\n    address: '123 Main St, Anytown, USA',\n  },\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "team",
        "title": "Team"
      },
      "h3": {
        "id": "update",
        "title": "update()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-inviteuser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "inviteUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#inviteuser",
    "content": "Send an invitation email to a user to join the team.\nNote that this operation requires the current user to have the $invite_members permission. If the user lacks this permission, an error will be thrown.\nAn invitation email containing a magic link will be sent to the specified user. If the user has an existing account, they will be automatically added to the team upon clicking the link. For users without an account, the link will guide them through the sign-up process before adding them to the team.\nParameters\n\n\n\n\n\n\n\n\nThe email of the user to invite.\nReturns\n\n\nPromise<void>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.inviteUser({\n  email: 'user@example.com',\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "team",
        "title": "Team"
      },
      "h3": {
        "id": "inviteuser",
        "title": "inviteUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-listusers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "listUsers()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listusers",
    "content": "Get a list of users in the team.\nNote that this operation requires the current user to have the $read_members permission. If the user lacks this permission, an error will be thrown.\nParameters\n\n\nNo parameters.\nReturns\n\n\nPromise<TeamUser[]>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const users = await team.listUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "team",
        "title": "Team"
      },
      "h3": {
        "id": "listusers",
        "title": "listUsers()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-useusers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "useUsers()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useusers",
    "content": "Get a list of users in the team.\nNote that this operation requires the current user to have the $read_members permission. If the user lacks this permission, an error will be thrown.\nThis is the same as listUsers but it is a React hook.\nParameters\n\n\nNo parameters.\nReturns\n\n\nTeamUser[]\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const users = team.useUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "team",
        "title": "Team"
      },
      "h3": {
        "id": "useusers",
        "title": "useUsers()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-serverteam-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "ServerTeam",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#serverteam",
    "content": "You can call stackServerApp.getTeam('team_id_123') or stackServerApp.listTeams() to get the ServerTeam object.\nServerTeam extends the Team object, providing additional functions and properties as detailed below. It's important to note that while the Team object's functions may require specific user permissions, the corresponding functions in ServerTeam can be executed without these permission checks. This allows for more flexible and unrestricted team management on the server side.",
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-properties-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties-1",
    "content": "The date and time when the team was created.\n\n\nThe server metadata of the team.",
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-listusers-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "listUsers()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#listusers-1",
    "content": "Get a list of users in the team.\nThis is similar to the listUsers method on the Team object, but it returns ServerTeamUser objects instead of TeamUser objects and does not require any permissions.\nParameters\n\n\nNo parameters.\nReturns\n\n\nPromise<ServerTeamUser[]>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const users = await team.listUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      },
      "h3": {
        "id": "listusers-1",
        "title": "listUsers()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-useusers-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "useUsers()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#useusers-1",
    "content": "Get a list of users in the team.\nThis is similar to the useUsers method on the Team object, but it returns ServerTeamUser objects instead of TeamUser objects and does not require any permissions. This is the same as listUsers but it is a React hook.\nParameters\n\n\nNo parameters.\nReturns\n\n\nServerTeamUser[]\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "const users = team.useUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      },
      "h3": {
        "id": "useusers-1",
        "title": "useUsers()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-adduser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "addUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#adduser",
    "content": "Add a user to the team directly without sending an invitation email.\nParameters\n\n\n\n\nThe ID of the user to add.\nReturns\n\n\nPromise<void>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.addUser('user_id_123');"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      },
      "h3": {
        "id": "adduser",
        "title": "addUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-removeuser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "removeUser()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#removeuser",
    "content": "Remove a user from the team.\nParameters\n\n\n\n\nThe ID of the user to remove.\nReturns\n\n\nPromise<void>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.removeUser('user_id_123');"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      },
      "h3": {
        "id": "removeuser",
        "title": "removeUser()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-delete-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team",
    "pathname": "/sdk/team",
    "title": "delete()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#delete",
    "content": "Delete the team.\nParameters\n\n\nNo parameters.\nReturns\n\n\nPromise<void>\nExample",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "await team.delete();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Team"
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam"
      },
      "h3": {
        "id": "delete",
        "title": "delete()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-user",
    "pathname": "/sdk/team-user",
    "title": "TeamUser",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "TeamUser is represents a user in the context of a team. There are two types of TeamUser\nTeamUser\nThis is used on the client side.\n\nIt contains minimal information about the user, only the user's ID.\n\nIt contains a teamProfile object, which is the user's profile for the team.\n\nYou can obtain it by calling team.useUsers() or team.listUsers() on a Team object.\n\n\n\nServerTeamUser\nThis is used on the server side.\n\nCurrently it only contains the user's ID, but in the future it will extend ServerUser.\n\nYou can obtain it by calling serverTeam.listUsers() on a ServerTeam object."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-user",
    "pathname": "/sdk/team-user",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The ID of the user.\n\n\nThe team profile of the user.",
    "hierarchy": {
      "h0": {
        "title": "TeamUser"
      },
      "h2": {
        "id": "teamuser",
        "title": "TeamUser"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user-properties-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-user",
    "pathname": "/sdk/team-user",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties-1",
    "content": "The ID of the user.\n\n\nThe team profile of the user.",
    "hierarchy": {
      "h0": {
        "title": "TeamUser"
      },
      "h2": {
        "id": "serverteamuser",
        "title": "ServerTeamUser"
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-profile",
    "pathname": "/sdk/team-profile",
    "title": "TeamProfile",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "TeamProfile is the profile of a user in the context of a team. There are two types of TeamProfile\nTeamProfile\nThis is used on the client side.\n\nIt contains the user's profile information for the team.\n\nYou can obtain it by calling teamUser.teamProfile on a TeamUser object.\n\n\n\nServerTeamProfile\nThis is used on the server side.\n\nCurrently it contains the same information as TeamProfile, but in the future it might contain more information.\n\nYou can obtain it by calling serverTeamUser.teamProfile on a ServerTeamUser object."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-profile",
    "pathname": "/sdk/team-profile",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The display name of the user.\n\n\nThe profile image URL of the user.",
    "hierarchy": {
      "h0": {
        "title": "TeamProfile"
      },
      "h2": {
        "id": "teamprofile",
        "title": "TeamProfile"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile-serverteamprofile-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-profile",
    "pathname": "/sdk/team-profile",
    "title": "ServerTeamProfile",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#serverteamprofile",
    "content": "Same as TeamProfile.",
    "hierarchy": {
      "h0": {
        "title": "TeamProfile"
      },
      "h2": {
        "id": "serverteamprofile",
        "title": "ServerTeamProfile"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-permission-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-permission",
    "pathname": "/sdk/team-permission",
    "title": "TeamPermission",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "TeamPermission represents that a user has a certain permission for a team. It is currently very simple and only contains an id.\nIt can be obtained by calling functions like user.getPermission() or user.listPermissions()."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-permission-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/team-permission",
    "pathname": "/sdk/team-permission",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The id of the permission.",
    "hierarchy": {
      "h0": {
        "title": "TeamPermission"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.project-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/project",
    "pathname": "/sdk/project",
    "title": "Project",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "The Project object contains the information and configuration of a project like the name, description, enabled auth methods, etc.\nYou can obtain a Project object by calling stackApp.getProject() or useProject()."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.project-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/project",
    "pathname": "/sdk/project",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The id of the project.\n\n\nThe display name of the project.\n\n\n\n\n\n\nWhether sign up is enabled for the project.\n\n\nWhether credential auth is enabled for the project.\n\n\nWhether magic link auth is enabled for the project.\n\n\nWhether client-side team creation is enabled for the project.\n\n\nWhether client-side user deletion is enabled for the project.",
    "hierarchy": {
      "h0": {
        "title": "Project"
      },
      "h2": {
        "id": "project",
        "title": "Project"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "ContactChannel",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "ContactChannel represents a user's contact information, such as an email address. In the future, it will support additional contact types like phone numbers. Contact channels can optionally be used for authentication.\nStack provides two types of contact channels:\nContactChannel\nUsed on the client side\n\nContains basic information like the contact value (e.g. email address) and type\n\nYou can obtain it by calling user.listContactChannels() or user.useContactChannels()\n\n\n\nServerContactChannel\nUsed on the server side\n\nExtends ContactChannel with additional properties:\nVerification status\n\nWhether it's the user's primary contact channel\n\n\n\nYou can obtain it by calling serverUser.listContactChannels() or serverUser.useContactChannels()"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-properties-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "Properties",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#properties",
    "content": "The id of the contact channel.\n\n\nThe value of the contact channel. If type is \"email\", this is an email address.\n\n\nThe type of the contact channel. Currently always \"email\".\n\n\nWhether the contact channel is the user's primary contact channel. If an email is set to primary, it will be the value on the user.primaryEmail field.\n\n\nWhether the contact channel is verified.\n\n\nWhether the contact channel is used for authentication. If set to true, the user can use this contact channel together with OTP or password to sign in.",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel"
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel"
      },
      "h3": {
        "id": "properties",
        "title": "Properties"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-sendverificationemail-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "sendVerificationEmail()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#sendverificationemail",
    "content": "Sends a verification email to this contact channel. Once the user clicks the verification link in the email, the contact channel will be marked as verified.\nThis method will throw an error if the contact channel has already been verified.\nParameters:\n\n\nNone\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await contactChannel.sendVerificationEmail();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ContactChannel"
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel"
      },
      "h3": {
        "id": "sendverificationemail",
        "title": "sendVerificationEmail()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-update-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "update()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update",
    "content": "Update the contact channel.\nAfter updating the value, the contact channel will be marked as unverified.\nParameters:\n\n\n\n\n\n\n\n\nThe new value of the contact channel.\n\n\nThe new type of the contact channel. Currently always \"email\".\n\n\nWhether the contact channel is used for authentication.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await contactChannel.update({ value: \"new-email@example.com\", usedForAuth: true });"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ContactChannel"
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel"
      },
      "h3": {
        "id": "update",
        "title": "update()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-delete-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "delete()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#delete",
    "content": "Delete the contact channel.\nParameters:\n\n\nNo parameters\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await contactChannel.delete();"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ContactChannel"
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel"
      },
      "h3": {
        "id": "delete",
        "title": "delete()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-servercontactchannel-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "ServerContactChannel",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#servercontactchannel",
    "content": "It extends ContactChannel with additional methods listed below.",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel"
      },
      "h2": {
        "id": "servercontactchannel",
        "title": "ServerContactChannel"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-update-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/contact-channel",
    "pathname": "/sdk/contact-channel",
    "title": "update()",
    "breadcrumb": [
      {
        "title": "Classes",
        "pathname": "/sdk/classes"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#update-1",
    "content": "Update the contact channel.\nThis is similar to ContactChannel.update(), but it also allows you to set the isVerified property.\nParameters:\n\n\n\n\n\n\n\n\nThe new value of the contact channel.\n\n\nThe new type of the contact channel. Currently always \"email\".\n\n\nWhether the contact channel is used for authentication.\n\n\nWhether the contact channel is verified.\nReturns:\n\n\nPromise<void>\nExample:",
    "code_snippets": [
      {
        "lang": "typescript",
        "code": "await serverContactChannel.update({ value: \"new-email@example.com\", usedForAuth: true, isVerified: true });"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "ContactChannel"
      },
      "h2": {
        "id": "servercontactchannel",
        "title": "ServerContactChannel"
      },
      "h3": {
        "id": "update-1",
        "title": "update()"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/hooks/use-user",
    "pathname": "/sdk/hooks/use-user",
    "title": "useUser",
    "breadcrumb": [
      {
        "title": "Hooks",
        "pathname": "/sdk/hooks"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "content": "A React hook that fetches and manages user data."
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-returns-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/hooks/use-user",
    "pathname": "/sdk/hooks/use-user",
    "title": "Returns",
    "breadcrumb": [
      {
        "title": "Hooks",
        "pathname": "/sdk/hooks"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#returns",
    "content": "user: User | null - The user data object if available, or null if not fetched yet.\n\nloading: boolean - Indicates whether the user data is currently being fetched.",
    "hierarchy": {
      "h0": {
        "title": "useUser"
      },
      "h2": {
        "id": "returns",
        "title": "Returns"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/hooks/use-user",
    "pathname": "/sdk/hooks/use-user",
    "title": "Example",
    "breadcrumb": [
      {
        "title": "Hooks",
        "pathname": "/sdk/hooks"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#example",
    "content": "The same hook can also be used to protect a page. (You might also want to check out the server-side version here)",
    "code_snippets": [
      {
        "lang": "tsx",
        "code": "import { useUser } from '@stackframe/stack';\n\nfunction UserProfile() {\n  const { user, loading } = useUser();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user) {\n    return <div>User not found</div>;\n  }\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>Email: {user.email}</p>\n    </div>\n  );\n}\n``````jsx\nimport { useUser } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  const user = useUser({ or: \"redirect\" }); // user is garanteed to be non-null\n  return <div>Hello, {user.name}</div>;\n}"
      },
      {
        "lang": "jsx",
        "code": "import { useUser } from \"@stackframe/stack\";\n\nfunction MyProtectedPage() {\n  useUser({ or: \"redirect\" });\n  return <div>You can only see this if you are authenticated</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "useUser"
      },
      "h2": {
        "id": "example",
        "title": "Example"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-throw-an-error-when-not-authenticated-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/hooks/use-user",
    "pathname": "/sdk/hooks/use-user",
    "title": "Throw an error when not authenticated",
    "breadcrumb": [
      {
        "title": "Hooks",
        "pathname": "/sdk/hooks"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#throw-an-error-when-not-authenticated",
    "content": "By passing { or: \"throw\" } into the hook, it will throw an error if the user is not authenticated. This can be used for places where the user should never be unauthenticated if the app is working correctly.",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "import { useUser } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  // user is garanteed to be non-null, but an error will be thrown if the user is not authenticated\n  const user = useUser({ or: \"throw\" }); \n\n  return <div>Hello, {user.name}</div>;\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "useUser"
      },
      "h2": {
        "id": "throw-an-error-when-not-authenticated",
        "title": "Throw an error when not authenticated"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-stack-app-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sdk/use-stack-app",
    "pathname": "/sdk/use-stack-app",
    "title": "useStackApp()",
    "breadcrumb": [
      {
        "title": "Hooks",
        "pathname": "/sdk/hooks"
      }
    ],
    "tab": {
      "title": "SDK Reference",
      "pathname": "/sdk"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "jsx",
        "code": "import { useStackApp } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  const stackApp = useStackApp();\n  return <div>Sign In URL: {stackApp.urls.signIn}</div>;\n}"
      }
    ],
    "content": "The useStackApp hook returns the StackClientApp object that you can use to interact with the Stack API. If you want to learn more about the StackClientApp object, check out the StackApp documentation.\nExample:"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/auth",
    "pathname": "/rest-api/auth",
    "icon": "fa-regular fa-globe",
    "title": "API Overview",
    "breadcrumb": [],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "description": "REST API Overview",
    "content": "Stack offers a REST API for backends & frontends of any programming language or framework. This API is used to authenticate users, manage user data, and more."
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview-authentication-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/auth",
    "pathname": "/rest-api/auth",
    "icon": "fa-regular fa-globe",
    "title": "Authentication",
    "breadcrumb": [],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#authentication",
    "content": "The following authentication headers are common to every endpoint:\nHeader Type Description \nX-Stack-Access-Type \"client\" | \"server\" Required. \"client\" (without quotes) for the frontend API, or \"server\" for the backend API. \nX-Stack-Project-Id UUID Required. The project ID as found on the Stack dashboard. \nX-Stack-Publishable-Client-Key string Required for client access. The API key as found on the Stack dashboard. \nX-Stack-Secret-Server-Key string Required for server access. The API key as found on the Stack dashboard. \nX-Stack-Access-Token string Optional. The access token for the current user. If not given, the request is considered to be logged out. \n\nTo see how to use these headers in various programming languages, see the examples.",
    "code_snippets": [
      {
        "lang": "http",
        "code": "curl https://api.stack-auth.com/api/v1/ \\\n     -H \"X-Stack-Access-Type: <either 'client' or 'server'>\" \\\n     -H \"X-Stack-Project-Id: <your project UUID>\" \\\n     -H \"X-Stack-Publishable-Client-Key: pck_<your publishable client key>\" \\\n     -H \"X-Stack-Secret-Server-Key: ssk_<your secret server key>\" \\\n     -H \"X-Stack-Access-Token: <the current user's access token>\""
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "API Overview"
      },
      "h2": {
        "id": "authentication",
        "title": "Authentication"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview-faq-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/auth",
    "pathname": "/rest-api/auth",
    "icon": "fa-regular fa-globe",
    "title": "FAQ",
    "breadcrumb": [],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "type": "markdown",
    "hash": "#faq",
    "content": "Any language that has the ability to send HTTP requests can use the Stack REST API. This includes JavaScript, Python, Ruby, Java, Go, C#, Dart, and many more.\n\n\nClient access type is mostly used for client-side applications, like a browser or mobile app. The client APIs can only read and update the currently authenticated user's data, and it is usually fine to post the publishable client key in the client-side code.\nServer access type, on the other hand, is for your backend server that you control. It has full access over all user data, and the secret server key should never be exposed to client-side code.\nFor more information, see the concept documentation on StackApp.\n\n\nIf you'd like to build your own version of the Stack dashboard (or update project configuration programmatically), you can use the admin access type. These endpoints are very dangerous and you should only use them if you know what you're doing.\nFor more information, see the concept documentation on StackApp.",
    "hierarchy": {
      "h0": {
        "title": "API Overview"
      },
      "h2": {
        "id": "faq",
        "title": "FAQ"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.endpoint_.apiV1",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/api-v-1",
    "pathname": "/rest-api/client/api-v-1",
    "title": "/api/v1",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_.apiV1",
    "method": "GET",
    "endpoint_path": "",
    "endpoint_path_alternates": [
      "",
      "https://api.stack-auth.com/api/v1",
      "https://api.stack-auth.com/api/v1"
    ],
    "description": "Returns a human-readable message with some useful information about the API.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.listContactChannels",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/list-contact-channels",
    "pathname": "/rest-api/client/contact-channels/list-contact-channels",
    "title": "List contact channels",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.listContactChannels",
    "method": "GET",
    "endpoint_path": "/contact-channels",
    "endpoint_path_alternates": [
      "/contact-channels",
      "https://api.stack-auth.com/contact-channels",
      "https://api.stack-auth.com/contact-channels"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.createAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/create-a-contact-channel",
    "pathname": "/rest-api/client/contact-channels/create-a-contact-channel",
    "title": "Create a contact channel",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.createAContactChannel",
    "method": "POST",
    "endpoint_path": "/contact-channels",
    "endpoint_path_alternates": [
      "/contact-channels",
      "https://api.stack-auth.com/contact-channels",
      "https://api.stack-auth.com/contact-channels"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.verifyAnEmail",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/verify-an-email",
    "pathname": "/rest-api/client/contact-channels/verify-an-email",
    "title": "Verify an email",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.verifyAnEmail",
    "method": "POST",
    "endpoint_path": "/contact-channels/verify",
    "endpoint_path_alternates": [
      "/contact-channels/verify",
      "https://api.stack-auth.com/contact-channels/verify",
      "https://api.stack-auth.com/contact-channels/verify"
    ],
    "response_type": "json",
    "description": "Verify an email address of a user",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.checkEmailVerificationCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/check-email-verification-code",
    "pathname": "/rest-api/client/contact-channels/check-email-verification-code",
    "title": "Check email verification code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.checkEmailVerificationCode",
    "method": "POST",
    "endpoint_path": "/contact-channels/verify/check-code",
    "endpoint_path_alternates": [
      "/contact-channels/verify/check-code",
      "https://api.stack-auth.com/contact-channels/verify/check-code",
      "https://api.stack-auth.com/contact-channels/verify/check-code"
    ],
    "response_type": "json",
    "description": "Check if an email verification code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.getAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/get-a-contact-channel",
    "pathname": "/rest-api/client/contact-channels/get-a-contact-channel",
    "title": "Get a contact channel",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.getAContactChannel",
    "method": "GET",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.deleteAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/delete-a-contact-channel",
    "pathname": "/rest-api/client/contact-channels/delete-a-contact-channel",
    "title": "Delete a contact channel",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.deleteAContactChannel",
    "method": "DELETE",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.updateAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/update-a-contact-channel",
    "pathname": "/rest-api/client/contact-channels/update-a-contact-channel",
    "title": "Update a contact channel",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.updateAContactChannel",
    "method": "PATCH",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.sendContactChannelVerificationCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/send-contact-channel-verification-code",
    "pathname": "/rest-api/client/contact-channels/send-contact-channel-verification-code",
    "title": "Send contact channel verification code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/client/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.sendContactChannelVerificationCode",
    "method": "POST",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id/send-verification-code",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}/send-verification-code",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id/send-verification-code",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D/send-verification-code"
    ],
    "response_type": "json",
    "description": "Send a code to the user's contact channel for verifying the contact channel.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth.endpoint_oauth.oAuthTokenEndpoints",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/oauth/o-auth-token-endpoints",
    "pathname": "/rest-api/client/oauth/o-auth-token-endpoints",
    "title": "OAuth token endpoints",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "OAuth",
        "pathname": "/rest-api/client/oauth"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_oauth.oAuthTokenEndpoints",
    "method": "POST",
    "endpoint_path": "/auth/oauth/token",
    "endpoint_path_alternates": [
      "/auth/oauth/token",
      "https://api.stack-auth.com/auth/oauth/token",
      "https://api.stack-auth.com/auth/oauth/token"
    ],
    "response_type": "json",
    "description": "This endpoint is used to exchange an authorization code or refresh token for an access token.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth.endpoint_oauth.oAuthAuthorizeEndpoint",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/oauth/o-auth-authorize-endpoint",
    "pathname": "/rest-api/client/oauth/o-auth-authorize-endpoint",
    "title": "OAuth authorize endpoint",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "OAuth",
        "pathname": "/rest-api/client/oauth"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_oauth.oAuthAuthorizeEndpoint",
    "method": "GET",
    "endpoint_path": "/auth/oauth/authorize/:provider_id",
    "endpoint_path_alternates": [
      "/auth/oauth/authorize/{provider_id}",
      "https://api.stack-auth.com/auth/oauth/authorize/:provider_id",
      "https://api.stack-auth.com/auth/oauth/authorize/%7Bprovider_id%7D"
    ],
    "description": "This endpoint is used to initiate the OAuth authorization flow. there are two purposes for this endpoint: 1. Authenticate a user with an OAuth provider. 2. Link an existing user with an OAuth provider.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.signInWithACode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/sign-in-with-a-code",
    "pathname": "/rest-api/client/otp/sign-in-with-a-code",
    "title": "Sign in with a code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/client/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.signInWithACode",
    "method": "POST",
    "endpoint_path": "/auth/otp/sign-in",
    "endpoint_path_alternates": [
      "/auth/otp/sign-in",
      "https://api.stack-auth.com/auth/otp/sign-in",
      "https://api.stack-auth.com/auth/otp/sign-in"
    ],
    "response_type": "json",
    "description": "Sign in with a code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.sendSignInCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/send-sign-in-code",
    "pathname": "/rest-api/client/otp/send-sign-in-code",
    "title": "Send sign-in code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/client/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.sendSignInCode",
    "method": "POST",
    "endpoint_path": "/auth/otp/send-sign-in-code",
    "endpoint_path_alternates": [
      "/auth/otp/send-sign-in-code",
      "https://api.stack-auth.com/auth/otp/send-sign-in-code",
      "https://api.stack-auth.com/auth/otp/send-sign-in-code"
    ],
    "response_type": "json",
    "description": "Send a code to the user's email address for sign-in.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.mfaSignIn",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/mfa-sign-in",
    "pathname": "/rest-api/client/otp/mfa-sign-in",
    "title": "MFA sign in",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/client/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.mfaSignIn",
    "method": "POST",
    "endpoint_path": "/auth/mfa/sign-in",
    "endpoint_path_alternates": [
      "/auth/mfa/sign-in",
      "https://api.stack-auth.com/auth/mfa/sign-in",
      "https://api.stack-auth.com/auth/mfa/sign-in"
    ],
    "response_type": "json",
    "description": "Complete multi-factor authorization to sign in, with a TOTP and an MFA attempt code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.checkSignInCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/check-sign-in-code",
    "pathname": "/rest-api/client/otp/check-sign-in-code",
    "title": "Check sign in code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/client/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.checkSignInCode",
    "method": "POST",
    "endpoint_path": "/auth/otp/sign-in/check-code",
    "endpoint_path_alternates": [
      "/auth/otp/sign-in/check-code",
      "https://api.stack-auth.com/auth/otp/sign-in/check-code",
      "https://api.stack-auth.com/auth/otp/sign-in/check-code"
    ],
    "response_type": "json",
    "description": "Check if a sign in code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.updatePassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/update-password",
    "pathname": "/rest-api/client/password/update-password",
    "title": "Update password",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.updatePassword",
    "method": "POST",
    "endpoint_path": "/auth/password/update",
    "endpoint_path_alternates": [
      "/auth/password/update",
      "https://api.stack-auth.com/auth/password/update",
      "https://api.stack-auth.com/auth/password/update"
    ],
    "response_type": "json",
    "description": "Update the password of the current user, requires the old password",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.signUpWithEmailAndPassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/sign-up-with-email-and-password",
    "pathname": "/rest-api/client/password/sign-up-with-email-and-password",
    "title": "Sign up with email and password",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.signUpWithEmailAndPassword",
    "method": "POST",
    "endpoint_path": "/auth/password/sign-up",
    "endpoint_path_alternates": [
      "/auth/password/sign-up",
      "https://api.stack-auth.com/auth/password/sign-up",
      "https://api.stack-auth.com/auth/password/sign-up"
    ],
    "response_type": "json",
    "description": "Create a new account with email and password",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.signInWithEmailAndPassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/sign-in-with-email-and-password",
    "pathname": "/rest-api/client/password/sign-in-with-email-and-password",
    "title": "Sign in with email and password",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.signInWithEmailAndPassword",
    "method": "POST",
    "endpoint_path": "/auth/password/sign-in",
    "endpoint_path_alternates": [
      "/auth/password/sign-in",
      "https://api.stack-auth.com/auth/password/sign-in",
      "https://api.stack-auth.com/auth/password/sign-in"
    ],
    "response_type": "json",
    "description": "Sign in to an account with email and password",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.setPassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/set-password",
    "pathname": "/rest-api/client/password/set-password",
    "title": "Set password",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.setPassword",
    "method": "POST",
    "endpoint_path": "/auth/password/set",
    "endpoint_path_alternates": [
      "/auth/password/set",
      "https://api.stack-auth.com/auth/password/set",
      "https://api.stack-auth.com/auth/password/set"
    ],
    "response_type": "json",
    "description": "Set a new password for the current user",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.sendResetPasswordCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/send-reset-password-code",
    "pathname": "/rest-api/client/password/send-reset-password-code",
    "title": "Send reset password code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.sendResetPasswordCode",
    "method": "POST",
    "endpoint_path": "/auth/password/send-reset-code",
    "endpoint_path_alternates": [
      "/auth/password/send-reset-code",
      "https://api.stack-auth.com/auth/password/send-reset-code",
      "https://api.stack-auth.com/auth/password/send-reset-code"
    ],
    "response_type": "json",
    "description": "Send a code to the user's email address for resetting the password.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.resetPasswordWithACode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/reset-password-with-a-code",
    "pathname": "/rest-api/client/password/reset-password-with-a-code",
    "title": "Reset password with a code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.resetPasswordWithACode",
    "method": "POST",
    "endpoint_path": "/auth/password/reset",
    "endpoint_path_alternates": [
      "/auth/password/reset",
      "https://api.stack-auth.com/auth/password/reset",
      "https://api.stack-auth.com/auth/password/reset"
    ],
    "response_type": "json",
    "description": "Reset password with a code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.checkResetPasswordCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/check-reset-password-code",
    "pathname": "/rest-api/client/password/check-reset-password-code",
    "title": "Check reset password code",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/client/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.checkResetPasswordCode",
    "method": "POST",
    "endpoint_path": "/auth/password/reset/check-code",
    "endpoint_path_alternates": [
      "/auth/password/reset/check-code",
      "https://api.stack-auth.com/auth/password/reset/check-code",
      "https://api.stack-auth.com/auth/password/reset/check-code"
    ],
    "response_type": "json",
    "description": "Check if a reset password code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_permissions.endpoint_permissions.listTeamPermissions",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/permissions/list-team-permissions",
    "pathname": "/rest-api/client/permissions/list-team-permissions",
    "title": "List team permissions",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Permissions",
        "pathname": "/rest-api/client/permissions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_permissions.listTeamPermissions",
    "method": "GET",
    "endpoint_path": "/team-permissions",
    "endpoint_path_alternates": [
      "/team-permissions",
      "https://api.stack-auth.com/team-permissions",
      "https://api.stack-auth.com/team-permissions"
    ],
    "response_type": "json",
    "description": "List team permissions of the current user. user_id=me must be set for client requests. Note that this might contain the permissions with the same permission ID across different teams. (team_id, user_id, permission_id) together uniquely identify a permission.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_projects.endpoint_projects.getTheCurrentProject",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/projects/get-the-current-project",
    "pathname": "/rest-api/client/projects/get-the-current-project",
    "title": "Get the current project",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Projects",
        "pathname": "/rest-api/client/projects"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_projects.getTheCurrentProject",
    "method": "GET",
    "endpoint_path": "/projects/current",
    "endpoint_path_alternates": [
      "/projects/current",
      "https://api.stack-auth.com/projects/current",
      "https://api.stack-auth.com/projects/current"
    ],
    "response_type": "json",
    "description": "Get the current project information including display name, oauth providers and authentication methods. Useful for display the available login options to the user.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions.endpoint_sessions.signOutOfTheCurrentSession",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/sessions/sign-out-of-the-current-session",
    "pathname": "/rest-api/client/sessions/sign-out-of-the-current-session",
    "title": "Sign out of the current session",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Sessions",
        "pathname": "/rest-api/client/sessions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_sessions.signOutOfTheCurrentSession",
    "method": "DELETE",
    "endpoint_path": "/auth/sessions/current",
    "endpoint_path_alternates": [
      "/auth/sessions/current",
      "https://api.stack-auth.com/auth/sessions/current",
      "https://api.stack-auth.com/auth/sessions/current"
    ],
    "response_type": "json",
    "description": "Sign out of the current session and invalidate the refresh token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions.endpoint_sessions.refreshAccessToken",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/sessions/refresh-access-token",
    "pathname": "/rest-api/client/sessions/refresh-access-token",
    "title": "Refresh access token",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Sessions",
        "pathname": "/rest-api/client/sessions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_sessions.refreshAccessToken",
    "method": "POST",
    "endpoint_path": "/auth/sessions/current/refresh",
    "endpoint_path_alternates": [
      "/auth/sessions/current/refresh",
      "https://api.stack-auth.com/auth/sessions/current/refresh",
      "https://api.stack-auth.com/auth/sessions/current/refresh"
    ],
    "response_type": "json",
    "description": "Get a new access token using a refresh token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.listTeams",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/list-teams",
    "pathname": "/rest-api/client/teams/list-teams",
    "title": "List teams",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.listTeams",
    "method": "GET",
    "endpoint_path": "/teams",
    "endpoint_path_alternates": [
      "/teams",
      "https://api.stack-auth.com/teams",
      "https://api.stack-auth.com/teams"
    ],
    "response_type": "json",
    "description": "List all the teams that the current user is a member of. user_id=me must be passed in the query parameters.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.createATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/create-a-team",
    "pathname": "/rest-api/client/teams/create-a-team",
    "title": "Create a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.createATeam",
    "method": "POST",
    "endpoint_path": "/teams",
    "endpoint_path_alternates": [
      "/teams",
      "https://api.stack-auth.com/teams",
      "https://api.stack-auth.com/teams"
    ],
    "response_type": "json",
    "description": "Create a new team and optionally add the current user as a member.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.listTeamMembersProfiles",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/list-team-members-profiles",
    "pathname": "/rest-api/client/teams/list-team-members-profiles",
    "title": "List team members profiles",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.listTeamMembersProfiles",
    "method": "GET",
    "endpoint_path": "/team-member-profiles",
    "endpoint_path_alternates": [
      "/team-member-profiles",
      "https://api.stack-auth.com/team-member-profiles",
      "https://api.stack-auth.com/team-member-profiles"
    ],
    "response_type": "json",
    "description": "List team members profiles. You always need to specify a team_id that your are a member of on the client. You can always filter for your own profile by setting me as the user_id in the path parameters. If you want list all the profiles in a team, you need to have the $read_members permission in that team.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/get-a-team",
    "pathname": "/rest-api/client/teams/get-a-team",
    "title": "Get a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.getATeam",
    "method": "GET",
    "endpoint_path": "/teams/:team_id",
    "endpoint_path_alternates": [
      "/teams/{team_id}",
      "https://api.stack-auth.com/teams/:team_id",
      "https://api.stack-auth.com/teams/%7Bteam_id%7D"
    ],
    "response_type": "json",
    "description": "Get a team that the current user is a member of.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.deleteATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/delete-a-team",
    "pathname": "/rest-api/client/teams/delete-a-team",
    "title": "Delete a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.deleteATeam",
    "method": "DELETE",
    "endpoint_path": "/teams/:team_id",
    "endpoint_path_alternates": [
      "/teams/{team_id}",
      "https://api.stack-auth.com/teams/:team_id",
      "https://api.stack-auth.com/teams/%7Bteam_id%7D"
    ],
    "response_type": "json",
    "description": "Delete a team. Only allowed if the current user is a member of the team and has the $delete_team permission.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.updateATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/update-a-team",
    "pathname": "/rest-api/client/teams/update-a-team",
    "title": "Update a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.updateATeam",
    "method": "PATCH",
    "endpoint_path": "/teams/:team_id",
    "endpoint_path_alternates": [
      "/teams/{team_id}",
      "https://api.stack-auth.com/teams/:team_id",
      "https://api.stack-auth.com/teams/%7Bteam_id%7D"
    ],
    "response_type": "json",
    "description": "Update the team information. Only allowed if the current user is a member of the team and has the $update_team permission.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.sendAnEmailToInviteAUserToATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/send-an-email-to-invite-a-user-to-a-team",
    "pathname": "/rest-api/client/teams/send-an-email-to-invite-a-user-to-a-team",
    "title": "Send an email to invite a user to a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.sendAnEmailToInviteAUserToATeam",
    "method": "POST",
    "endpoint_path": "/team-invitations/send-code",
    "endpoint_path_alternates": [
      "/team-invitations/send-code",
      "https://api.stack-auth.com/team-invitations/send-code",
      "https://api.stack-auth.com/team-invitations/send-code"
    ],
    "response_type": "json",
    "description": "The user receiving this email can join the team by clicking on the link in the email. If the user does not have an account yet, they will be prompted to create one.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.inviteAUserToATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/invite-a-user-to-a-team",
    "pathname": "/rest-api/client/teams/invite-a-user-to-a-team",
    "title": "Invite a user to a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.inviteAUserToATeam",
    "method": "POST",
    "endpoint_path": "/team-invitations/accept",
    "endpoint_path_alternates": [
      "/team-invitations/accept",
      "https://api.stack-auth.com/team-invitations/accept",
      "https://api.stack-auth.com/team-invitations/accept"
    ],
    "response_type": "json",
    "description": "Send an email to a user to invite them to a team",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.removeAUserFromATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/remove-a-user-from-a-team",
    "pathname": "/rest-api/client/teams/remove-a-user-from-a-team",
    "title": "Remove a user from a team",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.removeAUserFromATeam",
    "method": "DELETE",
    "endpoint_path": "/team-memberships/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-memberships/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-memberships/:team_id/:user_id",
      "https://api.stack-auth.com/team-memberships/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "All the users are allowed to remove themselves from a team (user_id=me). Only the users who have the $remove_members permission are allowed to remove other users from a team. team_id is must an ID of a team that the user is a member of.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getATeamMemberProfile",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/get-a-team-member-profile",
    "pathname": "/rest-api/client/teams/get-a-team-member-profile",
    "title": "Get a team member profile",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.getATeamMemberProfile",
    "method": "GET",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-member-profiles/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-member-profiles/:team_id/:user_id",
      "https://api.stack-auth.com/team-member-profiles/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Get a team member profile. you can always get your own profile by setting me as the user_id in the path parameters on the client. If you want to get someone else's profile in a team, you need to have the $read_members permission in that team.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.updateYourTeamMemberProfile",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/update-your-team-member-profile",
    "pathname": "/rest-api/client/teams/update-your-team-member-profile",
    "title": "Update your team member profile",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.updateYourTeamMemberProfile",
    "method": "PATCH",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-member-profiles/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-member-profiles/:team_id/:user_id",
      "https://api.stack-auth.com/team-member-profiles/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Update your own team member profile. user_id must be me in the path parameters on the client.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getTeamInvitationDetails",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/get-team-invitation-details",
    "pathname": "/rest-api/client/teams/get-team-invitation-details",
    "title": "Get team invitation details",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.getTeamInvitationDetails",
    "method": "POST",
    "endpoint_path": "/team-invitations/accept/details",
    "endpoint_path_alternates": [
      "/team-invitations/accept/details",
      "https://api.stack-auth.com/team-invitations/accept/details",
      "https://api.stack-auth.com/team-invitations/accept/details"
    ],
    "response_type": "json",
    "description": "Get additional information about a team invitation code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.checkIfATeamInvitationCodeIsValid",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/check-if-a-team-invitation-code-is-valid",
    "pathname": "/rest-api/client/teams/check-if-a-team-invitation-code-is-valid",
    "title": "Check if a team invitation code is valid",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/client/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.checkIfATeamInvitationCodeIsValid",
    "method": "POST",
    "endpoint_path": "/team-invitations/accept/check-code",
    "endpoint_path_alternates": [
      "/team-invitations/accept/check-code",
      "https://api.stack-auth.com/team-invitations/accept/check-code",
      "https://api.stack-auth.com/team-invitations/accept/check-code"
    ],
    "response_type": "json",
    "description": "Check if a team invitation code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.getCurrentUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/users/get-current-user",
    "pathname": "/rest-api/client/users/get-current-user",
    "title": "Get current user",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/client/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_users.getCurrentUser",
    "method": "GET",
    "endpoint_path": "/users/me",
    "endpoint_path_alternates": [
      "/users/me",
      "https://api.stack-auth.com/users/me",
      "https://api.stack-auth.com/users/me"
    ],
    "response_type": "json",
    "description": "Gets the currently authenticated user.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.deleteCurrentUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/users/delete-current-user",
    "pathname": "/rest-api/client/users/delete-current-user",
    "title": "Delete current user",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/client/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_users.deleteCurrentUser",
    "method": "DELETE",
    "endpoint_path": "/users/me",
    "endpoint_path_alternates": [
      "/users/me",
      "https://api.stack-auth.com/users/me",
      "https://api.stack-auth.com/users/me"
    ],
    "response_type": "json",
    "description": "Deletes the currently authenticated user. Use this with caution.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.updateCurrentUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/users/update-current-user",
    "pathname": "/rest-api/client/users/update-current-user",
    "title": "Update current user",
    "breadcrumb": [
      {
        "title": "Client API",
        "pathname": "/rest-api/client"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/client/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_users.updateCurrentUser",
    "method": "PATCH",
    "endpoint_path": "/users/me",
    "endpoint_path_alternates": [
      "/users/me",
      "https://api.stack-auth.com/users/me",
      "https://api.stack-auth.com/users/me"
    ],
    "response_type": "json",
    "description": "Updates the currently authenticated user. Only the values provided will be updated.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.endpoint_.apiV1",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/api-v-1",
    "pathname": "/rest-api/server/api-v-1",
    "title": "/api/v1",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_.apiV1",
    "method": "GET",
    "endpoint_path": "",
    "endpoint_path_alternates": [
      "",
      "https://api.stack-auth.com/api/v1",
      "https://api.stack-auth.com/api/v1"
    ],
    "description": "Returns a human-readable message with some useful information about the API.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.listContactChannels",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/list-contact-channels",
    "pathname": "/rest-api/server/contact-channels/list-contact-channels",
    "title": "List contact channels",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.listContactChannels",
    "method": "GET",
    "endpoint_path": "/contact-channels",
    "endpoint_path_alternates": [
      "/contact-channels",
      "https://api.stack-auth.com/contact-channels",
      "https://api.stack-auth.com/contact-channels"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.createAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/create-a-contact-channel",
    "pathname": "/rest-api/server/contact-channels/create-a-contact-channel",
    "title": "Create a contact channel",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.createAContactChannel",
    "method": "POST",
    "endpoint_path": "/contact-channels",
    "endpoint_path_alternates": [
      "/contact-channels",
      "https://api.stack-auth.com/contact-channels",
      "https://api.stack-auth.com/contact-channels"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.verifyAnEmail",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/verify-an-email",
    "pathname": "/rest-api/server/contact-channels/verify-an-email",
    "title": "Verify an email",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.verifyAnEmail",
    "method": "POST",
    "endpoint_path": "/contact-channels/verify",
    "endpoint_path_alternates": [
      "/contact-channels/verify",
      "https://api.stack-auth.com/contact-channels/verify",
      "https://api.stack-auth.com/contact-channels/verify"
    ],
    "response_type": "json",
    "description": "Verify an email address of a user",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.checkEmailVerificationCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/check-email-verification-code",
    "pathname": "/rest-api/server/contact-channels/check-email-verification-code",
    "title": "Check email verification code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.checkEmailVerificationCode",
    "method": "POST",
    "endpoint_path": "/contact-channels/verify/check-code",
    "endpoint_path_alternates": [
      "/contact-channels/verify/check-code",
      "https://api.stack-auth.com/contact-channels/verify/check-code",
      "https://api.stack-auth.com/contact-channels/verify/check-code"
    ],
    "response_type": "json",
    "description": "Check if an email verification code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.getAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/get-a-contact-channel",
    "pathname": "/rest-api/server/contact-channels/get-a-contact-channel",
    "title": "Get a contact channel",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.getAContactChannel",
    "method": "GET",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.deleteAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/delete-a-contact-channel",
    "pathname": "/rest-api/server/contact-channels/delete-a-contact-channel",
    "title": "Delete a contact channel",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.deleteAContactChannel",
    "method": "DELETE",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.updateAContactChannel",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/update-a-contact-channel",
    "pathname": "/rest-api/server/contact-channels/update-a-contact-channel",
    "title": "Update a contact channel",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.updateAContactChannel",
    "method": "PATCH",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.sendContactChannelVerificationCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/contact-channels/send-contact-channel-verification-code",
    "pathname": "/rest-api/server/contact-channels/send-contact-channel-verification-code",
    "title": "Send contact channel verification code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Contact Channels",
        "pathname": "/rest-api/server/contact-channels"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_contactChannels.sendContactChannelVerificationCode",
    "method": "POST",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id/send-verification-code",
    "endpoint_path_alternates": [
      "/contact-channels/{user_id}/{contact_channel_id}/send-verification-code",
      "https://api.stack-auth.com/contact-channels/:user_id/:contact_channel_id/send-verification-code",
      "https://api.stack-auth.com/contact-channels/%7Buser_id%7D/%7Bcontact_channel_id%7D/send-verification-code"
    ],
    "response_type": "json",
    "description": "Send a code to the user's contact channel for verifying the contact channel.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_oauth.endpoint_oauth.oAuthTokenEndpoints",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/oauth/o-auth-token-endpoints",
    "pathname": "/rest-api/server/oauth/o-auth-token-endpoints",
    "title": "OAuth token endpoints",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "OAuth",
        "pathname": "/rest-api/server/oauth"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_oauth.oAuthTokenEndpoints",
    "method": "POST",
    "endpoint_path": "/auth/oauth/token",
    "endpoint_path_alternates": [
      "/auth/oauth/token",
      "https://api.stack-auth.com/auth/oauth/token",
      "https://api.stack-auth.com/auth/oauth/token"
    ],
    "response_type": "json",
    "description": "This endpoint is used to exchange an authorization code or refresh token for an access token.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_oauth.endpoint_oauth.oAuthAuthorizeEndpoint",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/oauth/o-auth-authorize-endpoint",
    "pathname": "/rest-api/server/oauth/o-auth-authorize-endpoint",
    "title": "OAuth authorize endpoint",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "OAuth",
        "pathname": "/rest-api/server/oauth"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_oauth.oAuthAuthorizeEndpoint",
    "method": "GET",
    "endpoint_path": "/auth/oauth/authorize/:provider_id",
    "endpoint_path_alternates": [
      "/auth/oauth/authorize/{provider_id}",
      "https://api.stack-auth.com/auth/oauth/authorize/:provider_id",
      "https://api.stack-auth.com/auth/oauth/authorize/%7Bprovider_id%7D"
    ],
    "description": "This endpoint is used to initiate the OAuth authorization flow. there are two purposes for this endpoint: 1. Authenticate a user with an OAuth provider. 2. Link an existing user with an OAuth provider.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.signInWithACode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/sign-in-with-a-code",
    "pathname": "/rest-api/server/otp/sign-in-with-a-code",
    "title": "Sign in with a code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/server/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_otp.signInWithACode",
    "method": "POST",
    "endpoint_path": "/auth/otp/sign-in",
    "endpoint_path_alternates": [
      "/auth/otp/sign-in",
      "https://api.stack-auth.com/auth/otp/sign-in",
      "https://api.stack-auth.com/auth/otp/sign-in"
    ],
    "response_type": "json",
    "description": "Sign in with a code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.sendSignInCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/send-sign-in-code",
    "pathname": "/rest-api/server/otp/send-sign-in-code",
    "title": "Send sign-in code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/server/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_otp.sendSignInCode",
    "method": "POST",
    "endpoint_path": "/auth/otp/send-sign-in-code",
    "endpoint_path_alternates": [
      "/auth/otp/send-sign-in-code",
      "https://api.stack-auth.com/auth/otp/send-sign-in-code",
      "https://api.stack-auth.com/auth/otp/send-sign-in-code"
    ],
    "response_type": "json",
    "description": "Send a code to the user's email address for sign-in.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.mfaSignIn",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/mfa-sign-in",
    "pathname": "/rest-api/server/otp/mfa-sign-in",
    "title": "MFA sign in",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/server/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_otp.mfaSignIn",
    "method": "POST",
    "endpoint_path": "/auth/mfa/sign-in",
    "endpoint_path_alternates": [
      "/auth/mfa/sign-in",
      "https://api.stack-auth.com/auth/mfa/sign-in",
      "https://api.stack-auth.com/auth/mfa/sign-in"
    ],
    "response_type": "json",
    "description": "Complete multi-factor authorization to sign in, with a TOTP and an MFA attempt code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.checkSignInCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/otp/check-sign-in-code",
    "pathname": "/rest-api/server/otp/check-sign-in-code",
    "title": "Check sign in code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "OTP",
        "pathname": "/rest-api/server/otp"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_otp.checkSignInCode",
    "method": "POST",
    "endpoint_path": "/auth/otp/sign-in/check-code",
    "endpoint_path_alternates": [
      "/auth/otp/sign-in/check-code",
      "https://api.stack-auth.com/auth/otp/sign-in/check-code",
      "https://api.stack-auth.com/auth/otp/sign-in/check-code"
    ],
    "response_type": "json",
    "description": "Check if a sign in code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.updatePassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/update-password",
    "pathname": "/rest-api/server/password/update-password",
    "title": "Update password",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.updatePassword",
    "method": "POST",
    "endpoint_path": "/auth/password/update",
    "endpoint_path_alternates": [
      "/auth/password/update",
      "https://api.stack-auth.com/auth/password/update",
      "https://api.stack-auth.com/auth/password/update"
    ],
    "response_type": "json",
    "description": "Update the password of the current user, requires the old password",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.signUpWithEmailAndPassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/sign-up-with-email-and-password",
    "pathname": "/rest-api/server/password/sign-up-with-email-and-password",
    "title": "Sign up with email and password",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.signUpWithEmailAndPassword",
    "method": "POST",
    "endpoint_path": "/auth/password/sign-up",
    "endpoint_path_alternates": [
      "/auth/password/sign-up",
      "https://api.stack-auth.com/auth/password/sign-up",
      "https://api.stack-auth.com/auth/password/sign-up"
    ],
    "response_type": "json",
    "description": "Create a new account with email and password",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.signInWithEmailAndPassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/sign-in-with-email-and-password",
    "pathname": "/rest-api/server/password/sign-in-with-email-and-password",
    "title": "Sign in with email and password",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.signInWithEmailAndPassword",
    "method": "POST",
    "endpoint_path": "/auth/password/sign-in",
    "endpoint_path_alternates": [
      "/auth/password/sign-in",
      "https://api.stack-auth.com/auth/password/sign-in",
      "https://api.stack-auth.com/auth/password/sign-in"
    ],
    "response_type": "json",
    "description": "Sign in to an account with email and password",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.setPassword",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/set-password",
    "pathname": "/rest-api/server/password/set-password",
    "title": "Set password",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.setPassword",
    "method": "POST",
    "endpoint_path": "/auth/password/set",
    "endpoint_path_alternates": [
      "/auth/password/set",
      "https://api.stack-auth.com/auth/password/set",
      "https://api.stack-auth.com/auth/password/set"
    ],
    "response_type": "json",
    "description": "Set a new password for the current user",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.sendResetPasswordCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/send-reset-password-code",
    "pathname": "/rest-api/server/password/send-reset-password-code",
    "title": "Send reset password code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.sendResetPasswordCode",
    "method": "POST",
    "endpoint_path": "/auth/password/send-reset-code",
    "endpoint_path_alternates": [
      "/auth/password/send-reset-code",
      "https://api.stack-auth.com/auth/password/send-reset-code",
      "https://api.stack-auth.com/auth/password/send-reset-code"
    ],
    "response_type": "json",
    "description": "Send a code to the user's email address for resetting the password.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.resetPasswordWithACode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/reset-password-with-a-code",
    "pathname": "/rest-api/server/password/reset-password-with-a-code",
    "title": "Reset password with a code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.resetPasswordWithACode",
    "method": "POST",
    "endpoint_path": "/auth/password/reset",
    "endpoint_path_alternates": [
      "/auth/password/reset",
      "https://api.stack-auth.com/auth/password/reset",
      "https://api.stack-auth.com/auth/password/reset"
    ],
    "response_type": "json",
    "description": "Reset password with a code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.checkResetPasswordCode",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/password/check-reset-password-code",
    "pathname": "/rest-api/server/password/check-reset-password-code",
    "title": "Check reset password code",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Password",
        "pathname": "/rest-api/server/password"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_password.checkResetPasswordCode",
    "method": "POST",
    "endpoint_path": "/auth/password/reset/check-code",
    "endpoint_path_alternates": [
      "/auth/password/reset/check-code",
      "https://api.stack-auth.com/auth/password/reset/check-code",
      "https://api.stack-auth.com/auth/password/reset/check-code"
    ],
    "response_type": "json",
    "description": "Check if a reset password code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.listTeamPermissionsOfAUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/permissions/list-team-permissions-of-a-user",
    "pathname": "/rest-api/server/permissions/list-team-permissions-of-a-user",
    "title": "List team permissions of a user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Permissions",
        "pathname": "/rest-api/server/permissions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_permissions.listTeamPermissionsOfAUser",
    "method": "GET",
    "endpoint_path": "/team-permissions",
    "endpoint_path_alternates": [
      "/team-permissions",
      "https://api.stack-auth.com/team-permissions",
      "https://api.stack-auth.com/team-permissions"
    ],
    "response_type": "json",
    "description": "Query and filter the permission with team_id, user_id, and permission_id. Note that this might contain the permissions with the same permission ID across different teams and users. (team_id, user_id, permission_id) together uniquely identify a permission.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.grantATeamPermissionToAUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/permissions/grant-a-team-permission-to-a-user",
    "pathname": "/rest-api/server/permissions/grant-a-team-permission-to-a-user",
    "title": "Grant a team permission to a user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Permissions",
        "pathname": "/rest-api/server/permissions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_permissions.grantATeamPermissionToAUser",
    "method": "POST",
    "endpoint_path": "/team-permissions/:team_id/:user_id/:permission_id",
    "endpoint_path_alternates": [
      "/team-permissions/{team_id}/{user_id}/{permission_id}",
      "https://api.stack-auth.com/team-permissions/:team_id/:user_id/:permission_id",
      "https://api.stack-auth.com/team-permissions/%7Bteam_id%7D/%7Buser_id%7D/%7Bpermission_id%7D"
    ],
    "response_type": "json",
    "description": "Grant a team permission to a user (the team permission must be created first on the Stack dashboard)",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.revokeATeamPermissionFromAUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/permissions/revoke-a-team-permission-from-a-user",
    "pathname": "/rest-api/server/permissions/revoke-a-team-permission-from-a-user",
    "title": "Revoke a team permission from a user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Permissions",
        "pathname": "/rest-api/server/permissions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_permissions.revokeATeamPermissionFromAUser",
    "method": "DELETE",
    "endpoint_path": "/team-permissions/:team_id/:user_id/:permission_id",
    "endpoint_path_alternates": [
      "/team-permissions/{team_id}/{user_id}/{permission_id}",
      "https://api.stack-auth.com/team-permissions/:team_id/:user_id/:permission_id",
      "https://api.stack-auth.com/team-permissions/%7Bteam_id%7D/%7Buser_id%7D/%7Bpermission_id%7D"
    ],
    "response_type": "json",
    "description": "Revoke a team permission from a user",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_projects.endpoint_projects.getTheCurrentProject",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/projects/get-the-current-project",
    "pathname": "/rest-api/server/projects/get-the-current-project",
    "title": "Get the current project",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Projects",
        "pathname": "/rest-api/server/projects"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_projects.getTheCurrentProject",
    "method": "GET",
    "endpoint_path": "/projects/current",
    "endpoint_path_alternates": [
      "/projects/current",
      "https://api.stack-auth.com/projects/current",
      "https://api.stack-auth.com/projects/current"
    ],
    "response_type": "json",
    "description": "Get the current project information including display name, oauth providers and authentication methods. Useful for display the available login options to the user.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.createSession",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/sessions/create-session",
    "pathname": "/rest-api/server/sessions/create-session",
    "title": "Create session",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Sessions",
        "pathname": "/rest-api/server/sessions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_sessions.createSession",
    "method": "POST",
    "endpoint_path": "/auth/sessions",
    "endpoint_path_alternates": [
      "/auth/sessions",
      "https://api.stack-auth.com/auth/sessions",
      "https://api.stack-auth.com/auth/sessions"
    ],
    "response_type": "json",
    "description": "Create a new session for a given user. This will return a refresh token that can be used to impersonate the user.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.signOutOfTheCurrentSession",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/sessions/sign-out-of-the-current-session",
    "pathname": "/rest-api/server/sessions/sign-out-of-the-current-session",
    "title": "Sign out of the current session",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Sessions",
        "pathname": "/rest-api/server/sessions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_sessions.signOutOfTheCurrentSession",
    "method": "DELETE",
    "endpoint_path": "/auth/sessions/current",
    "endpoint_path_alternates": [
      "/auth/sessions/current",
      "https://api.stack-auth.com/auth/sessions/current",
      "https://api.stack-auth.com/auth/sessions/current"
    ],
    "response_type": "json",
    "description": "Sign out of the current session and invalidate the refresh token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.refreshAccessToken",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/sessions/refresh-access-token",
    "pathname": "/rest-api/server/sessions/refresh-access-token",
    "title": "Refresh access token",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Sessions",
        "pathname": "/rest-api/server/sessions"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_sessions.refreshAccessToken",
    "method": "POST",
    "endpoint_path": "/auth/sessions/current/refresh",
    "endpoint_path_alternates": [
      "/auth/sessions/current/refresh",
      "https://api.stack-auth.com/auth/sessions/current/refresh",
      "https://api.stack-auth.com/auth/sessions/current/refresh"
    ],
    "response_type": "json",
    "description": "Get a new access token using a refresh token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.listTeams",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/list-teams",
    "pathname": "/rest-api/server/teams/list-teams",
    "title": "List teams",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.listTeams",
    "method": "GET",
    "endpoint_path": "/teams",
    "endpoint_path_alternates": [
      "/teams",
      "https://api.stack-auth.com/teams",
      "https://api.stack-auth.com/teams"
    ],
    "response_type": "json",
    "description": "List all the teams in the project.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.createATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/create-a-team",
    "pathname": "/rest-api/server/teams/create-a-team",
    "title": "Create a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.createATeam",
    "method": "POST",
    "endpoint_path": "/teams",
    "endpoint_path_alternates": [
      "/teams",
      "https://api.stack-auth.com/teams",
      "https://api.stack-auth.com/teams"
    ],
    "response_type": "json",
    "description": "Create a new team and optionally add the current user as a member.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.listTeamMembersProfiles",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/list-team-members-profiles",
    "pathname": "/rest-api/server/teams/list-team-members-profiles",
    "title": "List team members profiles",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.listTeamMembersProfiles",
    "method": "GET",
    "endpoint_path": "/team-member-profiles",
    "endpoint_path_alternates": [
      "/team-member-profiles",
      "https://api.stack-auth.com/team-member-profiles",
      "https://api.stack-auth.com/team-member-profiles"
    ],
    "response_type": "json",
    "description": "List team members profiles and filter by team ID and user ID",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.getATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/get-a-team",
    "pathname": "/rest-api/server/teams/get-a-team",
    "title": "Get a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.getATeam",
    "method": "GET",
    "endpoint_path": "/teams/:team_id",
    "endpoint_path_alternates": [
      "/teams/{team_id}",
      "https://api.stack-auth.com/teams/:team_id",
      "https://api.stack-auth.com/teams/%7Bteam_id%7D"
    ],
    "response_type": "json",
    "description": "Get a team by ID.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.deleteATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/delete-a-team",
    "pathname": "/rest-api/server/teams/delete-a-team",
    "title": "Delete a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.deleteATeam",
    "method": "DELETE",
    "endpoint_path": "/teams/:team_id",
    "endpoint_path_alternates": [
      "/teams/{team_id}",
      "https://api.stack-auth.com/teams/:team_id",
      "https://api.stack-auth.com/teams/%7Bteam_id%7D"
    ],
    "response_type": "json",
    "description": "Delete a team by ID.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.updateATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/update-a-team",
    "pathname": "/rest-api/server/teams/update-a-team",
    "title": "Update a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.updateATeam",
    "method": "PATCH",
    "endpoint_path": "/teams/:team_id",
    "endpoint_path_alternates": [
      "/teams/{team_id}",
      "https://api.stack-auth.com/teams/:team_id",
      "https://api.stack-auth.com/teams/%7Bteam_id%7D"
    ],
    "response_type": "json",
    "description": "Update the team information by ID.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.sendAnEmailToInviteAUserToATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/send-an-email-to-invite-a-user-to-a-team",
    "pathname": "/rest-api/server/teams/send-an-email-to-invite-a-user-to-a-team",
    "title": "Send an email to invite a user to a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.sendAnEmailToInviteAUserToATeam",
    "method": "POST",
    "endpoint_path": "/team-invitations/send-code",
    "endpoint_path_alternates": [
      "/team-invitations/send-code",
      "https://api.stack-auth.com/team-invitations/send-code",
      "https://api.stack-auth.com/team-invitations/send-code"
    ],
    "response_type": "json",
    "description": "The user receiving this email can join the team by clicking on the link in the email. If the user does not have an account yet, they will be prompted to create one.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.inviteAUserToATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/invite-a-user-to-a-team",
    "pathname": "/rest-api/server/teams/invite-a-user-to-a-team",
    "title": "Invite a user to a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.inviteAUserToATeam",
    "method": "POST",
    "endpoint_path": "/team-invitations/accept",
    "endpoint_path_alternates": [
      "/team-invitations/accept",
      "https://api.stack-auth.com/team-invitations/accept",
      "https://api.stack-auth.com/team-invitations/accept"
    ],
    "response_type": "json",
    "description": "Send an email to a user to invite them to a team",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.addAUserToATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/teams/add-a-user-to-a-team",
    "pathname": "/rest-api/server/teams/add-a-user-to-a-team",
    "title": "Add a user to a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.addAUserToATeam",
    "method": "POST",
    "endpoint_path": "/team-memberships/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-memberships/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-memberships/:team_id/:user_id",
      "https://api.stack-auth.com/team-memberships/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.removeAUserFromATeam",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/remove-a-user-from-a-team",
    "pathname": "/rest-api/server/teams/remove-a-user-from-a-team",
    "title": "Remove a user from a team",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.removeAUserFromATeam",
    "method": "DELETE",
    "endpoint_path": "/team-memberships/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-memberships/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-memberships/:team_id/:user_id",
      "https://api.stack-auth.com/team-memberships/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.getATeamMemberProfile",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/get-a-team-member-profile",
    "pathname": "/rest-api/server/teams/get-a-team-member-profile",
    "title": "Get a team member profile",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.getATeamMemberProfile",
    "method": "GET",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-member-profiles/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-member-profiles/:team_id/:user_id",
      "https://api.stack-auth.com/team-member-profiles/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Get a team member profile by user ID",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.updateATeamMemberProfile",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/teams/update-a-team-member-profile",
    "pathname": "/rest-api/server/teams/update-a-team-member-profile",
    "title": "Update a team member profile",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.updateATeamMemberProfile",
    "method": "PATCH",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "endpoint_path_alternates": [
      "/team-member-profiles/{team_id}/{user_id}",
      "https://api.stack-auth.com/team-member-profiles/:team_id/:user_id",
      "https://api.stack-auth.com/team-member-profiles/%7Bteam_id%7D/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Update a team member profile by user ID",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.getTeamInvitationDetails",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/get-team-invitation-details",
    "pathname": "/rest-api/server/teams/get-team-invitation-details",
    "title": "Get team invitation details",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.getTeamInvitationDetails",
    "method": "POST",
    "endpoint_path": "/team-invitations/accept/details",
    "endpoint_path_alternates": [
      "/team-invitations/accept/details",
      "https://api.stack-auth.com/team-invitations/accept/details",
      "https://api.stack-auth.com/team-invitations/accept/details"
    ],
    "response_type": "json",
    "description": "Get additional information about a team invitation code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.checkIfATeamInvitationCodeIsValid",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/teams/check-if-a-team-invitation-code-is-valid",
    "pathname": "/rest-api/server/teams/check-if-a-team-invitation-code-is-valid",
    "title": "Check if a team invitation code is valid",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/server/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.checkIfATeamInvitationCodeIsValid",
    "method": "POST",
    "endpoint_path": "/team-invitations/accept/check-code",
    "endpoint_path_alternates": [
      "/team-invitations/accept/check-code",
      "https://api.stack-auth.com/team-invitations/accept/check-code",
      "https://api.stack-auth.com/team-invitations/accept/check-code"
    ],
    "response_type": "json",
    "description": "Check if a team invitation code is valid without using it",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.listUsers",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/users/list-users",
    "pathname": "/rest-api/server/users/list-users",
    "title": "List users",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.listUsers",
    "method": "GET",
    "endpoint_path": "/users",
    "endpoint_path_alternates": [
      "/users",
      "https://api.stack-auth.com/users",
      "https://api.stack-auth.com/users"
    ],
    "response_type": "json",
    "description": "Lists all the users in the project.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.createUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/users/create-user",
    "pathname": "/rest-api/server/users/create-user",
    "title": "Create user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.createUser",
    "method": "POST",
    "endpoint_path": "/users",
    "endpoint_path_alternates": [
      "/users",
      "https://api.stack-auth.com/users",
      "https://api.stack-auth.com/users"
    ],
    "response_type": "json",
    "description": "Creates a new user. E-mail authentication is always enabled, and no password is set, meaning the only way to authenticate the newly created user is through magic link.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.getCurrentUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/users/get-current-user",
    "pathname": "/rest-api/server/users/get-current-user",
    "title": "Get current user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.getCurrentUser",
    "method": "GET",
    "endpoint_path": "/users/me",
    "endpoint_path_alternates": [
      "/users/me",
      "https://api.stack-auth.com/users/me",
      "https://api.stack-auth.com/users/me"
    ],
    "response_type": "json",
    "description": "Gets the currently authenticated user.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.deleteCurrentUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/users/delete-current-user",
    "pathname": "/rest-api/server/users/delete-current-user",
    "title": "Delete current user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.deleteCurrentUser",
    "method": "DELETE",
    "endpoint_path": "/users/me",
    "endpoint_path_alternates": [
      "/users/me",
      "https://api.stack-auth.com/users/me",
      "https://api.stack-auth.com/users/me"
    ],
    "response_type": "json",
    "description": "Deletes the currently authenticated user. Use this with caution.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.updateCurrentUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/client/users/update-current-user",
    "pathname": "/rest-api/server/users/update-current-user",
    "title": "Update current user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.updateCurrentUser",
    "method": "PATCH",
    "endpoint_path": "/users/me",
    "endpoint_path_alternates": [
      "/users/me",
      "https://api.stack-auth.com/users/me",
      "https://api.stack-auth.com/users/me"
    ],
    "response_type": "json",
    "description": "Updates the currently authenticated user. Only the values provided will be updated.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.getUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/users/get-user",
    "pathname": "/rest-api/server/users/get-user",
    "title": "Get user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.getUser",
    "method": "GET",
    "endpoint_path": "/users/:user_id",
    "endpoint_path_alternates": [
      "/users/{user_id}",
      "https://api.stack-auth.com/users/:user_id",
      "https://api.stack-auth.com/users/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Gets a user by user ID.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.deleteUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/users/delete-user",
    "pathname": "/rest-api/server/users/delete-user",
    "title": "Delete user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.deleteUser",
    "method": "DELETE",
    "endpoint_path": "/users/:user_id",
    "endpoint_path_alternates": [
      "/users/{user_id}",
      "https://api.stack-auth.com/users/:user_id",
      "https://api.stack-auth.com/users/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Deletes a user. Use this with caution.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.updateUser",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/server/users/update-user",
    "pathname": "/rest-api/server/users/update-user",
    "title": "Update user",
    "breadcrumb": [
      {
        "title": "Server API",
        "pathname": "/rest-api/server"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/server/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "http",
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.updateUser",
    "method": "PATCH",
    "endpoint_path": "/users/:user_id",
    "endpoint_path_alternates": [
      "/users/{user_id}",
      "https://api.stack-auth.com/users/:user_id",
      "https://api.stack-auth.com/users/%7Buser_id%7D"
    ],
    "response_type": "json",
    "description": "Updates a user. Only the values provided will be updated.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.created",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/users/user-created",
    "pathname": "/rest-api/webhooks/users/user-created",
    "title": "user.created",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/webhooks/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_users.user.created",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a user is created.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "UserCreatedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.updated",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/users/user-updated",
    "pathname": "/rest-api/webhooks/users/user-updated",
    "title": "user.updated",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/webhooks/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_users.user.updated",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a user is updated.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "UserUpdatedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.deleted",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/users/user-deleted",
    "pathname": "/rest-api/webhooks/users/user-deleted",
    "title": "user.deleted",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Users",
        "pathname": "/rest-api/webhooks/users"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_users.user.deleted",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a user is deleted.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "UserDeletedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.created",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/teams/team-created",
    "pathname": "/rest-api/webhooks/teams/team-created",
    "title": "team.created",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/webhooks/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team.created",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a team is created.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "TeamCreatedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.updated",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/teams/team-updated",
    "pathname": "/rest-api/webhooks/teams/team-updated",
    "title": "team.updated",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/webhooks/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team.updated",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a team is updated.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "TeamUpdatedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.deleted",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/teams/team-deleted",
    "pathname": "/rest-api/webhooks/teams/team-deleted",
    "title": "team.deleted",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/webhooks/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team.deleted",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a team is deleted.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "TeamDeletedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team_membership.created",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/teams/team-membership-created",
    "pathname": "/rest-api/webhooks/teams/team-membership-created",
    "title": "team_membership.created",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/webhooks/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team_membership.created",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a user is added to a team.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "TeamMembershipCreatedPayload"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team_membership.deleted",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/rest-api/webhooks/teams/team-membership-deleted",
    "pathname": "/rest-api/webhooks/teams/team-membership-deleted",
    "title": "team_membership.deleted",
    "breadcrumb": [
      {
        "title": "Webhooks",
        "pathname": "/rest-api/webhooks"
      },
      {
        "title": "Teams",
        "pathname": "/rest-api/webhooks/teams"
      }
    ],
    "tab": {
      "title": "REST API & Webhooks",
      "pathname": "/rest-api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "api_type": "webhook",
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team_membership.deleted",
    "method": "POST",
    "endpoint_path": "",
    "description": "This event is triggered when a user is removed from a team.",
    "keywords": [
      "endpoint",
      "api",
      "webhook",
      "TeamMembershipDeletedPayload"
    ],
    "type": "api-reference"
  }
]