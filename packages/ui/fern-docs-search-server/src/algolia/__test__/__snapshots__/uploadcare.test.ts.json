[
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.intro-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/intro",
    "pathname": "/docs/introduction/intro",
    "title": "Intro",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare makes simple, powerful, developer-friendly building blocks to handle file uploading, storage, processing, and delivery. You get a complete file handling infrastructure.",
    "content": "Some explanation\n\n\n\n\n\n\n\n\n\n\nUploadcare makes simple, powerful, developer-friendly building blocks to handle file uploading, storage, processing, and delivery. You get a complete file handling infrastructure."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/start/quickstart",
    "pathname": "/docs/introduction/start/quickstart",
    "title": "Uploadcare quick start",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare provides companies with simple, powerful, developer-friendly building blocks to handle file uploading, processing, and delivery. A complete out-of-the-box solution, built for engineers by engineers."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-quick-start-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/start/quickstart",
    "pathname": "/docs/introduction/start/quickstart",
    "title": "Quick start",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#quick-start",
    "content": "When building a website or an app, you'll need to handle uploading, storing,\nprocessing, and delivering various files, either from you, or from your users.\nWe have various uploading methods, a few storage options, an API to manage\nfiles, and a CDN with on-the-fly processing capabilities. Everything is\ncompliant with numerous international regulations.\nIn this quickstart we'll show you our [File Uploader][file-uploader] and\n[image processing operations][transformations-image-list]. We will also cover the rest of our\nfeatures at the end of this article.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start"
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-installation-and-configuration-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/start/quickstart",
    "pathname": "/docs/introduction/start/quickstart",
    "title": "Installation and configuration",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#installation-and-configuration",
    "content": "You can either install File Uploader from CDN, or via NPM.\n\n\n\n\n\n\nCDN\n\nNPM\n\n\n\n\n\n\n\n\n\nFile Uploader can be presented in [a few ways][file-uploader-solutions], e.g.\nregularly, inline or minimalistic.\nRegular File Uploader:\nWhere lr-config is a configuration block, and lr-file-uploader-regular is a File Uploader block.\nctx-name attribute is used to wire up the configuration block with the File Uploader block.\ncss-src attribute is used to specify basic CSS styles.\nTo dive further, check out [configuration][file-uploader-configuration] guide.\nHere you can find examples how to integrate it into your stack of choice:\n[React][file-uploader-react-git]\n\n[Angular][file-uploader-angular-git]\n\n[Vue][file-uploader-vue-git]",
    "code_snippets": [
      {
        "lang": "html",
        "code": "<lr-config\n  ctx-name=\"my-uploader\"\n  pubkey=\"YOUR_PUBLIC_KEY\"\n></lr-config>\n<lr-file-uploader-regular\n  css-src=\"https://cdn.jsdelivr.net/npm/@uploadcare/blocks@{{__BLOCKS_VERSION__}}/web/lr-file-uploader-regular.min.css\"\n  ctx-name=\"my-uploader\"\n></lr-file-uploader-regular>"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start"
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start"
      },
      "h2": {
        "id": "step-1-uploading",
        "title": "Step 1. Uploading"
      },
      "h3": {
        "id": "installation-and-configuration",
        "title": "Installation and configuration"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-step-2-storage--cdn-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/start/quickstart",
    "pathname": "/docs/introduction/start/quickstart",
    "title": "Step 2. Storage & CDN",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#step-2-storage--cdn",
    "content": "Once a file is uploaded, it goes to your Uploadcare storage and instantly\nbecomes available on CDN.\n\n\n(By default, Upload API doesn't store the files forever. There is a 24-hour\nwindow when you should decide whether to store uploaded files or not. But all\nof our official libraries, including File Uploader, inherit the\n[auto-store setting][project-settings-storage] from your project, where it's\nset to ON by default. You can read more about [storage behavior][storage-store]).\nYou can get the UUID of the uploaded files immediately on upload. For example:\nPlease refer to the [Events][file-uploader-events] page to view the complete list of available events.\nWe recommend saving UUIDs instead of CDN URLs because this will let you\nprocess these files easier later on.",
    "code_snippets": [
      {
        "lang": "js",
        "code": "window.addEventListener('LR_UPLOAD_FINISH', (e) => {\n  console.log(e.detail);\n});"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start"
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start"
      },
      "h2": {
        "id": "step-2-storage--cdn",
        "title": "Step 2. Storage & CDN"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-step-3-processing-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/start/quickstart",
    "pathname": "/docs/introduction/start/quickstart",
    "title": "Step 3. Processing",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#step-3-processing",
    "content": "You can add image processing operations by including directives in the CDN URL:\n\n\nImagine you're building a service with a lot of street photos:\nYou'll need to optimize the size and quality of the images for page load time.\n\nYou'll have to blur the faces on the photos to comply with privacy laws.\n\nYou'll want to add your watermark to every picture.\n\n\nConstruct the value of the image src attribute template, adding the operations\nyou pick, and use this template for every street photo in your project:\n\n\nSee the full list of [image processing operations][image-operations-list].",
    "code_snippets": [
      {
        "code": "https://ucarecdn.com/0e679e26-781b-4a66-b760-b2125f8c862c/\n           -/resize/1200x/\n           -/blur_region/faces/\n           -/overlay/2f44b1c2-f71a-4f84-bbe2-6d96c7e35a2d/100p,100p/"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start"
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start"
      },
      "h2": {
        "id": "step-3-processing",
        "title": "Step 3. Processing"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.start/quickstart-more-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/start/quickstart",
    "pathname": "/docs/introduction/start/quickstart",
    "title": "More features",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#more-features",
    "content": "Lear more about [uploading files][uploading-files] options.\n\nIntegrate Uploadcare into your mobile app with [native SDKs][integrations].\n\nImplement [secure workflows][security] for uploading and delivering files.\n\n[Fetch and deliver remote files][delivery-proxy] without explicitly uploading files.\n\nAdd [arbitrary metadata][file-metadata], [remove image background][remove-bg],\n[recognize objects][intelligence-object-recognition], [process videos][transformations-video],\n[convert documents][transformations-docs], and [detect viruses][malware-protection].\n\nExplore [project settings][settings-projects].\n\n[Migrate][migro-guide] your files to Uploadcare.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare quick start"
      },
      "h1": {
        "id": "quick-start",
        "title": "Quick start"
      },
      "h2": {
        "id": "more-features",
        "title": "More features"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Security and compliance",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Learn how Uploadcare can handle critical user data, including critical information in-line with the GDPR/CCPA and HIPAA compliances needed to operate in the EU and US legislation respectively."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-security-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Security",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#security",
    "content": "At Uploadcare we honor the safety of personal and business-sensitive information\nand implement compliancy with GDPR, HIPAA and other standards and regulations.\nUploadcare provides you with advanced privacy features to upload, access and\nmanage your content in a secure way.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-signed-uploads-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Signed uploads",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#signed-uploads",
    "content": "Control who and when can upload files. It prevents from uploading files using a\nPublic API key only. You'll have to generate a security token on the backend\nto upload a file. [Signed uploads][secure-uploads] work for a particular\nUploadcare project.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "signed-uploads",
        "title": "Signed uploads"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-signed-urls-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Signed URLs",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#signed-urls",
    "content": "Control who and when can request files. Enabling this feature limits access to\nyour project files. A user will require a token from your backend to access\nthe content.\n[Signed URLs][secure-delivery] work in conjunction with custom domains.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "signed-urls",
        "title": "Signed URLs"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-ddos-protection-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "DDoS protection",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#ddos-protection",
    "content": "Customers are automatically protected against Distributed Denial of Service (DDoS).",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "ddos-protection",
        "title": "DDoS protection"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-malware-protection-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Malware protection",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#malware-protection",
    "content": "Enable [malware checking][malware-protection] for all uploaded files.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "malware-protection",
        "title": "Malware protection"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-search-engine-indexing-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Search engine indexing",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#search-engine-indexing",
    "content": "Restrict [search engines][search-engine-indexing] to analyze and index content\nin your project for global search: image and text.\nSetup search engine indexing behavior for each of your projects.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "search-engine-indexing",
        "title": "Search engine indexing"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-signed-webhooks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Signed webhooks",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#signed-webhooks",
    "content": "Control who and when can call your webhook endpoint (URL). Without\nverification, anyone can spoof a request sent to the webhook URL. The solution\nis to sign each [webhook payload][secure-webhooks] with a secret.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "signed-webhooks",
        "title": "Signed webhooks"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-hipaa-guide-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "HIPAA guide",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#hipaa-guide",
    "content": "HIPAA is US legislation providing data privacy and security provisions for\nsafeguarding electronic protected health information (ePHI). On our Enterprise\nplan, Uploadcare can be configured to support [HIPAA compliant][guide-hipaa]\nworkflow.",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "hipaa-guide",
        "title": "HIPAA guide"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.security-compliance-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/security",
    "pathname": "/docs/introduction/security",
    "title": "Compliance",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#compliance",
    "content": "Uploadcare is committed to complying with industry-standard privacy and security\nmeasures and all applicable laws and regulations to keep customer and end-user\ndata safe and secure: SOC 2, HIPAA, GDPR. Learn more about it in our\n[Trust Center][uc-trust].",
    "hierarchy": {
      "h0": {
        "title": "Security and compliance"
      },
      "h1": {
        "id": "security",
        "title": "Security"
      },
      "h2": {
        "id": "compliance",
        "title": "Compliance"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Uploadcare billing",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "How Uploadcare account charges for Operations, Traffic & Storage usage."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-billing-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Billing",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#billing",
    "content": "This page serves as a guide on Uploadcare billing process, explaining what\ncharges may apply to your Operations, Traffic,\nand Storage usage.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-operations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Operations",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#operations",
    "content": "Think of operations as a credit balance that is spent depending on the complexity\nof actions with your files using Uploadcare APIs: file uploading, image optimization\nand transformations, video processing, document conversion, outcoming webhooks\nand various API requests.\nAny incoming API request or outgoing request ([webhooks][webhooks]) is considered\nas 1 operation. However some advanced requests like background removal or\nAVIF image optimization require more operations to be performed.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-uploading-volume-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Uploading volume",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#uploading-volume",
    "content": "Every successful file upload results in an extra operation count for each 100 MB.\nNote that the file size is rounded up to the closest number divisible by 100\nfor calculation.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "uploading",
        "title": "Uploading"
      },
      "h4": {
        "id": "uploading-volume",
        "title": "Uploading volume"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-malware-protection-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Malware protection",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#malware-protection",
    "content": "All uploaded files are screened for viruses.\nPlease note that a single additional operation is deducted for every 100 MB\nscanned for viruses.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "uploading",
        "title": "Uploading"
      },
      "h4": {
        "id": "malware-protection",
        "title": "Malware protection"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-examples-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#examples",
    "content": "The cost of uploading a 20 MB file:\n1 operation for the API request.\n\n1 operation due to rounding up the file size to 100 MB.\n\n1 operation for the virus scan of 100 MB.\n\n\nFor a 250 MB file:\n2 operations for the API request.\n\n3 operations attributed to rounding the file size up to 300 MB.\n\n3 operations for the virus scan of 300 MB.\n\n\nUploading a file larger than 100 MB requires 2 API requests.\nLearn more about [Multipart uploading][uploading-files-multipart].",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "uploading",
        "title": "Uploading"
      },
      "h4": {
        "id": "examples",
        "title": "Examples"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-image-processing-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Image processing",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#image-processing",
    "content": "When requesting an image from the CDN, you can do a lot of things all at once.\nYou can resize, apply effects, and make it load faster, all in one go.\nNo matter how complicated your task is, or how many changes are included\nin the URL, Uploadcare only counts it as one operation for each unique URL\nper billing cycle. Please note that, in addition to operations,\nCDN traffic related to your tasks is also taken into account.\nThere are certain tasks that require more computational power that will\nresult in additional operations being consumed:\nFeature Operations per request \n[Image compression to AVIF format][transformations-image-format] 2 \n[Animated images optimization][transformations-gif-to-video] 2 \n[Image transformations with facial detection][face-detection-operations] 2 \n[Background removal][remove-bg] 750",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "image-processing",
        "title": "Image processing"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-examples-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Examples",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#examples-1",
    "content": "Adjust the size, optimize, and convert the image format to WebP:\n1 operation for a unique URL.\n\n\nAdjust the size, optimize, and convert the image format to AVIF:\n1 operation for a unique URL.\n\n1 additional operation for AVIF conversion.\n\n\nRemove the background, add an overlay, and resize:\n1 operation for a unique URL.\n\n749 additional operations for background removal.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "image-processing",
        "title": "Image processing"
      },
      "h4": {
        "id": "examples-1",
        "title": "Examples"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-delivery-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Delivery",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#delivery",
    "content": "When your users request a file, Uploadcare only counts the traffic if the\nfile is either the original or a cached version. However, if a file isn't\ncached and needs processing—especially if that processing involves complex\ntransformations specified in the URL—it will use up additional operations\nbased on the complexity of the tasks.\nWhen a file is requested, original or processed, it gets cached on CDN.\nThe lifespan of a file in the cache can vary depending on factors like\nhow frequently it's accessed. Popular files that are requested often tend\nto stay longer. On the other hand, infrequently accessed files might be removed.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "delivery",
        "title": "Delivery"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-file-management-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "File management",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-management",
    "content": "Each API request counts as one operation.\nBut some actions can count as extra operations, depending on how complex they are:\nFeature Operations \n[Detecting unsafe content in an image][unsafe-content] 40 per image \n[Processing a video][transformations-video] 100 per minute \n[Converting a document][transformations-docs] 100 per 50 MB \n[Auto-tagging an image][intelligence-object-recognition] 40 per image \n\nThese operations affect your storage volume because each operation means\na new file is uploaded. But, they don't affect your traffic usage.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "file-management",
        "title": "File management"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-billing-1-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Billing",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#billing-1",
    "content": "Uploadcare calculates your operations and rounds up to the nearest thousand.\nSo, if you've executed 1700 operations, we'll account for it as 2000.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "operations",
        "title": "Operations"
      },
      "h3": {
        "id": "billing-1",
        "title": "Billing"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-traffic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Traffic",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#traffic",
    "content": "Total amount of content that's been delivered from your account.\nTo track how much traffic you're using, just check out the\n[Analytics][project-analytics] section in your Dashboard.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "traffic",
        "title": "Traffic"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-storage-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Storage",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#storage",
    "content": "Total size of all the files you have stored in your account.\nOnly the uploaded and stored files count towards this.\nActions like [CDN operations][delivery-operations] and\n[image processing operations][transformations-image-list] don't consume your\nstorage space because the results are only cached on the CDN.\nHowever, operations like video processing or document conversion do affect\nyour storage volume, as each operation results in a new file upload.\nTo monitor your storage usage, simply check the [Analytics][project-analytics]\nsection on your Dashboard.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "storage",
        "title": "Storage"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-plans-and-limits-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Plans and limits",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#plans-and-limits",
    "content": "Demo Pro Business Business Plus \nOperations 10,000 100,000 250,000 500,000 \nTraffic 5 GB 75 GB 200 GB 400 GB \nStorage 1 GB 50 GB 125 GB 250 GB \nMax file size 10 MB 1 GB 10 GB 100 GB \nTeam members Personal use only 3 4 5",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "plans-and-limits",
        "title": "Plans and limits"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.introduction.billing-additional-resources-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/introduction/billing",
    "pathname": "/docs/introduction/billing",
    "title": "Additional resources",
    "breadcrumb": [
      {
        "title": "Introduction",
        "pathname": "/docs/introduction"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#additional-resources",
    "content": "Beginning with the Pro plan, we offer a pay-as-you-go model for additional\nusage, allowing you more flexibility and control over your usage.\nAny additional usage will be automatically charged at the rates specified below:\n Demo Pro Business Business Plus \n1,000 operations Not allowed $0.50 $0.45 $0.40 \n1 GB traffic Not allowed $0.50 $0.45 $0.40 \n1 GB storage Not allowed $0.50 $0.45 $0.45 \n\nIf you're interested in custom pricing and annual commitment,\n[contact our sales team][mail-sales].",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare billing"
      },
      "h1": {
        "id": "billing",
        "title": "Billing"
      },
      "h2": {
        "id": "plans-and-limits",
        "title": "Plans and limits"
      },
      "h3": {
        "id": "additional-resources",
        "title": "Additional resources"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploads",
    "pathname": "/docs/uploading/uploads",
    "title": "File uploading with Uploadcare",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare provides Upload API and powerful file uploaders for your website or app with no hassle."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-file-uploading-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploads",
    "pathname": "/docs/uploading/uploads",
    "title": "File uploading",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-uploading",
    "content": "You can upload any file type, from almost any source, using a variety of upload optionsBuilt-in storage and CDN\n\nUploading acceleration network\n\nMultipart uploading up to 5 TB per file\n\nFile analysis and moderation\n\nAuthenticated uploading process\n\nUnlimited scalability on demand\n\nAPI clients for popular platforms\n\n\nUpload files from almost any source using API or beautiful UI file uploaders.\nReceive and store: user-generated content, programmatically uploaded media,\nlarge files to be later optimized, etc.\nOnce uploaded, files become instantly accessible on our CDN via their unique\nand unguessable URLs. [Deliver][delivery] them with the set of image\noptimization and transformation operations, or [manage][file-management] via\nREST API.",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare"
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploads",
    "pathname": "/docs/uploading/uploads",
    "title": "File Uploader",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-uploader",
    "content": "Integrate our customizable uploading widget that provides a ton of features\nand works in all modern browsers:\n\n\nOur web and mobile uploading widgets:\n[File Uploader][file-uploader] — our flagship uploader\n\n[jQuery widget][jquery-widget]\n\n[iOS uploading widget][swift-integration]\n\n[Android uploading widget][android-integration]",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare"
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading"
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-upload-api-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploads",
    "pathname": "/docs/uploading/uploads",
    "title": "Upload API",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-api",
    "content": "Build custom uploading flow using Upload API directly or with an API client.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncUrl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out our guide to the various methods of [uploading files][uploading-files]\nand available integrations.",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare"
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading"
      },
      "h2": {
        "id": "upload-api",
        "title": "Upload API"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-proxy-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploads",
    "pathname": "/docs/uploading/uploads",
    "title": "Proxy",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#proxy",
    "content": "It is the best and simplest way to retrieve files from existing remote locations\nand deliver them using our CDN.\nLearn more about [Proxy][delivery-proxy].",
    "code_snippets": [
      {
        "code": "https://endpoint.ucr.io/ + https://yoursite.com/assets/image.jpg =\nhttps://endpoint.ucr.io/https://yoursite.com/assets/image.jpg"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare"
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading"
      },
      "h2": {
        "id": "proxy",
        "title": "Proxy"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploads-table-of-contents-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploads",
    "pathname": "/docs/uploading/uploads",
    "title": "Table of Contents",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#table-of-contents",
    "content": "Article Description \n[Uploading files][uploading-files] Upload media files with various options. Whether you need to accept user-generated content or serve media on your website or app, we've got you covered \n[File Uploader][file-uploader] Open source, responsive and mobile-ready web solution that allows users to select and upload multiple files from various sources \n[Storage options][storage-store] Uploadcare storage requires no configuration and works out of the box. Learn about file storing behavior \n[Signed uploads][secure-uploads] Get to control who can and when can upload files to one of your Uploadcare projects \n[File analysis on upload][file-analysis] We extract a ton of helpful information about file that you can use to your benifit \n[Validation and moderation][moderation] You can validate the types of files you want to accept, and apply various checks after \n[Upload API][upload-api] Low-level access to provide several ways of uploading files to Uploadcare servers in a secure and reliable way \n[API integrations][integrations] You don't have to code most of the low-level API integrations. We have high-level libraries for all popular platforms",
    "hierarchy": {
      "h0": {
        "title": "File uploading with Uploadcare"
      },
      "h1": {
        "id": "file-uploading",
        "title": "File uploading"
      },
      "h2": {
        "id": "table-of-contents",
        "title": "Table of Contents"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Uploading files",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Whether you need to accept user generated content, serve media on your website or app, or collect and prepare files to train your ML model — we’ve got you covered."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-uploading-files-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Uploading files",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#uploading-files",
    "content": "Whether you need to accept user generated content, serve media on your website\nor app, or collect and prepare files to train your ML model, we've got you\ncovered.\nUpload any file type from almost any source using various upload\noptions. Uploadcare provides a robust, secure, and comprehensive\nUpload API that you and your users can access from your backend\nor directly from the browser. We also offer state-of-the-art web\nFile Uploader and mobile widgets.\nEvery uploaded file is immediately available on [Uploadcare CDN][delivery]\nthrough unique and unguessable URLs. The files are stored in the integrated\nstorage. Once uploaded, you can [manage your files][managing-files] using the\nREST API and [deliver them][delivery], applying on-the-fly operations.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-projects-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Projects",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#projects",
    "content": "All files are uploaded into the projects. Projects are separate environments\nwith unique sets of [API keys][api-keys], dedicated storage, and settings.\nFor example, projects can be used to separate development, staging and\nproduction environments. Learn more about [projects][settings-projects].\nNote: Image uploads are available on the [Demo plan][billing-plans].\nTo upload other file types, you must add a credit card to your account\naccording to \"Know your customer\" (KYC) principles,\nbut as long as you stay on the free plan, you won't be charged.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics"
      },
      "h3": {
        "id": "projects",
        "title": "Projects"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-api-request-and-response-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Upload API request and response",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-api-request-and-response",
    "content": "When you upload a file,\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyou immediately receive the file's UUID in a 200 response,\nand the file immediately becomes available on our CDN.\nSave this UUID into your database and retrieve it to:\nServe optimized and transformed images.\n\nEncode videos based on their size and codec.\n\nOrganize them with arbitrary metadata.\n\nDetect the type of content.",
    "code_snippets": [
      {
        "code": "{\n  \"sample-image.jpeg\": \"17be4678-dab7-4bc7-8753-28914a22960a\"\n}"
      },
      {
        "code": "https://ucarecdn.com/17be4678-dab7-4bc7-8753-28914a22960a/"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics"
      },
      "h3": {
        "id": "upload-api-request-and-response",
        "title": "Upload API request and response"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-file-storing-behavior-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "File storing behavior",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-storing-behavior",
    "content": "When uploading files, you can specify whether you want to keep\nthem permanently or not.\nNotice the UPLOADCARE_STORE parameter in the example above.\nIt can be set as follows:\n0 — the file will be deleted after 24 hours.\n\n1 — the file will be stored permanently until explicitly deleted.\n\nauto — defers the choice of storage behavior to the project's\n[auto-store setting][project-settings-storage] (which is ON by default).\n\n\nIf you don't specify UPLOADCARE_STORE parameter, the default value is auto.\nNote: Before, the value was 0 by default. Learn more about [storing behavior][storage-store].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics"
      },
      "h3": {
        "id": "file-storing-behavior",
        "title": "File storing behavior"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-information-about-uploaded-files-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Information about uploaded files",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#information-about-uploaded-files",
    "content": "We can extract file data that you can use: from basic file\ninformation, e.g. EXIF, to insights into its content. We can automatically\n[analyze][file-analysis] files for things like malware or NSFW content.\nIt also allows you to use [MIME type moderation][moderation].\nCheck out [files section][files] in Dashboard to see it in action.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "uploading-basics",
        "title": "Uploading basics"
      },
      "h3": {
        "id": "information-about-uploaded-files",
        "title": "Information about uploaded files"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "File Uploader",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-uploader",
    "content": "[File Uploader][file-uploader] is a new and highly customizable widget that\nallows users to upload files from various sources, utilizing the power of\nUploadcare APIs.\n\n\nIf you're looking for a [ready-made uploading solution][file-uploader], look no further.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-uploading-from-the-browser-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Uploading from the browser",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#uploading-from-the-browser",
    "content": "If you need to build your own uploading solution and don't want to use\n[File Uploader][file-uploader], one of the options is to use our JS SDK.\n[Upload Client][ext-uploadcare-upload-client] works with both Node.js and browsers.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader"
      },
      "h4": {
        "id": "uploading-from-the-browser",
        "title": "Uploading from the browser"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-uploading-widgets-for-ios-and-android-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Uploading widgets for iOS and Android",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#uploading-widgets-for-ios-and-android",
    "content": "Both [Swift][swift-integration] and [Kotlin][android-integration] integrations\nhave not only uploaded API methods but include uploading widgets for iOS and Android.\nThey allow to:\nUpload files from a local disk, camera, and cloud sources.\n\nUpload multiple files at once.\n\nTrack, pause and continue multipart uploading.\n\nUpload in the background.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader"
      },
      "h4": {
        "id": "uploading-widgets-for-ios-and-android",
        "title": "Uploading widgets for iOS and Android"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-api-integrations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "API integrations",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#api-integrations",
    "content": "[JavaScript][js-integration]\n\n[PHP][php-integration]\n\n[Python & Django][python-integration]\n\n[Ruby][ruby-integration] and [Rails][rails-integration]\n\n[Swift][swift-integration] (iOS, iPadOS, macOS, tvOS, Linux)\n\n[Kotlin][android-integration] (Android)\n\n[Java][java-integration]\n\n[Golang][golang-integration]\n\n[Rust][rust-integration]",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "api-integrations",
        "title": "API integrations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-api-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Upload API features",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-api-features",
    "content": "The main features of our Upload API are:\n\n\n\n\n\n\n\n\nUpload local file\n\n\n\nUpload from URLs\n\n\n\nUpload large file\n\n\n\nAdd arbitrary metadata\n\n\n\nSigned uploads\n\n\n\nWebhooks on upload\n\n\n\nGet file infoYou can also check out the complete OpenAPI specification of [Upload API][upload-api].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-local-file-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Upload local file",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-local-file",
    "content": "The simplest way to upload a local file is to perform a HTTP POST request.\nAs in the example above, you only need to specify the project's public key.\nDirect file uploads support files smaller than 100 MiB only. (If you want\nto upload larger files, please use multipart uploads instead).\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out detailed API reference for [direct uploads][api-reference-upload-direct].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "upload-local-file",
        "title": "Upload local file"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-from-url-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Upload from URL",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-from-url",
    "content": "Uploadcare can fetch a file from a publicly available URL and upload it to your\nproject.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out detailed [uploads from URL][api-reference-from-url-upload] API reference.\nRequests to the endpoint return a JSON dictionary with a token that can be\nfurther used to check the status of an upload request. The token is not a\nfile ID and can't be used to address the file directly. The actual file ID\nshould be retrieved by calling the /from_url/status/ endpoint.\nIntegration implementation may vary, please refer to the respective documentation.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out detailed API reference for [uploads from URL][api-reference-from-url-upload-status].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "upload-from-url",
        "title": "Upload from URL"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-duplicates-prevention-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Duplicates prevention",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#duplicates-prevention",
    "content": "By default, every request to the /from_url/ endpoint with the same\nsource_url results in a new upload leading to file duplication.\nIf you would like Uploadcare to keep track of the requested URLs and avoid\nduplicate uploads, pass the save_URL_duplicates and check_URL_duplicates\nparameters described in [uploads from URL][api-reference-from-url-upload] API reference.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the source_url had already been fetched and uploaded previously, this\nrequest would return information about the already uploaded file.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "upload-from-url",
        "title": "Upload from URL"
      },
      "h4": {
        "id": "duplicates-prevention",
        "title": "Duplicates prevention"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-alternative-remote-uploading-method-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Alternative remote uploading method",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#alternative-remote-uploading-method",
    "content": "You can also upload remote files with CDN Proxy.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "upload-from-url",
        "title": "Upload from URL"
      },
      "h4": {
        "id": "alternative-remote-uploading-method",
        "title": "Alternative remote uploading method"
      }
    },
    "level": "h4"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-upload-large-file-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Upload large file",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-large-file",
    "content": "Multipart uploads should be used if you need to upload files larger\nthan 100 MiB or if you want to explicitly trigger\n[AWS S3 Transfer Acceleration][ext-s3-transfer-acceleration].\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out detailed API reference for [multipart uploads][api-reference-upload-requests-multipart].\nNote: Each uploaded part should be at least 5242880 bytes in size except\nfor the last one, which can be smaller. You can upload the file parts\nin parallel, provided that the byte order stays unchanged.",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "upload-large-file",
        "title": "Upload large file"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-add-arbitrary-metadata-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Add arbitrary metadata",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#add-arbitrary-metadata",
    "content": "You can add additional, arbitrary key-value data associated with uploaded files.\nFor example, you could store user IDs, order IDs, or tags.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more about [file metadata][file-metadata].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "add-arbitrary-metadata",
        "title": "Add arbitrary metadata"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-signed-uploads-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Signed uploads",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#signed-uploads",
    "content": "Signed upload requests include an authentication signature that is generated\nbased on your project's secret key and expiration time parameters. This\nsignature must be generated on your backend, as you must never expose your\nsecret key in client-side code.\nLearn more about [signed uploads][secure-uploads].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "signed-uploads",
        "title": "Signed uploads"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-webhooks-on-upload-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Webhooks on upload",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#webhooks-on-upload",
    "content": "Uploadcare can notify your application when a new file has been uploaded\nasynchronously. For example, you may need to decide on your file\nbased on the abovementioned analysis. When an upload happens, we'll make a POST\nrequest with a JSON payload to the endpoint you provided. Learn more about\n[webhooks][webhooks].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "webhooks-on-upload",
        "title": "Webhooks on upload"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-get-file-info-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Get file info",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#get-file-info",
    "content": "There're various methods to get file information: via\n[Upload API][api-upload-file-info],\n[REST API][api-reference-fileinfo], or [URL API][url-api-file-info-json].\nUpload API gives you limited but essential access, while REST API gives full details.\nIntegration implementation may vary, please refer to the respective documentation.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncURL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out detailed API reference for [file info][api-upload-file-info].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "upload-api-features",
        "title": "Upload API features"
      },
      "h3": {
        "id": "get-file-info",
        "title": "Get file info"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-retrieve-remote-files-on-the-fly-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Retrieve remote files on the fly",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#retrieve-remote-files-on-the-fly",
    "content": "Proxy automatically retrieves files from existing remote locations and delivers\nthem using [Uploadcare CDN][delivery]. It's easy to integrate, requiring only one\nURL modification:\nLearn more about [Proxy][delivery-proxy].",
    "code_snippets": [
      {
        "code": "https://endpoint.ucr.io/ + https://yoursite.com/assets/image.jpg =\nhttps://endpoint.ucr.io/https://yoursite.com/assets/image.jpg"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "retrieve-remote-files-on-the-fly",
        "title": "Retrieve remote files on the fly"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.uploading-files-migrate-files-from-anywhere-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/uploading-files",
    "pathname": "/docs/uploading/uploading-files",
    "title": "Migrate files from anywhere",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#migrate-files-from-anywhere",
    "content": "If you migrated to Uploadcare from a DIY solution or another platform,\nyou need to migrate your files. First, copy the files from their current\nlocation to your Uploadcare storage so they can be processed and\ndelivered using the Uploadcare CDN.\nLearn more about [Migro][migro-guide].",
    "hierarchy": {
      "h0": {
        "title": "Uploading files"
      },
      "h1": {
        "id": "uploading-files",
        "title": "Uploading files"
      },
      "h2": {
        "id": "migrate-files-from-anywhere",
        "title": "Migrate files from anywhere"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Uploadcare File Uploader | Overview",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Upload and store files with one secure, reliable and compatible solution. Use our ready-made uploader interface and infrastructure."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-uploadcare-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Uploadcare File Uploader",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#uploadcare-file-uploader",
    "content": "[File Uploader][file-uploader-product-page] is a new and highly customizable\nwidget that allows users to upload files from various sources. It utilizes the\npower of Uploadcare APIs and can run within any web tech stack.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-solutions-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Solutions",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#solutions",
    "content": "We supply a set of ready-made solutions for the most frequent file uploading\ncases: regular, inline, and minimal. Each with its own set of features\nand customization options. You can also use them as is or as a custom build reference.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-regular-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Regular File Uploader",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#regular-file-uploader",
    "content": "The Regular File Uploader is a dialog-based solution that enables easy integration of an uploading button into your application.\nThe button opens a dialog where users can select files to upload from various sources, including local files, external URLs, or social platforms.\nBoth the button and the dialog can be customized to match your application's look and feel.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions"
      },
      "h3": {
        "id": "regular-file-uploader",
        "title": "Regular File Uploader"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-inline-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Inline File Uploader",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#inline-file-uploader",
    "content": "The Inline mode is quite similar to the Regular uploader and is useful when you want to upload files without opening a dialog window.\nThis mode is particularly handy if you prefer using your own button and dialog components.\nThe Inline mode can also be useful when you want to embed the file uploader directly within a form or a specific section of your application's user interface.\nThis allows users to seamlessly upload files in context, without being redirected to a separate dialog window, thus enhancing the overall user experience.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions"
      },
      "h3": {
        "id": "inline-file-uploader",
        "title": "Inline File Uploader"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-minimal-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Minimal File Uploader",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#minimal-file-uploader",
    "content": "The Minimal uploader is the last, but certainly not the least, type of uploader.\nIt offers a streamlined approach, enabling file uploads without any additional UI elements.\nThe minimalistic uploader functions as a simple drag-and-drop area.\nHowever, some features, such as social sources and cloud editor, are unavailable with this uploader type.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions"
      },
      "h3": {
        "id": "minimal-file-uploader",
        "title": "Minimal File Uploader"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-embed-image-editor-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Embed image editor",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#embed-image-editor",
    "content": "Both Regular and Inline modes include a built-in cloud image editor that provides a few dozen popular image edit operations.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "solutions",
        "title": "Solutions"
      },
      "h3": {
        "id": "embed-image-editor",
        "title": "Embed image editor"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Features",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#features",
    "content": "The main feature of the new File Uploader is the ease of customization and\nlocalization with basic HTML and CSS.\nAdd a file uploading capability to your website:\nReceive files from anybody.\n\nUpload files of any type and up to 5 TB in size.\n\nUpload multiple files in one go.\n\nTrack upload jobs with an individual progress bar for each file.\n\nGet files from various sources, including local storage, camera, social media, and cloud storage services.\n\nSpeed up the uploading with the uploading network (it works like CDN).\n\nShow image previews.\n\nResize, crop, rotate, add effects, enhance images, add overlays right after upload.\n\nValidate files by their format or size.\n\nPrevent remote code execution through widgets and code execution in uploaded files like SVG, html and xml.\n\n\nAll your uploads go to the storage covered by SLA with a 99.9% uptime. On top of that, Uploadcare infrastructure is compliant with SOC 2, HIPAA, and more.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "features",
        "title": "Features"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-frameworks-support-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Frameworks support",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#frameworks-support",
    "content": "You can run the File Uploader within any tech stack. Here are a few examples:\nReact\n\nVue\n\nAngular\n\nSvetle",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "frameworks-support",
        "title": "Frameworks support"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-supported-browsers-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Supported browsers",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#supported-browsers",
    "content": "File Uploader is supported and tested in all major modern desktop and mobile browsers:\nChrome\n\nFirefox\n\nSafari\n\nEdge\n\nOpera\n\n\nIf you need IE support, please use our [jQuery widget][jquery-widget].",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "supported-browsers",
        "title": "Supported browsers"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-typescript-support-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Typescript support",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#typescript-support",
    "content": "We use [JSDoc type annotations][ext-jsdoc-supported-types]\nfor TypeScript static analysis support during development.\nAdditionally, we provide type definitions ([*.d.ts files][ext-jsdoc-supported-types])\nfor the TypeScript projects in our packages.\nCheck the [JSDoc Reference][ext-jsdoc-supported-types]\npage in TypeScript official documentation.\nBasic types are automatically loaded when you import the package.\nTo enable JSX support, add the following to your tsconfig.json file:",
    "code_snippets": [
      {
        "lang": "json",
        "code": "{\n  \"compilerOptions\": {\n    \"types\": [\"@uploadcare/blocks/types/jsx\"]\n  },\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "typescript-support",
        "title": "Typescript support"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-technology-behind-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Technology behind",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#technology-behind",
    "content": "We built the File Uploader as close to the native web platform as possible and\ndo not force you to use any specific development environment tools.\nUploader is built with web components, service workers, wasm, and a set of\nother modern technologies. Modern ESM-level code sharing. Minimum of external\ndependencies.\nThe build stage is unnecessary for development. Use the code directly in any\nmodern browser or Node.js. We encourage you to build your custom solutions with\nall building blocks that we have.",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "technology-behind",
        "title": "Technology behind"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-fast-start-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Fast start",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#fast-start",
    "content": "We recommend beginning with the File Uploader [configurator][configurator].\nIt includes all necessary settings and generates ready-to-use code snippets and\nstep-by-step instructions tailored to your project's environment. If you don't\nhave an account yet, now is the perfect time to [get one][account-signup].\nOr start with File Uploader [installation][file-uploader-installation].",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "fast-start",
        "title": "Fast start"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-accessibility-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Accessibility",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#accessibility",
    "content": "We are actively working to make the File Uploader accessible to everyone.\nHowever, please note that it is not currently fully accessible.\nWe have plans to incorporate support for accessibility features in the near future.\nIf accessibility is critical for your needs, we recommend checking out our\nprevious [jQuery widget][jquery-widget].",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "accessibility",
        "title": "Accessibility"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.uploading.file-uploader.file-uploader-other-uploading-widgets-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/uploading/file-uploader/file-uploader",
    "pathname": "/docs/uploading/file-uploader/file-uploader",
    "title": "Other uploading widgets",
    "breadcrumb": [
      {
        "title": "Uploading",
        "pathname": "/docs/uploading"
      },
      {
        "title": "File Uploader",
        "pathname": "/docs/uploading/file-uploader"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#other-uploading-widgets",
    "content": "This is our latest file uploading solution. If you're looking for a previous\none, please refer to the [jQuery widget][jquery-widget]. In contrast\nto the previous one, new uploader is 57% lighter, has a modern and highly\ncustomizable view, and works with any JavaScript framework, while previous\njQuery widget requires additional work.\nIf you're a mobile developer, check our Swift and Kotlin integrations:\n[iOS uploading widget][swift-integration]\n\n[Android uploading widget][android-integration]",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare File Uploader | Overview"
      },
      "h1": {
        "id": "uploadcare-file-uploader",
        "title": "Uploadcare File Uploader"
      },
      "h2": {
        "id": "other-uploading-widgets",
        "title": "Other uploading widgets"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Image optimization",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare allows process images on the fly with a set of CDN operations on the fly to alter images the way you need."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-image-optimization-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Image optimization",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#image-optimization",
    "content": "Image optimization is essential for improving the performance of your website\nor application. Resizing your images and compressing them without sacrificing\nquality are the critical factors to consider:\nScaling operations, such as various methods of resize and crop,\nhave the biggest effect.\n\nDelivering the most efficient format\nthat the client's browser supports.\n\nFurther optimization of the image quality of the\nresulting image, especially for high pixel ratios.\n\n\n\n\nIt's important to use all three types of operations to achieve the best\nresults.\nCheck out our [responsive images][guide-image-responsive] guide for more details.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-how-it-works-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "How it works",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#how-it-works",
    "content": "Every URL transformation generates a modified image version on the fly, while\nthe original file stays intact. The transformed image version will be cached\non [CDN nodes][delivery] to optimize delivery.\n\n\nAlso, you can [fetch and deliver images][delivery-proxy] to apply operations\nwithout explicitly uploading them:\nWhen applying any image operation, a new file is created (cached on our CDN,\nand not counted towards your storage limits). If not set, this file is encoded\nwith the default quality and format.\nImage processing operation may be applied only to the appropriate file.\nOn uploading, the file is analyzed by Uploadcare: file type, metadata, and so on;\nthe file is assigned an attribute is_image. If this attribute is true, then\nan operation can be applied to the file. See the Limitations section.\nWithout any image processing operation in the URL, CDN [instructs][delivery-cdn-inline]\nbrowsers to show images (Content-Disposition: inline) and download other file\ntypes (Content-Disposition: attachment). Browsers may not show all image formats,\nsuch as TIFF and HEIC. If you need to display an image, add any image\nprocessing operation, [-/preview/][transformations-image-preview] for instance.",
    "code_snippets": [
      {
        "code": "https://yoursite.ucr.io/-/resize/500x/https://yoursite.com/assets/image.jpg"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-limitations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Limitations",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#limitations",
    "content": "Image processing operations have limits that you should consider:\nInput image formats\n\nMandatory usage of core operations\n\nFile size\n\nOutput image dimensions\n\nSVG files\n\nImage resolution\n\nRotation\n\nAnimated images\n\n\nLearn more about [image processing limitations][delivery-operations-limits].",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works"
      },
      "h3": {
        "id": "limitations",
        "title": "Limitations"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-scaling-operations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Scaling operations",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#scaling-operations",
    "content": "Rather than delivering large, full-sized images and relying on the browser to\nresize them, you can do it programmatically:\n[Preview][transformations-image-preview]\n\n[Scale crop][transformations-image-scale-crop]\n\n[Resize][transformations-image-resize]\n\n[Crop][transformations-image-crop]\n\n\nThe advanced scaling operations allows you to resize images more precisely:\n[Smart crop][transformations-image-smart-crop]\n\n[Crop by ratio][transformations-image-crop-ratio]\n\n[Crop by objects][transformations-image-crop-objects]\n\n[Smart resize][transformations-smart-resize]\n\n[Zoom][transformations-image-zoom-objects]",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "scaling-operations",
        "title": "Scaling operations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-format-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Format",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#format",
    "content": "-/format/:format/\nIf any other image processing operation is applied (such as scaling operations),\nthe default format is auto (see how auto works).\nAlternatively, you can use the -/format/ operation to convert an image\nto one of the following formats:\njpeg is a lossy image format (good compression for photos). JPEG doesn’t\nsupport an alpha channel; hence you can use the\n[setfill][transformations-image-setfill] operation that sets a background\ncolor. All browsers support JPEG.\n\npng is a lossless format (good compression only for graphics) with\nalpha channel support. All browsers support PNG.\n\nwebp is a modern format with more efficient compression than JPEG and with\nalpha channel support. It works well for all images, yet [not all][ext-caniuse-webp]\nbrowsers and OSs support it.\n\nauto the default behavior; is an automatic image format selection based on\nalpha channel presenceand a client's device and browser.\n\npreserve returns the image in the original format if it is PNG or JPEG,\notherwise coerces to PNG or JPEG. This option is useful\nwhen you need to save the image, rather than display it to the end-user.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "format",
        "title": "Format"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-how-auto-works-and-prioritize-image-formats-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "How auto works and prioritize image formats",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#how-auto-works-and-prioritize-image-formats",
    "content": "First, the algorithm checks the Accept header with MIME types to figure out\nwhat image format a client browser supports.\nAVIF is used as output when all the following conditions are met:\nimage/avif MIME type is supported by the client.\n\nOutput image resolution is under the threshold (currently 2 MPx).\n\n\n\nWebP is used when image/webp MIME type is supported by the client.\n\nPNG is used when the source image contains an alpha channel with non-opaque pixels\nor when the image has limited color diversity, resembling artwork.\n\nJPEG is used otherwise.\n\n\nYou can disable the selection of modern formats, specifically AVIF and WebP,\nfor your project in the Dashboard. Alternatively, you may consider adding the\n-/format/preserve/ operation to a specific URL.\nNote: auto works when you use primary Uploadcare [storage][storage] (not S3\nBucket) and the default [Uploadcare CDN][delivery] domain ucarecdn.com.\n\n\n\n\n\n\n\n\n\n\n\n\n400x301 \n\npng 116Kb\n\n\nTransparent\n\n\n\n\n\n\n\n\n400x301 \n\njpeg 16Kb\n\n\nOpaque\n\n\n\n\n\n\n\n\n400x301 \n\nwebp 15Kb\n\n\nTransparent, size is equal\n\n\nto the opaque one.\nBrowsers that support WebP will load this image version, while others will\ndisplay JPEG or PNG instead.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "format",
        "title": "Format"
      },
      "h3": {
        "id": "how-auto-works-and-prioritize-image-formats",
        "title": "How auto works and prioritize image formats"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-quality-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Quality",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#quality",
    "content": "-/quality/:value/\nSets output quality for [lossy formats][ext-lossy-formats] (JPEG, WebP, and AVIF).\nSince actual settings vary from codec to codec and, more importantly, from format\nto format, we provide five simple tiers that are consistent across\ndifferent formats and other settings and suit most cases of image distribution.\nA higher quality level will typically result in a larger output file.\nHowever, setting the quality level higher than the original level of the\nuploaded image won’t increase your file size.\nnormal — the default behavior when no quality operation is applied.\nThe reasonable quality for 1x pixel density.\n\nbetter — can be used to render relatively small and detailed previews. ≈125%\nfile size compared to normal.\n\nbest — can be used to deliver images close to their pristine quality\n(e.g., for artwork). ≈170% file size.\n\nlighter — useful when applied to relatively large images to save traffic\nwithout significant quality loss. ≈80% file size.\n\nlightest — highest compression ratio for high pixel ratio. ≈50% file size.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "quality",
        "title": "Quality"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-adaptive-quality-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Adaptive quality",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#adaptive-quality",
    "content": "Adaptive quality could be enabled per project in the Dashboard. In this case,\nwe analyze the output image using content-aware algorithms to determine\nmaximum compression that won't cause noticeable visual artefacts and\nadjust the compression level accordingly.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "adaptive-quality",
        "title": "Adaptive quality"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-optimizing-for-high-pixel-ratios-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Optimizing for high pixel ratios",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#optimizing-for-high-pixel-ratios",
    "content": "A great approach for high pixel densities is to increase images resolution\nand reduce quality at the same time. Compared to just increasing quality,\nimages will look clearer on all screens with nearly the same file size.\nTo adjust quality, you can use lighter and lightest presets.\n\n\n\n\n\n\n\n\n\n\n\n\n1x \n\nbest 16Kb\n\n\nBlurry on retina.\n\n\n\n\n\n\n\n\n1.5x \n\nlighter 14Kb\n\n\n\n\n\n\n\n\n\n\n2x \n\nlightest 12Kb\n\n\nPerfect for all screens.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "optimizing-for-high-pixel-ratios",
        "title": "Optimizing for high pixel ratios"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-progressive-jpeg-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Progressive JPEG",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#progressive-jpeg",
    "content": "-/progressive/yes/\n\n\n-/progressive/no/\nReturns a progressive image. In progressive images, data are compressed in\nmultiple passes of progressively higher detail. This is ideal for large images\nthat will be displayed while downloading over a slow connection allowing a\nreasonable preview after receiving only a portion of the data.\nThe operation does not affect non-JPEG images; does not force image formats\nto JPEG.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBaseline loading.\n\n\n\n\n\n\n\n\n\n\n\n\nProgressive loading.",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "progressive-jpeg",
        "title": "Progressive JPEG"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-strip-meta-information-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Strip meta information",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#strip-meta-information",
    "content": "-/strip_meta/all/\n\n\n-/strip_meta/none/\n\n\n-/strip_meta/sensitive/\nThe original image often comes with additional information built into the image\nfile. In most cases, this information doesn't affect image rendering and thus\ncan be safely stripped from the processed images to reduce image weight.\nCurrently, you can only keep EXIF meta information. Other storage, such as XMP\nor IPTC, will always be stripped when creating a new processed image version.\nall — the default behavior when no strip_meta operation is applied.\nNo meta information will be added to the processed file.\n\nnone — uses the EXIF from the original file.\nThe orientation tag will be set to 1 (normal orientation).\n\nsensitive — uses the EXIF from the original file but skips geolocation.\nThe orientation tag will be set to 1 (normal orientation).\n\n\nIf you need to restrict user access to EXIF information, please\n[protect your images from editing][mutability].",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "strip-meta-information",
        "title": "Strip meta information"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.optimization.image-optimization-animated-images-optimization-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/optimization/image-optimization",
    "pathname": "/docs/optimization/image-optimization",
    "title": "Animated images optimization",
    "breadcrumb": [
      {
        "title": "Optimization",
        "pathname": "/docs/optimization"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#animated-images-optimization",
    "content": "Video files are much smaller than GIFs, without noticeable quality loss. Their\ndelivery to end users is much faster. Gif to video operation converts animated\nimage files, such as GIF, WebP, and HEIC, to video and transforms them on the\nfly. Learn more about [animated images optimization][transformations-gif-to-video].",
    "hierarchy": {
      "h0": {
        "title": "Image optimization"
      },
      "h1": {
        "id": "image-optimization",
        "title": "Image optimization"
      },
      "h2": {
        "id": "animated-images-optimization",
        "title": "Animated images optimization"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/image-transformations/overview",
    "pathname": "/docs/image-transformations/overview",
    "title": "Uploadcare image transformations overview",
    "breadcrumb": [
      {
        "title": "Image transformations",
        "pathname": "/docs/image-transformations"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare allows process images on the fly with a set of CDN operations on the fly to alter images the way you need."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-image-transformations-and-art-direction-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/image-transformations/overview",
    "pathname": "/docs/image-transformations/overview",
    "title": "Image transformations and art-direction",
    "breadcrumb": [
      {
        "title": "Image transformations",
        "pathname": "/docs/image-transformations"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#image-transformations-and-art-direction",
    "content": "With Uploadcare, you can easily build custom image processing workflows and\nautomate most image transformation tasks. For example, you can set up a chain of\nactions for user-generated images that'll unify their look.\n\n\n\n\n\n\nUse and stack transformations right in the image URL:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOriginal image\n\n\n\n\n\n\n\n\n\nSharpen \n\n-/sharp/15/\n\n\n\n\n\n\n\n\n\nEnhance \n\n-/enhance/100/",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview"
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-how-it-works-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/image-transformations/overview",
    "pathname": "/docs/image-transformations/overview",
    "title": "How it works",
    "breadcrumb": [
      {
        "title": "Image transformations",
        "pathname": "/docs/image-transformations"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#how-it-works",
    "content": "Every URL transformation generates a modified image version on the fly, while\nthe original file stays intact. The transformed image version will be cached\non [CDN nodes][delivery] to optimize delivery.\n\n\nAlso, you can [fetch and deliver images][delivery-proxy] to apply operations\nwithout explicitly uploading them:\nImage processing operation may only apply to [appropriate file][delivery-operations-formats].\nOn uploading, the file is analyzed by Uploadcare: file type, metadata, and so on;\nthe file is assigned an attribute is_image. If this attribute is true, then\nan operation can be applied to the file. See the Limitations section.\nWhen applying any image operation, a new file is created (cached on our CDN,\nand not counted towards your storage limits). If not set, this file is encoded\nwith the default [quality][transformations-image-quality] and original\n[format][transformations-image-format]. However, you can adjust them to meet your\nrequirements better.",
    "code_snippets": [
      {
        "code": "https://yoursite.ucr.io/-/preview/-/resize/500x/https://yoursite.com/assets/image.jpg"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview"
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction"
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-full-list-of-image-transformations-operations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/image-transformations/overview",
    "pathname": "/docs/image-transformations/overview",
    "title": "Full list of image transformations operations",
    "breadcrumb": [
      {
        "title": "Image transformations",
        "pathname": "/docs/image-transformations"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#full-list-of-image-transformations-operations",
    "content": "Most of the image processing operations work on-the-fly:\n\n\n\n\n\n\n\n\nResize, crop, rotation\n\n\n\n \n\nPreview\n\n \n\nResize\n\n \n\nSmart resize\n\n \n\nCrop\n\n \n\nCrop by ratio\n\n \n\nCrop by objects\n\n \n\nScale crop\n\n \n\nSmart crop\n\n \n\nBorder radius and circle crop\n\n \n\nSet fill color\n\n \n\nZoom objects\n\n \n\nAutomatic rotation, EXIF-based\n\n \n\nManual rotation\n\n \n\nFlip\n\n \n\nMirror\n\n\n\nOverlays and watermarks\n\n\n\n\n\nImage overlay\n\n\n\nSelf overlay\n\n\n\nText overlay\n\n\n\nEffects and enhancements\n\n\n\n\n\nBasic color adjustment\n\n\n\nEnhance\n\n\n\nGrayscale\n\n\n\nInverting\n\n\n\nColor profile management\n\n\n\n\n\nConversion to sRGB\n\n\n\nICC profile size threshold\n\n\n\nPhoto filters\n\n\n\nBlur\n\n\n\nBlur region\n\n\n\nBlur faces\n\n\n\nUnsharp masking\n\n\n\nSharpen\n\n\n\nColor recognition\n\n\n\nFace-detection based transformations\n\n\n\nAnimated images optimization\n\n\n\nSVG transformations and rasterizationNote: Some image operations can't be perfomed on the fly and work asynchronously via [REST API][rest-api]:\n\n\n\n\n\n\n\n\nBackground removal\n\n\n\nObject recognition\n\n\n\nVideo thumbnail generation\n\n\n\nDocument thumbnail generationImage optimization operations can be found in a separate section:\n\n\n\n\n\n\n\n\nCompression\n\n\n\n\n\nFormat\n\n\n\nQuality\n\n\n\nSmart compression\n\n\n\nProgressive JPEG\n\n\n\nMeta information control",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview"
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction"
      },
      "h2": {
        "id": "full-list-of-image-transformations-operations",
        "title": "Full list of image transformations operations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.image-transformations.overview-limitations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/image-transformations/overview",
    "pathname": "/docs/image-transformations/overview",
    "title": "Limitations",
    "breadcrumb": [
      {
        "title": "Image transformations",
        "pathname": "/docs/image-transformations"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#limitations",
    "content": "Image processing operations have limits that you should consider:\nInput image formats\n\nMandatory usage of core operations\n\nFile size\n\nOutput image dimensions\n\nSVG files\n\nImage resolution\n\nRotation\n\nAnimated images\n\n\nLearn more about [image processing limitations][delivery-operations-limits].",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare image transformations overview"
      },
      "h1": {
        "id": "image-transformations-and-art-direction",
        "title": "Image transformations and art-direction"
      },
      "h2": {
        "id": "limitations",
        "title": "Limitations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/delivery/overview",
    "pathname": "/docs/delivery/overview",
    "title": "File delivery with Uploadcare",
    "breadcrumb": [
      {
        "title": "Delivery",
        "pathname": "/docs/delivery"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare CDN is a fast and reliable content delivery network that optimizes your images and videos for any device and platform."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-file-delivery-with-uploadcare-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/delivery/overview",
    "pathname": "/docs/delivery/overview",
    "title": "File delivery with Uploadcare",
    "breadcrumb": [
      {
        "title": "Delivery",
        "pathname": "/docs/delivery"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-delivery-with-uploadcare",
    "content": "Every uploaded file is immediately available on the Uploadcare CDN\n— the best place to host your files for media deliveryGlobal CDN network\n\nFastest on-the-fly image operations\n\nHuge set of image transformations\n\nDeliver files from any remote storage\n\nDDoS protection and access control\n\nUnlimited scalability on demand\n\n\nCDN is a geographically distributed system of servers that delivers content to\nclient devices from the servers nearby, which saves time on long-distance data\nexchange.\nWhile traditional CDNs are typically limited to basic copying and caching\nfunctions, Uploadcare CDN stands out by offering dynamic image modifications.\nThis unique feature not only ensures faster page load times and better uptime,\nbut also allows on-the-fly image optimization and transformation of images to\nsuit the device they are being consumed on.",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare"
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-how-it-works-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/delivery/overview",
    "pathname": "/docs/delivery/overview",
    "title": "How it works",
    "breadcrumb": [
      {
        "title": "Delivery",
        "pathname": "/docs/delivery"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#how-it-works",
    "content": "Access files in Uploadcare CDN at ucarecdn.com over HTTP/HTTPS liks this:\n\n\nYou can add CDN operations by including directives in the CDN URL:\n\n\n:uuid stands for the unique file identifier, UUID, assigned on upload.\n\n/-/ is a mandatory parsing delimiter to divide operations and other path\ncomponents.\n\n:operation/:params/ is a CDN operation directive with parameters.\n\n:filename is an optional filename you can add after a trailing slash /.\n\n\nYou can stack two and more operations like this:\n/:operation/:params/-/:operation/:params/\nSame applies when using [Proxy][delivery-proxy]:",
    "code_snippets": [
      {
        "code": "https://yoursite.ucr.io/-/preview/-/resize/500x/https://yoursite.com/assets/image.jpg"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare"
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare"
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-seo-optimization-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/delivery/overview",
    "pathname": "/docs/delivery/overview",
    "title": "SEO optimization",
    "breadcrumb": [
      {
        "title": "Delivery",
        "pathname": "/docs/delivery"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#seo-optimization",
    "content": "One way to improve your site's SEO is to name your files relevantly,\nsuch as integrating keywords into your image URLs.\nValid URLs typically have words separated by a hyphen,\nfor example seo-optimize-images.\nYou can specify an additional filename after the UUID\ninstead of the automatically generated one:\n\n\nThe filename can be added to both the original (after the UUID) and at the end\nof the URL with operations applied, as in the example above.",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare"
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare"
      },
      "h2": {
        "id": "seo-optimization",
        "title": "SEO optimization"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.delivery.overview-table-of-contents-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/delivery/overview",
    "pathname": "/docs/delivery/overview",
    "title": "Table of Contents",
    "breadcrumb": [
      {
        "title": "Delivery",
        "pathname": "/docs/delivery"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#table-of-contents",
    "content": "Article Description \n[On-the-fly operations][delivery-operations] Uploadcare CDN features on-the-fly image optimization, large set of image transformations, and non-image file operations, such as getting file information or changing file delivery behavior \n[Image optimizations][transformations-image-compression] Scale your images and compress them without sacrificing quality to improve the performance of your website or application \n[Image transformations][transformations-image] Build custom image processing workflows and automate most image transformation tasks: scaling, rotation, overlays, effects and enhancements, face-detection, SVG transformation and many more \n[CDN settings][delivery-settings] Set up custom CDN CNAME, cache duration, search engine indexing behavior, or even bring your own CDN \n[Fetch and deliver remote files][delivery-proxy] When you need to get all the benefits of image optimization for files that you already store somewhere else, use Proxy. It automatically retrieves files from existing remote locations and delivers them using the CDN \n[Signed URLs][secure-delivery] Control who and for how long can access files in your project via signed URLs. Protect end-users sensitive data, authorize clients, limit access by time \n[URL API][url-api] List of all CDN operations, its limitations, and settings",
    "hierarchy": {
      "h0": {
        "title": "File delivery with Uploadcare"
      },
      "h1": {
        "id": "file-delivery-with-uploadcare",
        "title": "File delivery with Uploadcare"
      },
      "h2": {
        "id": "table-of-contents",
        "title": "Table of Contents"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/file-management/overview",
    "pathname": "/docs/file-management/overview",
    "title": "File management with Uploadcare",
    "breadcrumb": [
      {
        "title": "File management",
        "pathname": "/docs/file-management"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Implement custom workflows for your uploaded files with Uploadcare REST API."
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview-file-management-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/file-management/overview",
    "pathname": "/docs/file-management/overview",
    "title": "File management",
    "breadcrumb": [
      {
        "title": "File management",
        "pathname": "/docs/file-management"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-management",
    "content": "Implement custom workflows for your uploaded files.Manage files with REST API\n\nWebhooks for various events\n\nArbitrary file metadata management\n\nS3 bucket integration\n\nVideo processing\n\nDocument conversion\n\nUnsafe content detection\n\nObject recognition\n\nMalware protection\n\nAPI clients for popular platforms\n\n\nOnce uploaded, you can manage files using REST API and project storage settings.",
    "hierarchy": {
      "h0": {
        "title": "File management with Uploadcare"
      },
      "h1": {
        "id": "file-management",
        "title": "File management"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview-how-it-works-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/file-management/overview",
    "pathname": "/docs/file-management/overview",
    "title": "How it works",
    "breadcrumb": [
      {
        "title": "File management",
        "pathname": "/docs/file-management"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#how-it-works",
    "content": "Manage your files using REST API directly or with an API client.\n\n\n\n\n\n\nJavaScript\n\nPHP\n\nPython\n\nRuby\n\nSwift\n\ncUrl",
    "hierarchy": {
      "h0": {
        "title": "File management with Uploadcare"
      },
      "h1": {
        "id": "file-management",
        "title": "File management"
      },
      "h2": {
        "id": "how-it-works",
        "title": "How it works"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs.docs.file-management.overview-table-of-contents-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/file-management/overview",
    "pathname": "/docs/file-management/overview",
    "title": "Table of Contents",
    "breadcrumb": [
      {
        "title": "File management",
        "pathname": "/docs/file-management"
      }
    ],
    "tab": {
      "title": "Guides",
      "pathname": "/docs"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#table-of-contents",
    "content": "Article Description \n[Managing files][managing-files] Uploadcare provides various methods for managing already uploaded files with its REST API \n[Webhooks][webhooks] Setup webhooks to notify your application about certain events that occur in your project asynchronously \n[File metadata][file-metadata] File metadata is additional, arbitrary key-value data associated with uploaded files. For example, you could store a unique file identifier from your system \n[S3 bucket integration][storage-custom] Connect an Amazon S3 bucket to one or more of your Uploadcare projects to implement custom file workflows, integrated deeply into your system \n[Storage backups][storage-backup] Automatically copy all of you stored files to a custom S3 bucket. Connect the storage once, and the system will do backups on a timely basis \n[Video processing][transformations-video] Encode video files to MP4, WEBM, or OGG, and transform them to adjust the viewing experience, create thumbnails, and save bandwidth \n[Document conversion][transformations-docs] Convert documents and create their thumbnails to improve user experience \n[Unsafe content detection][unsafe-content] Detect and identify inappropriate, unwanted, NSFW, or offensive user-generated content \n[Object recognition][intelligence-object-recognition] Categorize and tag people, objects, and other content classes in your images \n[Malware protection][malware-protection] Automatically detect infected or malicious files to protect your users \n[REST API][rest-api] Low-level access to Uploadcare features, e.g. CRUD files and their metadata, receive webhooks, and run add-ons \n[API integrations][integrations] You don't have to code most of the low-level API integrations. We have high-level libraries for all popular platforms",
    "hierarchy": {
      "h0": {
        "title": "File management with Uploadcare"
      },
      "h1": {
        "id": "file-management",
        "title": "File management"
      },
      "h2": {
        "id": "table-of-contents",
        "title": "Table of Contents"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "Uploadcare integrations",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare features widgets, API clients, plugins, no-code integrations, and low-code guides for different languages, frameworks and platforms."
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-file-uploader-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "File Uploader",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#file-uploader",
    "content": "The new and highly customizable widget that allows users to upload and edit\nfiles from various sources, utilizing the power of Uploadcare APIs.\nWe built it as close to the native web platform as possible (web components,\nservice workers, wasm, etc). It doesn't force you to use any specific\ndevelopment environment tools.\n\n\n\n\n\n\n\n\nDocumentation\n\n\n\n\n\nReact example\n\n\n\n\n\nVue example\n\n\n\n\n\nAngular example\n\n\n\n\n\nNext.js example\n\n\n\n\n\nSvelte example",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-previous-stable-version-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "Previous stable version",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#previous-stable-version",
    "content": "We continue to support our previous uploading widget. It's built using jQuery,\nvery stable, and supports every customer request we received over the years.\n\n\n\n\n\n\n\n\nDocumentation\n\n\n\n\n\nReact wrapper\n\n\n\n\n\nAngular wrapper",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "file-uploader",
        "title": "File Uploader"
      },
      "h3": {
        "id": "previous-stable-version",
        "title": "Previous stable version"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-api-clients-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "API clients",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#api-clients",
    "content": "JS\n\n\n\n\n\nPHP\n\n\n\n\n\nPython\n\n\n\n\n\nRuby\n\n\n\n\n\nRails\n\n\n\n\n\nJava\n\n\n\n\n\nGolang\n\n\n\n\n\nRust\n\n\n\n\n\niOS (Swift)\n\n\n\n\n\nAndroid (Kotlin)",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "api-clients",
        "title": "API clients"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-cdn-sdks-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "CDN SDKs",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#cdn-sdks",
    "content": "Next.js\n\n\n\n\n\nNuxtImage\n\nby Nuxt",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "cdn-sdks",
        "title": "CDN SDKs"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-plugins-and-no-code-integrations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "Plugins and no-code integrations",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#plugins-and-no-code-integrations",
    "content": "WooCommerce\n\nby snowray.co\n\n\n\n\n\nContentful\n\n \n\n\n\n\n\nCKEditor\n\n \n\n\n\n\n\nTinyMCE\n\n \n\n\n\n\n\nRedactor\n\n \n\n\n\n\n\nZapier\n\n \n\n\n\n\n\nMake\n\n \n\n\n\n\n\nIntegrately\n\n \n\n\n\n\n\nWix Uploadly\n\nby Inspon",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "plugins-and-no-code-integrations",
        "title": "Plugins and no-code integrations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-low-code-guides-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "Low-code guides",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#low-code-guides",
    "content": "Shopify\n\n \n\n\n\n\n\nWebflow\n\n \n\n\n\n\n\nMarketo",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "low-code-guides",
        "title": "Low-code guides"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-third-party-integrations-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "Third-party integrations",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#third-party-integrations",
    "content": "Lovely libs made by those who believe in Uploadcare.\n\n\n\n\n\n\n\n\nPHP Transformation URLs generation\n\nby Vormkracht10\n\n\n\n\n\nFlysystem driver for Laravel\n\nby Vormkracht10\n\n\n\n\n\nVue.js\n\nby Josh Smith\n\n\n\n\n\nVue.js\n\nby Tipe.io\n\n\n\n\n\nC#\n\nby Anton Kheystver\n\n\n\n\n\nErlang\n\nby Roman Chvanikoff\n\n\n\n\n\nElixir\n\nby CryptoHamsters\n\n\n\n\n\nFlutter\n\nby Konstantin Kai\n\n\n\n\n\nA-Frame\n\nby Fernando Serrano\n\n\n\n\n\nGetSimple CMS\n\nby zekoolweb",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "third-party-integrations",
        "title": "Third-party integrations"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.all-integrations-misc-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/all-integrations",
    "pathname": "/docs/integrations/all-integrations",
    "title": "Misc",
    "breadcrumb": [],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#misc",
    "content": "Adaptive delivery SDK\n\n \n\n\n\n\n\nWebpack\n\nby Roman Dubinin\n\n\n\n\n\nWordPress\n\n \n\n\n\n\n\nJotForm\n\n \n\n\n\n\n\nNetlify CMS\n\n Got an integration request? [Hit us up!][mail-help]",
    "hierarchy": {
      "h0": {
        "title": "Uploadcare integrations"
      },
      "h1": {
        "id": "integrations",
        "title": "Integrations"
      },
      "h2": {
        "id": "misc",
        "title": "Misc"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Python API Client for File Upload and Management",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Uploadcare Python & Django integrations handle uploads and further operations with files by wrapping Upload and REST APIs."
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-python-api-client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Python API Client",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#python-api-client",
    "content": "Uploadcare Python & Django integrations handle uploads and further operations\nwith files by wrapping Upload and REST APIs.\n[GitHub →][pyuploadcare-github-readme]",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management"
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Features",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#features",
    "content": "Uploading ([Upload API][upload-api]):\nUpload files from a local storage and URLs (up to 5 TB)\n\nMultipart uploading for large files\n\nUploading network to speed up uploading jobs (like CDN)\n\n\nFile management ([REST API][rest-api]):\nGet file info\n\nPerform various file operations (store/delete/copy/group)\n\nDetect unsafe and malicious content\n\nEncode and transform videos\n\nConvert documents and other files\n\nRecognize objects in the image\n\nAdd arbitrary file metadata\n\nManage webhooks\n\n\nImage processing ([URL API][url-api]):\nCompression\n\nGeometry\n\nColors\n\nDefinition\n\nImage and text overlays\n\nRotations\n\nRecognition\n\nFile info\n\nProxy (fetch)\n\n\nSecurity features:\nSecure authentication\n\nSecure uploads (signed uploads)\n\nSecure delivery (signed URLs)\n\nSecure webhooks (signing secret)",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management"
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client"
      },
      "h2": {
        "id": "features",
        "title": "Features"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-installation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Installation",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#installation",
    "content": "In order to install pyuploadcare, run these command in CLI:\nTo use in Django project install with extra dependencies:",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "pip install pyuploadcare"
      },
      {
        "lang": "bash",
        "code": "pip install pyuploadcare[django]"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management"
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client"
      },
      "h2": {
        "id": "installation",
        "title": "Installation"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-usage-example-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Usage example",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#usage-example",
    "content": "Here is an example how to include Uploadcare ImageField into an existing\nDjango project.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "from django import forms\nfrom django.db import models\n\nfrom pyuploadcare.dj.models import ImageField\nfrom pyuploadcare.dj.forms import FileWidget, ImageField as ImageFormField\n\nclass Candidate(models.Model):\n    photo = ImageField(blank=True, manual_crop='4:3')\n\n# optional. provide advanced widget options:\n# https://uploadcare.com/docs/file-uploader/configuration/\n# https://uploadcare.com/docs/file-uploader/options/\nclass CandidateForm(forms.Form):\n    photo = ImageField(widget=FileWidget(attrs={\n        'source-list': 'local,url,camera',\n        'camera-mirror': True,\n    }))"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management"
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client"
      },
      "h2": {
        "id": "usage-example",
        "title": "Usage example"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-example-django-project-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Example Django project",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#example-django-project",
    "content": "Check out example Django project.\nIt features:\nProject section\n\nFiles section\n\nFile Groups section\n\nFiles uploading\n\nDocuments conversion\n\nVideo conversion\n\nWebhooks\n\nPosts section",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management"
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client"
      },
      "h2": {
        "id": "example-django-project",
        "title": "Example Django project"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.docs/integrations.docs/integrations.api-clients.python-requirements-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/docs/integrations/api-clients/python",
    "pathname": "/docs/integrations/api-clients/python",
    "title": "Requirements",
    "breadcrumb": [
      {
        "title": "API clients",
        "pathname": "/docs/integrations/api-clients"
      }
    ],
    "tab": {
      "title": "Integrations",
      "pathname": "/docs/integrations"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#requirements",
    "content": "Python 3.8, 3.9, 3.10, 3.11, 3.12\n\n\nTo use pyuploadcare with Python 3.6 or 3.7 please install pyuploadcare < 5.0.\nTo use pyuploadcare with Python 2.7 please install pyuploadcare < 3.0.\nDjango compatibility:\nPy/Dj 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 \n3.8 X X X X X X X  \n3.9 X X X X X X X  \n3.10    X X X X X \n3.11      X X X \n3.12       X X",
    "hierarchy": {
      "h0": {
        "title": "Python API Client for File Upload and Management"
      },
      "h1": {
        "id": "python-api-client",
        "title": "Python API Client"
      },
      "h2": {
        "id": "requirements",
        "title": "Requirements"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.baseUpload",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/base-upload",
    "pathname": "/api/upload-api/upload/base-upload",
    "title": "Direct uploads",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.baseUpload",
    "method": "POST",
    "endpoint_path": "/base",
    "endpoint_path_alternates": [
      "/base",
      "https://upload.uploadcare.com/base",
      "https://upload.uploadcare.com/base"
    ],
    "response_type": "json",
    "description": "Direct file uploads comply with the RFC 7578 standard.\nIn other words, you can perform a direct upload by making an HTTP POST request with the Content-Type\nheader set to multipart/form-data.\nNote: Direct file uploads support files smaller than 100 megabytes only.\nIf you would like to upload larger files, please use Multipart Uploads instead.\nFile upload example with curl:",
    "code_snippets": [
      {
        "code": "curl -F \"UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY\" -F \"my_file.jpg=@my_file.jpg\" \"https://upload.uploadcare.com/base/\""
      }
    ],
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadStart",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/multipart-file-upload-start",
    "pathname": "/api/upload-api/upload/multipart-file-upload-start",
    "title": "Start multipart upload",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.multipartFileUploadStart",
    "method": "POST",
    "endpoint_path": "/multipart/start",
    "endpoint_path_alternates": [
      "/multipart/start",
      "https://upload.uploadcare.com/multipart/start",
      "https://upload.uploadcare.com/multipart/start"
    ],
    "response_type": "json",
    "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to\nexplicitly trigger AWS S3 Transfer Acceleration.\nWhen you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.\nTo upload large files, 3 requests are sent in sequence:\n/multipart/start/\n\n<presigned-url-x>\n\n/multipart/complete/.\n\n\nNote: Multipart uploads support files larger than 10 megabytes only.",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadPart",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/multipart-file-upload-part",
    "pathname": "/api/upload-api/upload/multipart-file-upload-part",
    "title": "Upload individual file parts",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.multipartFileUploadPart",
    "method": "PUT",
    "endpoint_path": "/<presigned-url-x>",
    "endpoint_path_alternates": [
      "/<presigned-url-x>",
      "https://upload.uploadcare.com/%3Cpresigned-url-x%3E",
      "https://upload.uploadcare.com/%3Cpresigned-url-x%3E"
    ],
    "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the\n/multipart/start/ endpoint.\nEach uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.\nYou can upload the file parts in parallel provided that the byte order stays unchanged.\nNote: You MUST define Content-Type header for your data.",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.multipartFileUploadComplete",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/multipart-file-upload-complete",
    "pathname": "/api/upload-api/upload/multipart-file-upload-complete",
    "title": "Complete multipart upload",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.multipartFileUploadComplete",
    "method": "POST",
    "endpoint_path": "/multipart/complete",
    "endpoint_path_alternates": [
      "/multipart/complete",
      "https://upload.uploadcare.com/multipart/complete",
      "https://upload.uploadcare.com/multipart/complete"
    ],
    "response_type": "json",
    "description": "Once all the file parts have been uploaded successfully, complete the\nupload session to assemble all the file parts into a single resulting file.",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fromURLUpload",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/from-url-upload",
    "pathname": "/api/upload-api/upload/from-url-upload",
    "title": "Upload files from URLs",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.fromURLUpload",
    "method": "POST",
    "endpoint_path": "/from_url",
    "endpoint_path_alternates": [
      "/from_url",
      "https://upload.uploadcare.com/from_url",
      "https://upload.uploadcare.com/from_url"
    ],
    "response_type": "json",
    "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the\nfetched file to your project.\nUpload tokens\nRequests to the endpoint return a JSON dictionary with a token that can be further used\nto check the status of the upload\nrequest.\nNote: The token is not a file ID and can't be used to address the file directly.\nThe actual file ID should be retrieved by calling the /from_url/status/ endpoint.\nDuplicates prevention\nBy default, every call to the /from_url/ endpoint with the same source_url results in\na new upload leading to file duplication.\nIf you would like Uploadcare to keep track of the requested URLs and avoid the duplicate\nuploads, pass the save_URL_duplicates and check_URL_duplicates parameters described below.",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fromURLUploadStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/from-url-upload-status",
    "pathname": "/api/upload-api/upload/from-url-upload-status",
    "title": "Check the status of a task to fetch/upload a file from a URL",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.fromURLUploadStatus",
    "method": "GET",
    "endpoint_path": "/from_url/status",
    "endpoint_path_alternates": [
      "/from_url/status",
      "https://upload.uploadcare.com/from_url/status",
      "https://upload.uploadcare.com/from_url/status"
    ],
    "response_type": "json",
    "description": "The endpoint notifies about the progress of the task by changing the value of the status field:\nthe field is set to waiting initially\n\nonce the system starts processing the request, the field is set to progress\n\nif the file is fetched and uploaded successfully, the status field is set to success\nand the endpoint returns a JSON object holding information about the uploaded file\n\nif the system fails to fetch/upload the file, the status field is set to error and\nthe error field is set to the cause of the error.",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_upload.subpackage_upload.fileUploadInfo",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/upload/file-upload-info",
    "pathname": "/api/upload-api/upload/file-upload-info",
    "title": "Get information about an uploaded file",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Upload",
        "pathname": "/api/upload-api/upload"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_upload.fileUploadInfo",
    "method": "GET",
    "endpoint_path": "/info",
    "endpoint_path_alternates": [
      "/info",
      "https://upload.uploadcare.com/info",
      "https://upload.uploadcare.com/info"
    ],
    "response_type": "json",
    "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups.subpackage_groups.createFilesGroup",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/groups/create-files-group",
    "pathname": "/api/upload-api/groups/create-files-group",
    "title": "Create a file group",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Groups",
        "pathname": "/api/upload-api/groups"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_groups.createFilesGroup",
    "method": "POST",
    "endpoint_path": "/group",
    "endpoint_path_alternates": [
      "/group",
      "https://upload.uploadcare.com/group",
      "https://upload.uploadcare.com/group"
    ],
    "response_type": "json",
    "description": "Create a file group from a set of already uploaded files.\nThe most common use case for creating a file group is when a user uploads\nmultiple files at once and then wants to display them together.\nNote: A group itself and files within it MUST belong to the same project.\nNote: Groups are immutable and the only way to add/remove a file to a group\nis to create a new one.",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.upload-api.subpackage_groups.subpackage_groups.filesGroupInfo",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/upload-api/groups/files-group-info",
    "pathname": "/api/upload-api/groups/files-group-info",
    "title": "Get information about a file group",
    "breadcrumb": [
      {
        "title": "Upload API",
        "pathname": "/api/upload-api"
      },
      {
        "title": "Groups",
        "pathname": "/api/upload-api/groups"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "api_endpoint_id": "subpackage_groups.filesGroupInfo",
    "method": "GET",
    "endpoint_path": "/group/info",
    "endpoint_path_alternates": [
      "/group/info",
      "https://upload.uploadcare.com/group/info",
      "https://upload.uploadcare.com/group/info"
    ],
    "response_type": "json",
    "description": "Returns a JSON object with information about a file group (when the group was created,\nnumber of the files in the group, etc).",
    "environments": [
      {
        "id": "Default",
        "url": "https://upload.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.__package__.File metadata",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file-metadata",
    "pathname": "/api/rest-api-v-0-7/file-metadata",
    "title": "Get file's metadata",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "__package__.File metadata",
    "method": "GET",
    "endpoint_path": "/files/:uuid/metadata",
    "endpoint_path_alternates": [
      "/files/{uuid}/metadata",
      "https://api.uploadcare.com/files/:uuid/metadata",
      "https://api.uploadcare.com/files/%7Buuid%7D/metadata"
    ],
    "response_type": "json",
    "description": "Get file's metadata keys and values.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesList",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/files-list",
    "pathname": "/api/rest-api-v-0-7/file/files-list",
    "title": "List of files",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.filesList",
    "method": "GET",
    "endpoint_path": "/files",
    "endpoint_path_alternates": [
      "/files",
      "https://api.uploadcare.com/files",
      "https://api.uploadcare.com/files"
    ],
    "response_type": "json",
    "description": "Getting a paginated list of files. If you need multiple results pages, use previous/next from the response to navigate back/forth.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.storeFile",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/store-file",
    "pathname": "/api/rest-api-v-0-7/file/store-file",
    "title": "Store file",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.storeFile",
    "method": "PUT",
    "endpoint_path": "/files/:uuid/storage",
    "endpoint_path_alternates": [
      "/files/{uuid}/storage",
      "https://api.uploadcare.com/files/:uuid/storage",
      "https://api.uploadcare.com/files/%7Buuid%7D/storage"
    ],
    "response_type": "json",
    "description": "Store a single file by UUID. When file is stored, it is available permanently. If not stored — it will only be available for 24 hours. If the parameter is omitted, it checks the Auto file storing setting of your Uploadcare project identified by the public_key provided in the auth-param.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.deleteFileStorage",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/delete-file-storage",
    "pathname": "/api/rest-api-v-0-7/file/delete-file-storage",
    "title": "Delete file",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.deleteFileStorage",
    "method": "DELETE",
    "endpoint_path": "/files/:uuid/storage",
    "endpoint_path_alternates": [
      "/files/{uuid}/storage",
      "https://api.uploadcare.com/files/:uuid/storage",
      "https://api.uploadcare.com/files/%7Buuid%7D/storage"
    ],
    "response_type": "json",
    "description": "Removes individual files. Returns file info.\nNote: this operation removes the file from storage but doesn't invalidate CDN cache.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.info",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/info",
    "pathname": "/api/rest-api-v-0-7/file/info",
    "title": "File info",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.info",
    "method": "GET",
    "endpoint_path": "/files/:uuid",
    "endpoint_path_alternates": [
      "/files/{uuid}",
      "https://api.uploadcare.com/files/:uuid",
      "https://api.uploadcare.com/files/%7Buuid%7D"
    ],
    "response_type": "json",
    "description": "Get file information by its UUID (immutable).",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesStoring",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/files-storing",
    "pathname": "/api/rest-api-v-0-7/file/files-storing",
    "title": "Batch file storing",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.filesStoring",
    "method": "PUT",
    "endpoint_path": "/files/storage",
    "endpoint_path_alternates": [
      "/files/storage",
      "https://api.uploadcare.com/files/storage",
      "https://api.uploadcare.com/files/storage"
    ],
    "response_type": "json",
    "description": "Used to store multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.filesDelete",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/files-delete",
    "pathname": "/api/rest-api-v-0-7/file/files-delete",
    "title": "Batch file delete",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.filesDelete",
    "method": "DELETE",
    "endpoint_path": "/files/storage",
    "endpoint_path_alternates": [
      "/files/storage",
      "https://api.uploadcare.com/files/storage",
      "https://api.uploadcare.com/files/storage"
    ],
    "response_type": "json",
    "description": "Used to delete multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.\nNote: this operation removes files from storage but doesn't invalidate CDN cache.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.createLocalCopy",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/create-local-copy",
    "pathname": "/api/rest-api-v-0-7/file/create-local-copy",
    "title": "Copy file to local storage",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.createLocalCopy",
    "method": "POST",
    "endpoint_path": "/files/local_copy",
    "endpoint_path_alternates": [
      "/files/local_copy",
      "https://api.uploadcare.com/files/local_copy",
      "https://api.uploadcare.com/files/local_copy"
    ],
    "response_type": "json",
    "description": "POST requests are used to copy original files or their modified versions to a default storage.\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\nCopying of large files is not supported at the moment. If the file CDN URL includes transformation operators, its size MUST NOT exceed 100 MB. If not, the size MUST NOT exceed 5 GB.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_file.subpackage_file.createRemoteCopy",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file/create-remote-copy",
    "pathname": "/api/rest-api-v-0-7/file/create-remote-copy",
    "title": "Copy file to remote storage",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File",
        "pathname": "/api/rest-api-v-0-7/file"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_file.createRemoteCopy",
    "method": "POST",
    "endpoint_path": "/files/remote_copy",
    "endpoint_path_alternates": [
      "/files/remote_copy",
      "https://api.uploadcare.com/files/remote_copy",
      "https://api.uploadcare.com/files/remote_copy"
    ],
    "response_type": "json",
    "description": "POST requests are used to copy original files or their modified versions to a custom storage.\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\nCopying of large files is not supported at the moment. File size MUST NOT exceed 5 GB.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionExecute",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execute",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execute",
    "title": "Execute AWS Rekognition",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionExecute",
    "method": "POST",
    "endpoint_path": "/addons/aws_rekognition_detect_labels/execute",
    "endpoint_path_alternates": [
      "/addons/aws_rekognition_detect_labels/execute",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute"
    ],
    "response_type": "json",
    "description": "Execute AWS Rekognition Add-On for a given target to detect labels in an image. Note: Detected labels are stored in the file's appdata.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionExecutionStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execution-status",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-execution-status",
    "title": "Check AWS Rekognition execution status",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionExecutionStatus",
    "method": "GET",
    "endpoint_path": "/addons/aws_rekognition_detect_labels/execute/status",
    "endpoint_path_alternates": [
      "/addons/aws_rekognition_detect_labels/execute/status",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute/status",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute/status"
    ],
    "response_type": "json",
    "description": "Check the status of an Add-On execution request that had been started\nusing the Execute Add-On operation.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionDetectModerationLabelsExecute",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execute",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execute",
    "title": "Execute AWS Rekognition Moderation",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionDetectModerationLabelsExecute",
    "method": "POST",
    "endpoint_path": "/addons/aws_rekognition_detect_moderation_labels/execute",
    "endpoint_path_alternates": [
      "/addons/aws_rekognition_detect_moderation_labels/execute",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute"
    ],
    "response_type": "json",
    "description": "Execute AWS Rekognition Moderation Add-On for a given target to detect moderation labels in an image. Note: Detected moderation labels are stored in the file's appdata.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execution-status",
    "pathname": "/api/rest-api-v-0-7/add-ons/aws-rekognition-detect-moderation-labels-execution-status",
    "title": "Check AWS Rekognition Moderation execution status",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus",
    "method": "GET",
    "endpoint_path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
    "endpoint_path_alternates": [
      "/addons/aws_rekognition_detect_moderation_labels/execute/status",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute/status",
      "https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute/status"
    ],
    "response_type": "json",
    "description": "Check the status of an Add-On execution request that had been started\nusing the Execute Add-On operation.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.ucClamavVirusScanExecute",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execute",
    "pathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execute",
    "title": "Execute ClamAV",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.ucClamavVirusScanExecute",
    "method": "POST",
    "endpoint_path": "/addons/uc_clamav_virus_scan/execute",
    "endpoint_path_alternates": [
      "/addons/uc_clamav_virus_scan/execute",
      "https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute",
      "https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute"
    ],
    "response_type": "json",
    "description": "Execute ClamAV virus checking Add-On for a given target.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.ucClamavVirusScanExecutionStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execution-status",
    "pathname": "/api/rest-api-v-0-7/add-ons/uc-clamav-virus-scan-execution-status",
    "title": "Check ClamAV execution status",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.ucClamavVirusScanExecutionStatus",
    "method": "GET",
    "endpoint_path": "/addons/uc_clamav_virus_scan/execute/status",
    "endpoint_path_alternates": [
      "/addons/uc_clamav_virus_scan/execute/status",
      "https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute/status",
      "https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute/status"
    ],
    "response_type": "json",
    "description": "Check the status of an Add-On execution request that had been started\nusing the Execute Add-On operation.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.removeBgExecute",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execute",
    "pathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execute",
    "title": "Execute Remove.bg",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.removeBgExecute",
    "method": "POST",
    "endpoint_path": "/addons/remove_bg/execute",
    "endpoint_path_alternates": [
      "/addons/remove_bg/execute",
      "https://api.uploadcare.com/addons/remove_bg/execute",
      "https://api.uploadcare.com/addons/remove_bg/execute"
    ],
    "response_type": "json",
    "description": "Execute remove.bg background image removal Add-On for a given target.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_addOns.subpackage_addOns.removeBgExecutionStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execution-status",
    "pathname": "/api/rest-api-v-0-7/add-ons/remove-bg-execution-status",
    "title": "Check Remove.bg execution status",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Add Ons",
        "pathname": "/api/rest-api-v-0-7/add-ons"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_addOns.removeBgExecutionStatus",
    "method": "GET",
    "endpoint_path": "/addons/remove_bg/execute/status",
    "endpoint_path_alternates": [
      "/addons/remove_bg/execute/status",
      "https://api.uploadcare.com/addons/remove_bg/execute/status",
      "https://api.uploadcare.com/addons/remove_bg/execute/status"
    ],
    "response_type": "json",
    "description": "Check the status of an Add-On execution request that had been started\nusing the Execute Add-On operation.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.key",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file-metadata/key",
    "pathname": "/api/rest-api-v-0-7/file-metadata/key",
    "title": "Get metadata key's value",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File Metadata",
        "pathname": "/api/rest-api-v-0-7/file-metadata"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_fileMetadata.key",
    "method": "GET",
    "endpoint_path": "/files/:uuid/metadata/:key",
    "endpoint_path_alternates": [
      "/files/{uuid}/metadata/{key}",
      "https://api.uploadcare.com/files/:uuid/metadata/:key",
      "https://api.uploadcare.com/files/%7Buuid%7D/metadata/%7Bkey%7D"
    ],
    "response_type": "json",
    "description": "Get the value of a single metadata key.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.updateFileMetadataKey",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file-metadata/update-file-metadata-key",
    "pathname": "/api/rest-api-v-0-7/file-metadata/update-file-metadata-key",
    "title": "Update metadata key's value",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File Metadata",
        "pathname": "/api/rest-api-v-0-7/file-metadata"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_fileMetadata.updateFileMetadataKey",
    "method": "PUT",
    "endpoint_path": "/files/:uuid/metadata/:key",
    "endpoint_path_alternates": [
      "/files/{uuid}/metadata/{key}",
      "https://api.uploadcare.com/files/:uuid/metadata/:key",
      "https://api.uploadcare.com/files/%7Buuid%7D/metadata/%7Bkey%7D"
    ],
    "response_type": "json",
    "description": "Update the value of a single metadata key. If the key does not exist, it will be created.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_fileMetadata.subpackage_fileMetadata.deleteFileMetadataKey",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/file-metadata/delete-file-metadata-key",
    "pathname": "/api/rest-api-v-0-7/file-metadata/delete-file-metadata-key",
    "title": "Delete metadata key",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "File Metadata",
        "pathname": "/api/rest-api-v-0-7/file-metadata"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_fileMetadata.deleteFileMetadataKey",
    "method": "DELETE",
    "endpoint_path": "/files/:uuid/metadata/:key",
    "endpoint_path_alternates": [
      "/files/{uuid}/metadata/{key}",
      "https://api.uploadcare.com/files/:uuid/metadata/:key",
      "https://api.uploadcare.com/files/%7Buuid%7D/metadata/%7Bkey%7D"
    ],
    "description": "Delete a file's metadata key.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.groupsList",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/group/groups-list",
    "pathname": "/api/rest-api-v-0-7/group/groups-list",
    "title": "List of groups",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Group",
        "pathname": "/api/rest-api-v-0-7/group"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_group.groupsList",
    "method": "GET",
    "endpoint_path": "/groups",
    "endpoint_path_alternates": [
      "/groups",
      "https://api.uploadcare.com/groups",
      "https://api.uploadcare.com/groups"
    ],
    "response_type": "json",
    "description": "Get a paginated list of groups.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.info",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/group/info",
    "pathname": "/api/rest-api-v-0-7/group/info",
    "title": "Group info",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Group",
        "pathname": "/api/rest-api-v-0-7/group"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_group.info",
    "method": "GET",
    "endpoint_path": "/groups/:uuid",
    "endpoint_path_alternates": [
      "/groups/{uuid}",
      "https://api.uploadcare.com/groups/:uuid",
      "https://api.uploadcare.com/groups/%7Buuid%7D"
    ],
    "response_type": "json",
    "description": "Get a file group by its ID.\nGroups are identified in a way similar to individual files. A group ID consists of a UUID\nfollowed by a “~” (tilde) character and a group size: integer number of the files in the group.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_group.subpackage_group.deleteGroup",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/group/delete-group",
    "pathname": "/api/rest-api-v-0-7/group/delete-group",
    "title": "Delete group",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Group",
        "pathname": "/api/rest-api-v-0-7/group"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_group.deleteGroup",
    "method": "DELETE",
    "endpoint_path": "/groups/:uuid",
    "endpoint_path_alternates": [
      "/groups/{uuid}",
      "https://api.uploadcare.com/groups/:uuid",
      "https://api.uploadcare.com/groups/%7Buuid%7D"
    ],
    "description": "Delete a file group by its ID.\nNote: The operation only removes the group object itself. All the files that were part of the group are left as is.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_project.subpackage_project.info",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/project/info",
    "pathname": "/api/rest-api-v-0-7/project/info",
    "title": "Project info",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Project",
        "pathname": "/api/rest-api-v-0-7/project"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_project.info",
    "method": "GET",
    "endpoint_path": "/project",
    "endpoint_path_alternates": [
      "/project",
      "https://api.uploadcare.com/project",
      "https://api.uploadcare.com/project"
    ],
    "response_type": "json",
    "description": "Getting info about account project.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.webhooksList",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/webhook/webhooks-list",
    "pathname": "/api/rest-api-v-0-7/webhook/webhooks-list",
    "title": "List of webhooks",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Webhook",
        "pathname": "/api/rest-api-v-0-7/webhook"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.webhooksList",
    "method": "GET",
    "endpoint_path": "/webhooks",
    "endpoint_path_alternates": [
      "/webhooks",
      "https://api.uploadcare.com/webhooks",
      "https://api.uploadcare.com/webhooks"
    ],
    "response_type": "json",
    "description": "List of project webhooks.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.create",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/webhook/create",
    "pathname": "/api/rest-api-v-0-7/webhook/create",
    "title": "Create webhook",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Webhook",
        "pathname": "/api/rest-api-v-0-7/webhook"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.create",
    "method": "POST",
    "endpoint_path": "/webhooks",
    "endpoint_path_alternates": [
      "/webhooks",
      "https://api.uploadcare.com/webhooks",
      "https://api.uploadcare.com/webhooks"
    ],
    "response_type": "json",
    "description": "Create and subscribe to a webhook. You can use webhooks to receive notifications about your uploads. For instance, once a file gets uploaded to your project, we can notify you by sending a message to a target URL.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.updateWebhook",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/webhook/update-webhook",
    "pathname": "/api/rest-api-v-0-7/webhook/update-webhook",
    "title": "Update webhook",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Webhook",
        "pathname": "/api/rest-api-v-0-7/webhook"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.updateWebhook",
    "method": "PUT",
    "endpoint_path": "/webhooks/:id",
    "endpoint_path_alternates": [
      "/webhooks/{id}",
      "https://api.uploadcare.com/webhooks/:id",
      "https://api.uploadcare.com/webhooks/%7Bid%7D"
    ],
    "response_type": "json",
    "description": "Update webhook attributes.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_webhook.subpackage_webhook.unsubscribe",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/webhook/unsubscribe",
    "pathname": "/api/rest-api-v-0-7/webhook/unsubscribe",
    "title": "Delete webhook",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Webhook",
        "pathname": "/api/rest-api-v-0-7/webhook"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_webhook.unsubscribe",
    "method": "DELETE",
    "endpoint_path": "/webhooks/unsubscribe",
    "endpoint_path_alternates": [
      "/webhooks/unsubscribe",
      "https://api.uploadcare.com/webhooks/unsubscribe",
      "https://api.uploadcare.com/webhooks/unsubscribe"
    ],
    "description": "Unsubscribe and delete a webhook.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvertInfo",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/conversion/document-convert-info",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert-info",
    "title": "Document info",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Conversion",
        "pathname": "/api/rest-api-v-0-7/conversion"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.documentConvertInfo",
    "method": "GET",
    "endpoint_path": "/convert/document/:uuid",
    "endpoint_path_alternates": [
      "/convert/document/{uuid}",
      "https://api.uploadcare.com/convert/document/:uuid",
      "https://api.uploadcare.com/convert/document/%7Buuid%7D"
    ],
    "response_type": "json",
    "description": "The endpoint allows you to determine the document format and possible conversion formats.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvert",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/conversion/document-convert",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert",
    "title": "Convert document",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Conversion",
        "pathname": "/api/rest-api-v-0-7/conversion"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.documentConvert",
    "method": "POST",
    "endpoint_path": "/convert/document",
    "endpoint_path_alternates": [
      "/convert/document",
      "https://api.uploadcare.com/convert/document",
      "https://api.uploadcare.com/convert/document"
    ],
    "response_type": "json",
    "description": "Uploadcare allows you to convert files to different target formats. Check out the conversion capabilities for each supported format.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.documentConvertStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/conversion/document-convert-status",
    "pathname": "/api/rest-api-v-0-7/conversion/document-convert-status",
    "title": "Document conversion job status",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Conversion",
        "pathname": "/api/rest-api-v-0-7/conversion"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.documentConvertStatus",
    "method": "GET",
    "endpoint_path": "/convert/document/status/:token",
    "endpoint_path_alternates": [
      "/convert/document/status/{token}",
      "https://api.uploadcare.com/convert/document/status/:token",
      "https://api.uploadcare.com/convert/document/status/%7Btoken%7D"
    ],
    "response_type": "json",
    "description": "Once you get a conversion job result, you can acquire a conversion job status via token. Just put it in your request URL as :token.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.videoConvert",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/conversion/video-convert",
    "pathname": "/api/rest-api-v-0-7/conversion/video-convert",
    "title": "Convert video",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Conversion",
        "pathname": "/api/rest-api-v-0-7/conversion"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.videoConvert",
    "method": "POST",
    "endpoint_path": "/convert/video",
    "endpoint_path_alternates": [
      "/convert/video",
      "https://api.uploadcare.com/convert/video",
      "https://api.uploadcare.com/convert/video"
    ],
    "response_type": "json",
    "description": "Uploadcare video processing adjusts video quality, format (mp4, webm, ogg), and size, cuts it, and generates thumbnails. Processed video is instantly available over CDN.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.rest-api-v-0-7.subpackage_conversion.subpackage_conversion.videoConvertStatus",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/rest-api-v-0-7/conversion/video-convert-status",
    "pathname": "/api/rest-api-v-0-7/conversion/video-convert-status",
    "title": "Video conversion job status",
    "breadcrumb": [
      {
        "title": "REST API v0.7",
        "pathname": "/api/rest-api-v-0-7"
      },
      {
        "title": "Conversion",
        "pathname": "/api/rest-api-v-0-7/conversion"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "api_endpoint_id": "subpackage_conversion.videoConvertStatus",
    "method": "GET",
    "endpoint_path": "/convert/video/status/:token",
    "endpoint_path_alternates": [
      "/convert/video/status/{token}",
      "https://api.uploadcare.com/convert/video/status/:token",
      "https://api.uploadcare.com/convert/video/status/%7Btoken%7D"
    ],
    "response_type": "json",
    "description": "Once you get a processing job result, you can acquire a processing job status via token. Just put it in your request URL as :token.",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.uploadcare.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation.subpackage_fileInformation.fileInfoJson",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/url-api/file-information/file-info-json",
    "pathname": "/api/url-api/file-information/file-info-json",
    "title": "File info as JSON",
    "breadcrumb": [
      {
        "title": "URL API",
        "pathname": "/api/url-api"
      },
      {
        "title": "File Information",
        "pathname": "/api/url-api/file-information"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "api_endpoint_id": "subpackage_fileInformation.fileInfoJson",
    "method": "GET",
    "endpoint_path": "/:uuid/-/json",
    "endpoint_path_alternates": [
      "/{uuid}/-/json",
      "https://ucarecdn.com/:uuid/-/json",
      "https://ucarecdn.com/%7Buuid%7D/-/json"
    ],
    "response_type": "json",
    "description": "Returns file-related information, such as image dimensions or geo\ntagging data in the JSON format.",
    "environments": [
      {
        "id": "Default",
        "url": "https://ucarecdn.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileInformation.subpackage_fileInformation.fileInfoJsonp",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/url-api/file-information/file-info-jsonp",
    "pathname": "/api/url-api/file-information/file-info-jsonp",
    "title": "File info as application/javascript",
    "breadcrumb": [
      {
        "title": "URL API",
        "pathname": "/api/url-api"
      },
      {
        "title": "File Information",
        "pathname": "/api/url-api/file-information"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "api_endpoint_id": "subpackage_fileInformation.fileInfoJsonp",
    "method": "GET",
    "endpoint_path": "/:uuid/-/jsonp",
    "endpoint_path_alternates": [
      "/{uuid}/-/jsonp",
      "https://ucarecdn.com/:uuid/-/jsonp",
      "https://ucarecdn.com/%7Buuid%7D/-/jsonp"
    ],
    "response_type": "json",
    "description": "Same as the example above, but it returns data as the\napplication/javascript type.\nThe callback name should always be uploadcare_callback. It should\nreceive the two following arguments: id and a response object.\nFor original files, id is equivalent to their UUIDs.\nFor processed files, id is equivalent to their URLs, excluding\nthe last operation, jsonp.",
    "environments": [
      {
        "id": "Default",
        "url": "https://ucarecdn.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api.api.url-api.subpackage_fileNames.subpackage_fileNames.fileWithName",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api/url-api/file-names/file-with-name",
    "pathname": "/api/url-api/file-names/file-with-name",
    "title": "File with a custom name",
    "breadcrumb": [
      {
        "title": "URL API",
        "pathname": "/api/url-api"
      },
      {
        "title": "File Names",
        "pathname": "/api/url-api/file-names"
      }
    ],
    "tab": {
      "title": "API References",
      "pathname": "/api"
    },
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "api_endpoint_id": "subpackage_fileNames.fileWithName",
    "method": "GET",
    "endpoint_path": "/:uuid/:filename",
    "endpoint_path_alternates": [
      "/{uuid}/{filename}",
      "https://ucarecdn.com/:uuid/:filename",
      "https://ucarecdn.com/%7Buuid%7D/%7Bfilename%7D"
    ],
    "response_type": "file",
    "description": "You can set an optional filename that users will see instead of\nthe original name.",
    "environments": [
      {
        "id": "Default",
        "url": "https://ucarecdn.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "file"
    ],
    "type": "api-reference"
  }
]