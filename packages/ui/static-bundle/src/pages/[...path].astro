---
import { FernNavigation } from "@fern-api/fdr-sdk";
import { NodeCollector } from "@fern-api/fdr-sdk/navigation";
import type { GetStaticPaths } from "astro";
import { Markdown } from "astro-remote";
import matter from "gray-matter";
import Aside from "../components/Aside.astro";
import DocsMainContent from "../components/DocsMainContent.astro";
import { getDocs } from "../utils";

export const getStaticPaths = (async () => {
    const docs = await getDocs("gemini.ferndocs.com");
    const root = FernNavigation.utils.convertLoadDocsForUrlResponse(docs);
    return NodeCollector.collect(root)
        .getPageSlugs()
        .map((path) => {
            return {
                params: { path },
            };
        });
}) satisfies GetStaticPaths;

const { path } = Astro.params;

const docs = await getDocs("gemini.ferndocs.com");
const root = FernNavigation.utils.convertLoadDocsForUrlResponse(docs);
const node = FernNavigation.utils.findNode(root, path.split("/"));

if (node.type === "notFound") {
    return Astro.rewrite("/404");
}

if (node.type === "redirect") {
    return Astro.redirect(node.redirect);
}

const apiReferences = FernNavigation.utils.collectApiReferences(root);
---

<html>
    <head>
        <title>{node.node.title}</title>
    </head>
    <body>
        <ul class="mb-8 flex">
            {
                node.breadcrumb.map((crumb, index) => (
                    <li class="flex items-center">
                        {index > 0 && (
                            <div class="border-t border-r block border-current size-[0.5em] rotate-45 mx-2 -translate-x-1/4" />
                        )}
                        <span>{crumb}</span>
                    </li>
                ))
            }
        </ul>
        <DocsMainContent node={node} />
        {
            apiReferences.map((apiReference) => (
                <>
                    <div>
                        <h2>{apiReference.title}</h2>
                    </div>
                    {apiReference.children.map((child) => {
                        switch (child.type) {
                            case "page": {
                                const { markdown } = docs.definition.pages[child.pageId];
                                const { content, data } = matter(markdown);
                                return (
                                    <div>
                                        <h1>{data.title}</h1>
                                        <Markdown
                                            content={content}
                                            components={{ Aside }}
                                            sanitize={{ allowComponents: true }}
                                            marked={{
                                                extensions: [
                                                    {
                                                        renderer: {},
                                                    },
                                                ],
                                            }}
                                        />
                                    </div>
                                );
                            }
                        }
                    })}
                </>
            ))
        }
    </body>
</html>
